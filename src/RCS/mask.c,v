head	1.10;
access;
symbols
	pre-tilt-improve:1.9
	pre_surf_fromtop:1.9
	pre_neednewmap:1.6
	pre_apppluss_remove:1.6
	pre_tiltpair_chng:1.6
	pre_GPL:1.4;
locks;
comment	@ * @;


1.10
date	2018.12.07.17.03.32;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.23.19.47.03;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.23.19.45.57;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.21.13.53.33;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.05.12.05.27;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.18.16.59.40;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	96.04.01.17.25.07;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	94.09.12.14.21.47;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.07.28.09.53.36;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.10.10.11.49;	author leith;	state Exp;
branches;
next	;


desc
@@


1.10
log
@bollingers_email_and_cosmetic
@
text
@
/*$Header: web/src/RCS/mask.c,v 1.9 2011/09/23 19:47:03 leith Exp $*/
/*
 C**********************************************************************
 C
 C  WID_MASK.FOR  -- CREATED FEB 90
 C  mask.c                                                      DEC 92
 C                                                              
 C *********************************************************************
 C * AUTHOR: ArDean Leith                                              *
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2018  Health Research Inc.                     *
 C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.     *
 C=* Email: spider@@health.ny.gov                                       *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* with this program. If not, see <http://www.gnu.org/licenses>      *
 C=*                                                                   *
 C *********************************************************************
 C
 C  mask
 C
 C  PURPOSE:    Creates a mask by drawing around areas with mouse
 C
 C  CALLED BY:  imagemen 
 C
 C--*******************************************************************
*/

#include "common.h"
#include "routines.h"
#include "mask.h"

// Max # of mask outline pts.
#define  nsize 300
// Max # of mask polygons
#define poly_maxpoly  5000   
// Max # of mask polygon pts
#define poly_maxpts  50000
 
 /* Internal subroutine prototypes */
 static void       mask_add_poly(XPoint *, int);
 static void       mask_clear   (void);

 /* External common variables used here */

 /* Global variable used by maskmen also */
 int              filler     = TRUE;
 GC               icontxmask = (GC) NULL;       // Mask GC 
 Pixmap           masksav    = (Pixmap) NULL;   // Mask store 

 /* File variables */
 static int       ix0,iy0;
 static int       ix2,iy2, ix1,iy1;
 static XPoint *  points;
 static Boolean   gotcontxt = FALSE;

 int              firstpt, ipts;
 XPoint *         poly_points;
 int *            poly_go;
 int *            poly_npts;

 int              poly_totnpts;
 int              poly_num;

 //----------------------  mask   ----------------------------------

 void mask(void)

 {
 XGCValues    gcval;
 int          idt = 1;        // Overlay pixmap depth

 /* Refresh screen */
 expos_cb(NULL,NULL,NULL);

 /* Create single bit mask same size as last image & GC */
 if (masksav != ((Pixmap) NULL)) XFreePixmap(idispl,masksav);
 masksav    = XCreatePixmap(idispl,iroot,nsam,nrow,idt);
 //printf(" Created masksav: %d Color: %d = %#8x \n",
 //           masksav,icolorov,ispicol[icolorov]);

 // Create graphics context for the single bit mask image
 if (! gotcontxt) icontxmask = XCreateGC(idispl,masksav,0,&gcval);
 gotcontxt = TRUE; 

 // Set clearing  color and clear the single bit mask
 mask_clear();

 /* Set current draw color to overlay color */
 wicolor(icontx,colorgo+icolorov);

 if ((points = (XPoint *)      malloc(nsize *       sizeof(XPoint))) == (int) 0)
    {  spout("*** Unable to malloc points in mask.c.");    return;}

 if ((poly_points = (XPoint *) malloc(poly_maxpts * sizeof(XPoint))) == (int) 0)
    {  spout("*** Unable to malloc poly_points in mask.c."); return;}

 if ((poly_go = (int *)        malloc(poly_maxpoly * sizeof(int)))   == (int) 0)
    {  spout("*** Unable to malloc poly_go in mask.c.");  return;}

 if ((poly_npts = (int *)      malloc(poly_maxpoly * sizeof(int)))   == (int) 0)
    {  spout("*** Unable to malloc poly_npts in mask.c.");  return;}

 /*  Set flags for new polygons */
 mask_reset();

 showbutx("Starts / sets line segment.",
          "Menu.",
          "Close this polygon.",FALSE);

 actions(iw_win, "mask_pop", mask_pop, "M123");
 }


 // ------------------- mask_pop  -----------------------------------

 void mask_pop(Widget iw_t, XEvent *event, String *params,
               Cardinal *num_params)
 {

 int  i;
 char        outstr[81];

 if (!(strcmp(*params,"M")))                 /* Cursor moved */
    {
    if (!firstpt)
       {
       /* Get mouse position ix2,iy2  */
       getloc(event,'M',&ix2,&iy2);

       /* Already have line, mouse moved, so erase and draw new line   */
       /* Copy backing store to image window & draw new line on screen */
       wirubberline(iwin,icontx,TRUE,FALSE,ix1,iy1,ix2,iy2);
       }
    }

 else if (!(strcmp(*params,"1")))            /* Button 1 pushed */ 
    {
    /* Get mouse position ix2,iy2  */
    getloc(event,'M',&ix2,&iy2);

    if (firstpt)
       {
       firstpt = FALSE;
       ix0     = ix2;
       iy0     = iy2;
       }
    else
       {  
       /*  Set current color to overlay color */
       wicolor(icontx,colorgo+icolorov);

       /* Draw permanent line to backing store and copy to screen */
       wirubberline(iwin,icontx,TRUE,TRUE,ix1,iy1,ix2,iy2);
       }

    ix1 = ix2;
    iy1 = iy2;

    if (ipts >= nsize)
       {  // Overflow
       sprintf(outstr,"Polygon length limit: %d \n",nsize);
       spout(outstr);
       return;
       }

    // Save points in mask polygon list
    points[ipts].x = ix1 - ixull + 1;
    points[ipts].y = iy1 - iyull + 1;
    ipts++;
    }
 
 else if (!(strcmp(*params,"2")))          /* Button 2 pushed */ 
    {
    /* Mask menu callup */

    ipts    = 0;
    firstpt = TRUE;

    // Display masking menu
    maskmen();
    }

 else if (!(strcmp(*params,"3")))          /* Button 3 pushed */        
    {  
    //   Finished with this mask polygon 
    if (ipts > 0) 
       {
       points[ipts].x = ix0 - ixull + 1;
       points[ipts].y = iy0 - iyull + 1;
       ipts++;

       // Draw permanent line to backing store and copy to screen 
       wirubberline(iwin,icontx,TRUE,TRUE,ix1,iy1,ix0,iy0);

       // Save this polygon in polygon list
       mask_add_poly(points, ipts);
       }

    firstpt = TRUE;
    ipts    = 0;             // Finished with current polygon

    XFlush(idispl);
    }

 return;
 }


// ------------  mask_add_poly --- add polygon to mask list -------- 

 void mask_add_poly(XPoint * points, int npts)
 {
 int  i,igo;
 char outstr[81];

 if (poly_num >= poly_maxpoly) 
    {  // Overflow
    sprintf(outstr,"Too many polygons: %d in mask", poly_num);
    spout(outstr);   
    return;
    }

 poly_go  [poly_num] = poly_totnpts;      // Starting index of this poly
 poly_npts[poly_num] = npts;              // # of points on this poly

 igo = poly_go[poly_num];
 //printf(" Adding polygon: %d with: %d points go: %d\n", poly_num, npts, igo);

 poly_num++;                              // Increment polygon numbers

 for ( i = 0; i < npts; i++)
    {
    if (poly_totnpts >= poly_maxpts)
       { // Overflow
       sprintf(outstr,"Number of mask points limited to: %d \n",poly_maxpts);
       spout(outstr);
       return;
       }

    poly_points[poly_totnpts].x = points[i].x ;
    poly_points[poly_totnpts].y = points[i].y ;

    //printf(" Point: %d %d = %d , %d \n",
    //         i, poly_totnpts,poly_points[poly_totnpts].x,poly_points[poly_totnpts].y );

    poly_totnpts++;
    }

 //printf(" \n");
 //printf(" Added polygon: %d with: %d points shifted: %d %d Start: %d %d \n",
 //              poly_num-1, npts,    ixull, iyull, 
 //              poly_points[igo].x,  poly_points[igo].y);

 }

 // ------------------  mask_draw_polys   -------------------------------

void  mask_draw_polys(Pixmap imaget, GC icontxt, 
                      int add_shift ,int filled)
{ 

int      ipoly, npts, igo,ipt,i;
XPoint   pointst[nsize];

if (poly_num > 0)
   {
   for (ipoly = 0; ipoly < poly_num; ipoly++)
      {
      igo  = poly_go  [ipoly];
      npts = poly_npts[ipoly];   

      i = 0;

      for (ipt = igo; ipt <= igo + npts -1; ipt++)
         {
         //printf("  ipt: %d  npts: %d i: %d  \n",ipt,npts,i);

         if (add_shift) 
            {
            pointst[i].x = poly_points[ipt].x + ixull ;  // ixull from shift.c
            pointst[i].y = poly_points[ipt].y + iyull ;  // iyull from shift.c
            }
         else
            {
            pointst[i].x = poly_points[ipt].x ;  
            pointst[i].y = poly_points[ipt].y ;  
            }

         i++;
         }


      if (filled)
         {
         // Draw filled polygons on the mask image 
         XFillPolygon(idispl,imaget,icontxt, pointst,npts,
                      Complex,CoordModeOrigin);
         neednewmap = TRUE;

         //printf(" Drew Filled polygon: %d with: %d points shifted: %d %d Start: %d %d igo: %d\n",
         //    ipoly, npts, ixull,iyull, 
         //    pointst[0].x,pointst[0].y, igo);
         }
      else
         {
         // Draw empty polygons on the mask image 
         XDrawLines(idispl,imaget,icontxt,pointst,npts,
                    CoordModeOrigin);
         neednewmap = TRUE;

         //printf(" Drew Empty polygon: %d with: %d points shifted: %d %d Start: %d %d igo: %d\n",
         //      ipoly, npts, ixull,iyull, 
         //      pointst[0].x,pointst[0].y),igo;
         }

      }
   }
   XFlush(idispl);
} 
 
// --------------  mask_clear --- clear mask image ------------------ 

 void mask_clear(void)
 {
 // Set clearing  color  to black
 XSetForeground(idispl,icontxmask,0x00);             

 // Clear the single bit mask
 XFillRectangle(idispl,masksav,icontxmask, 0,0,nsam,nrow); 

 // Set single bit mask color (white)
 XSetForeground(idispl,icontxmask,0xff);      
 }


// --------------  mask_reset --- zero mask list ------------------ 

 void mask_reset(void)
 {

 poly_num     = 0;
 poly_totnpts = 0;

 firstpt      = TRUE;
 ipts         = 0;

 if (masksav != ((Pixmap) NULL)) mask_clear(); 
 }
@


1.9
log
@wicolor(icontx,colorgo+icol
/
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/mask.c,v 1.8 2011/09/23 19:45:57 leith Exp leith $*/
d4 7
a10 7
C***********************************************************************
C
C  WID_MASK.FOR  -- CREATED FEB 90
C  mask.c                   DEC 92
C                                                              
C **********************************************************************
C *  AUTHOR: ArDean Leith                                              *
d12 3
a14 6
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
d23 1
a23 1
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
d27 1
a27 3
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
d29 9
a37 9
C **********************************************************************
C
C    MASK
C
C    PURPOSE:      Creates a mask by drawing around areas with mouse
C
C    CALLED BY:    imagemen 
C
C--*********************************************************************
d42 1
d52 2
a53 5
 void             mask_pop     (Widget, XEvent *, String *, Cardinal *);
 void             mask_add_poly(XPoint *, int);
 void             mask_draw_polys(Pixmap, GC, int, int);
 void             mask_reset   ();
 void             mask_clear   ();
a55 1
 extern char      outstr[80];
d133 1
d226 1
d335 1
a335 1
 void mask_clear()
d350 1
a350 1
 void mask_reset()
@


1.8
log
@wicolor(icontxor,colorgo+ico
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/mask.c,v 1.7 2011/09/21 13:53:33 leith Exp leith $*/
d169 1
a169 1
       wicolor(icontx,icolorov);
@


1.7
log
@neednewmap
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/mask.c,v 1.6 2011/05/05 12:05:27 leith Exp leith $*/
d109 1
a109 1
 wicolor(icontx,icolorov);
@


1.6
log
@-cmap_changes_etc
@
text
@d2 1
a2 1
/*$Header:  $*/
d316 1
d327 2
@


1.5
log
@GPL
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/mask.c,v 1.4 1996/04/01 17:25:07 leith Exp $*/
d4 1
a4 1
C***************************************************************************
d10 1
a10 1
C *  AUTHOR: ArDean Leith                                                  *
d38 1
a38 1
C    PURPOSE:      CREATES A MASK BY DRAWING AROUND AREAS WITH MOUSE
d40 1
a40 3
C    PARAMETERS:   
C
C    CALLED BY:    MASKMEN
d48 32
a79 2
 /* internal subroutine prototypes */
 void          mask_pop     (Widget, XEvent *, String *, Cardinal *);
d81 2
a82 9
 /* global variable used by maskmen also */
 int                  filler = TRUE;
 GC                   icontxx;

 /* internal common variables */
 static int           masks, firstpt, ix0,iy0, ipts;
 static XPoint *      points;
 static int           nsize;
 static int           ix2,iy2,ix1,iy1;
d84 1
a84 1
 /************************  mask   *******************************/
d89 2
a90 2
 /* set new lut for all correct use with x-or */
 overlut();
d92 1
a92 1
 /* refresh screen */
d95 27
a121 9
 /* set number of masked polygons made so far to zero */
 masks  = 0;
 nsize  = 300;

 if ((points = (XPoint *) malloc(nsize * sizeof(XPoint))) == (int) 0)
      { 
      spout("*** Unable to malloc point array in mask.c.");
      return;
      }
d123 2
a124 2
 /*  set flag for new polygon */
 firstpt = TRUE;      
a129 3
/* set up a xor graphics context */
icontxx = setxor(icontx);

d134 1
a134 1
 /****************** mask_pop  ************************************/
d137 1
a137 1
                   Cardinal *num_params)
a138 1
 int icoloro;
d140 3
a142 1
 if (!(strcmp(*params,"M")))                 /* cursor moved */
d146 1
a146 1
       /* get mouse position ix2,iy2  */
d149 3
a151 2
       /* already have line, mouse moved, so erase and draw new line */
       xorline(iwin,icontxx,FALSE,ix1,iy1,ix2,iy2);
d155 1
a155 1
 else if (!(strcmp(*params,"1")))            /* button 1 pushed */ 
d157 1
a157 1
    /* get mouse position ix2,iy2  */
a164 1
       ipts    = 0;
d167 3
a169 1
       {   /* draw permanent line to this location */
d171 3
a173 2
       /* set to draw in overlay plane */
       wisetplanes(idispl,icontx,128);
a174 7
       xorline(iwin,   icontx,TRUE,ix1,iy1,ix2,iy2);
       /* save line in backing store */
       xorline(imagsav,icontx,TRUE,ix1,iy1,ix2,iy2);

       /* set to draw in all planes */
       wisetplanes(idispl,icontx,-1);
       }
d177 1
d179 4
a182 7
       {
       nsize  = nsize + 50;
       if ((points = (XPoint *) realloc(points, nsize * sizeof(XPoint))) == (int) 0)
          { 
          spout("*** Unable to realloc point array in mask.c.");
          ipts = nsize - 2;
          }
d184 5
a188 2
    points[ipts].x   = ix1;
    points[ipts++].y = iy1;
d191 1
a191 1
 else if (!(strcmp(*params,"2")))          /* button 2 pushed */ 
d193 6
a198 1
    /* menu callup */
d202 1
a202 1
 else if (!(strcmp(*params,"3")))          /* button 3 pushed */        
d204 16
a219 1
    /*   finished with this mask polygon */
d221 35
a255 38
    if (ipts > 0)
       {   
       /* close the last polygon */

       /* set to draw in overlay planes */
       wisetplanes(idispl,icontx,128);

       xorline(iwin,   icontx,TRUE,ix1,iy1,ix0,iy0);
       xorline(imagsav,icontx,TRUE,ix1,iy1,ix0,iy0);
       points[ipts].x   = ix0;
       points[ipts++].y = iy0;

       icoloro = icolor;
       if (filler) 
          /*  set fill color to overlay color (depends on overlut) */
          wicolor(icontx,colorgo +9);

       else
          /* set fill color to black */
          wicolor(icontx,-1);
 
       /* draw the mask on the image */
       XFillPolygon(idispl,iwin,icontx,points,ipts,
                     Complex,CoordModeOrigin);

       /* draw the mask on the backing store */
       XFillPolygon(idispl,imagsav,icontx,points,ipts,
                    Complex,CoordModeOrigin);

       /* set to draw in all planes */
       wisetplanes(idispl,icontx,-1);

       /* reset current color */
       wicolor(icontx,icoloro);

       masks++;
       ipts    = 0;
       firstpt = TRUE;
d257 75
d333 15
a347 1
 return;
d350 14
@


1.4
log
@statics
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/mask.c,v 1.3 1994/09/12 14:21:47 leith Exp leith $*/
d9 1
a9 1
C **************************************************************************
d11 24
a34 7
C *  COPYRIGHT (C)1990, WADWSWORTH CENTER FOR LABORATORIES AND RESEARCH,   *
C *    NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.              *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
@


1.3
log
@ reworked color assignments
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/mask.c,v 1.2 94/07/28 09:53:36 leith Exp Locker: leith $*/
d11 1
a11 1
C *  COPYRIGHT (C)1990, WADWSWORTH CENTER FOR LABORATORIES AND RESEARCH,  *
d36 3
a38 2
 /* external common variables */
 extern Widget iw_maskmen1;
d41 4
a44 5
 GC            icontxx;
 int           masks, firstpt, ix0,iy0, ipts, filler = TRUE;
 XPoint *      points;
 static int    nsize;
 static int    ix2,iy2,ix1,iy1;
@


1.2
log
@used routines.h
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/mask.c,v 1.1 93/11/10 10:11:49 leith Exp Locker: leith $*/
d115 1
a115 1
       /* set to draw in overlay planes */
d164 2
a165 2
          /*  set fill color to white (depends on overlut) */
          wicolor(icontx,10);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*$Header$*/
d31 1
a31 14

 /* external subroutines */
 extern void   expos_cb     (Widget, caddr_t, caddr_t);
 extern void   overlut      (void);
 extern void   spout        (char *);
 extern void   showbutx     (char *, char *, char *, int);
 extern void   actions      (Widget, char *, void (*)(), char *);
 extern void   getloc       (XEvent *, char, int *, int *);
 extern int    wisetplanes  (Display *, GC, int);
 extern int    wicolor      (GC, int);
 extern GC     setxor       (GC);
 extern void   xorline      (Window, GC, int, int, int, int, int);
 extern void   maskmen      (void);

@
