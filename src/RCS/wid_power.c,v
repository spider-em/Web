head	1.11;
access;
symbols
	pre-tilt-improve:1.11
	pre_surf_fromtop:1.11
	pre_neednewmap:1.9
	pre_apppluss_remove:1.9
	pre_tiltpair_chng:1.9
	pre_GPL:1.4;
locks;
comment	@ * @;


1.11
date	2011.09.27.17.23.09;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.21.13.45.40;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.29.16.31.20;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.20.17.52.46;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.09.14.17.12;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.01.19.33.45;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.18.16.59.52;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	97.05.19.15.06.01;	author liy;	state Exp;
branches;
next	1.3;

1.3
date	95.10.12.15.41.28;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	95.09.14.17.09.28;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	94.08.02.13.46.35;	author leith;	state Exp;
branches;
next	;


desc
@new
@


1.11
log
@true color support
@
text
@/*
************************************************************************
*  WID_POWER.FOR  -- CREATED FEB 93
*  Translated to wid_power.c by          Mahieddine Ladjadj   5/24/94
*               24 bit display bug fixed ArDean Leith         11/8/07
*
*C *********************************************************************
*C *  AUTHOR: ArDean Leith                                             *
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2007  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
*C *********************************************************************
*C
*C  int wid_power(perm, chktsiz)
*C
*C  PURPOSE:    Readsback window, stores in a image file
*C
*C  PARAMETERS: perm         Permanent or temporary spectrum
*C              chktsiz      Checks size of window
*C
*C  CALLED BY:  powerbut_pop()
*C
*C  CALLS:      power   X-Windows routines
*
************************************************************************
*/

#include "common.h"
#include "routines.h"

/********************************* wid_power()   **********************/

int wid_power(int perm, int *chktsiz)
   {
   register int  j, i, k;
   char	         outstr[80];
   static int    nsamwt, nrowwt;
   int           ik, nsamok, nrowok, it, irtflg, ipad, iplanes;
   XImage        *imagep;
   char          *lbuf;
   char          *excbuf;
   float *bufin, fmint, fmaxt, fmsc, scal, b;

   int           *jptr;

   /* Kludge to get around too many continuations */
   int nmax = 127, GOODMAX = 46;
   int good[] = {
	   8,  16,  20,  24,  32,  36,  40,  48,  60,  64,
	  72,  80,  96, 100, 108, 120, 128, 144, 160, 180, 
	 192, 200, 216, 240, 256, 288, 300, 320, 360, 384, 
	 400, 432, 480, 512, 576, 600, 640, 700, 720, 768,
	 800, 864, 900, 960, 1000, 1024
      };

   /* Set waitcursor */
   waitcursor(iwin, TRUE, 79);

   if (*chktsiz)
      {

      if (ixulw == 0)
         { spout(" Window location set to 5 "); ixulw = 5; }
      if (iyulw == 0)
         { spout(" Window location set to 5 "); iyulw = 5; }

      if (nsamw == 0)
       { spout(" Window columns set to 32 "); nsamw = 32; }
      if (nroww == 0)
       { spout(" Window set to a square "); nroww = nsamw; }

      nsamwt = nsamw;
      nrowwt = nroww;

      if (nsamwt > 1024)
       { spout(" Window columns reduced to 1024 "); nsamwt = 1024; }
      if (nrowwt > 1024)
       { spout(" Window rows  reduced to 1024 "); nrowwt = 1024; }


      nsamok = nrowok = FALSE;
      /*--------------------------- changed by YH */
      for (i = GOODMAX-1; i >0 ; i--)
          {
          it = good[i-1];	/* floor */
	  ik = good[i];		/* ceiling */
          if (!nsamok)
             { /* check column size */
             if (it <= nsamw)	/* get the correct column size */ 
                {
		nsamwt = ( (nsamw-it)>abs(ik-nsamw)? ik : it );
		nsamok = TRUE;
		if (nsamwt != nsamw) {
		    sprintf(outstr, " *** Column size reset from %d to %d.",nsamw,nsamwt);
		    spout(outstr);
		    }
                }
	     }
          if (!nrowok)
             { /* Check row size */
             if (it <= nroww) /* Get the correct row size */
                {
		nrowwt = ( (nroww-it)>abs(ik-nroww)? ik : it );
		nrowok = TRUE;
		if (nrowwt != nroww) {
		    sprintf(outstr, " *** Row size reset from %d to %d.",nroww,nrowwt);
		    spout(outstr);
		    }
                }
             }
          if (nsamok && nrowok) {
	     nsamw = nsamwt;
	     nroww = nrowwt;
	     break ;    /* get out of loop */
	     }
          }       /****      for (i = 0; i < GOODMAX; i++)  **/
          /*---------------- changed by YH */

      if (!nrowok && !nsamok)
          { spout(" *** Spectrum sizing failed ");
            waitcursor(iwin,FALSE,79); return 1; } 

      *chktsiz = FALSE;
      }                  /* if (*chktsiz)  */

   /* Read an Z-Pixmap from window  */
   imagep  = (XImage *) NULL;

   iplanes = pow(2,8) - 1;

   /* Read an  Z-Pixmap from window  */
   imagep = (XImage *) NULL;
   if ( (imagep = XGetImage(idispl, imagsav, ixulw, iyulw,
                (unsigned int) nsamwt, (unsigned int) nrowwt,
                (unsigned long) iplanes, (int) ZPixmap) ) == (XImage *) NULL)                
        {
        spout("*** XGetImage operation Failed ");
        waitcursor(iwin,FALSE,79);
        return 2;
        }

   /* Images are padded to units of four bytes by XGetImage  */ 
   /*   see nsamwt .vs. imagep->bytes_per_line               */
   ipad = (nsamwt % 4) ? 4 - (nsamwt % 4) : 0;
                                                   
   /* Run time allocation of memory space for 8 bit image */
   if ( (bufin = (float *) malloc(nsamwt * nrowwt * sizeof(float)) ) == (float *) NULL) 
       {
       spout(" *** wid_power.c CAN'T ALLOCATE MEMORY for bufin");
       waitcursor(iwin, FALSE, 79); XDestroyImage(imagep);
       return 5;
       }

    if ((imagep->depth) == 8) 
      {
      /* Convert image data (char) to floating point for power computations */
      /* Skip the pad on each scan line                                 */
      k = 0;
      for (i = 0; i < nrowwt; i++)
         {
         for (j = 0 ; j < nsamwt; j++, k += ipad) 
            {
            bufin[i*nsamwt+j] = (float) imagep->data[k++];
            /* if (i == (nrowwt -1)) {printf(" 0buf: %d:%f \n",k, bufin[i*nsamwt+j]);} */
            }
         }

      /* find maximum and minimum of power spectrum input */
      fmint = fmaxt = bufin[0];
      for (i=1; i < nsamwt * nrowwt; i++)
          {
          fmaxt = MYMAX(fmaxt,bufin[i]);
          fmint = MYMIN(fmint,bufin[i]);
          }
       /* printf("  8input: %f ... %f \n",fmint, fmaxt); */
       }
    else 
      {
      jptr = (int *) imagep->data;
      k    = 0;
      for (i = 0; i < nrowwt; i++)   /* For each row */
         {
         for (j = 0 ; j < nsamwt; j++) /* For each column */
            {
            bufin[k++] = *jptr++; 
            /* if (i == (nrowwt -1)) {printf(" 2buf: %d:%f \n",k, bufin[k]);} */
            }
         }

      /* find maximum and minimum of power spectrum input */
      fmint = fmaxt = bufin[0];
      for (i=1; i < nsamwt * nrowwt; i++)
          {
          fmaxt = MYMAX(fmaxt,bufin[i]);
          fmint = MYMIN(fmint,bufin[i]);
          }
       /* printf("  32input: %f ... %f \n",fmint, fmaxt); */
       }

/********************** START DEBUG *** 
   printf("  iplanes: %d \n",iplanes); 
   printf("  format: %d \n",imagep->format); 
   printf("  byte_order: %d \n",imagep->byte_order); 
   printf("  depth: %d \n",imagep->depth); 
   printf("  bitmap_unit: %d \n",imagep->bitmap_unit); 
   printf("  bitmap_bit_order: %d \n",imagep->bitmap_bit_order); 
   printf("  bits_per_pixel: %d \n",imagep->bits_per_pixel); 

 i = ((nrowwt * nsamwt)/2);  
 for (j = i ; j < (i+nsamwt); j++) 
  printf("  fbuf: %d:%f\n",j,bufin[j]); 
 ****** END DEBUG **** */

   /* Free space */
   XDestroyImage(imagep);
                                                 
   /* create power spectrum */
   irtflg = power(bufin,nsamwt,nrowwt);
   if (irtflg) {waitcursor(iwin, FALSE, 79);  return 3;}

   /* find maximum and minimum of power spectrum */
   fmint = fmaxt = bufin[0];
   for (i=1; i < nsamwt * nrowwt; i++)
       {
       fmaxt = MYMAX(fmaxt,bufin[i]);
       fmint = MYMIN(fmint,bufin[i]);
       }

   /* printf(" Spectrum: %f ... %f \n",fmint, fmaxt); */

   if(fabs((double)(fmaxt - fmint)) < (double) FLTZER)
       { spout(" Blank power spectrum skipped "); 
         free(bufin); 
         waitcursor(iwin, FALSE, 79); return 4; }

   /* Display power spectrum */

   /* conversion factor from floating point to logical *1 range */
   scal = ((float)(nmax - mapgo)) / (fmaxt - fmint);
   fmsc = - fmint * scal + mapgo + 0.5;
                                                                  
   /* run time allocation of memory space for 8 bit image */
   if ( (lbuf = (char *) malloc(nsamwt * nrowwt * sizeof(char)) ) == (char *) NULL) 
      {
      spout(" *** wid_power.c CAN'T ALLOCATE  MEMORY for lbuf");
      waitcursor(iwin, FALSE, 79); free(bufin);   return 5;
      }

   if (nmax < 128)
       {
       for (i = 0; i < nsamwt * nrowwt; i++)
           { lbuf[i] =  (char) ((bufin[i] * scal) + fmsc); }
       }
   else
       {
       for (i = 0; i < nrowwt * nsamwt; i++)
           {
           b = bufin[i];
           /* convert 0..255 integers to -128..127 logical *1 */
           lbuf[i] = (((b * scal) + fmsc) < 128   ? 
                       (b * scal) + fmsc          :
                       (b * scal) + fmsc - 256.0 );
           }
       } 

#if defined(WEB_24) || defined(WEB_TRUE)
 if (DefaultDepthOfScreen(iscreen) != 8)
    {
    int i, j, k, Bpp;

    Bpp = (int) pow(2, (DefaultDepthOfScreen(iscreen) / 8) - 1);

    excbuf = calloc(nsamwt * nrowwt * Bpp, sizeof(char));
    for (i=0; i<nrowwt; i++)
       for (j=0; j<nsamwt; j++)
         for (k=0; k<Bpp; k++)
            if (k == 3)
               excbuf[((i*nsamwt) + j) * Bpp + k] = 0;
            else
               excbuf[((i*nsamwt) + j)*Bpp + k] = lbuf[(i*nsamwt) + j];

    if ( (imagep = XCreateImage(idispl,visual,
            (unsigned int) DefaultDepthOfScreen(iscreen),
            (int) ZPixmap, 0, (char *) excbuf,
            (unsigned int) nsamwt, 
            (unsigned int) nrowwt, Bpp*4, nsamwt*Bpp) ) == (XImage *) NULL)
           {
           spout("***   XCreateImage failed ");
           waitcursor(iwin, FALSE, 79);
           free(bufin); free(excbuf); free(lbuf); return 2;
           }    }  
 else
#endif
    {
    /* Create image for  the power spectrum */
    imagep = (XImage *) NULL;
    if ( (imagep = XCreateImage(idispl, visual,
                   (unsigned int) DefaultDepthOfScreen(iscreen),
                   (int) ZPixmap, 0, (char *) lbuf,
                   (unsigned int) nsamwt,
                   (unsigned int) nrowwt, 8, nsamwt) ) == (XImage *) NULL)
           {
           spout("*** XCreateImage failed ");
           waitcursor(iwin, FALSE, 79);
           free(bufin); free(lbuf); return 2;
           }
    }


   /* Put image to the screen */
   XPutImage(idispl, iwin, icontx, imagep, 0, 0, ixulw, iyulw,
             (unsigned int) nsamwt, (unsigned int) nrowwt); 

   /* Make average image permanent */
   if (perm)
       XPutImage(idispl, imagsav, icontx, imagep, 0, 0, ixulw, iyulw,
                 (unsigned int) nsamwt, (unsigned int) nrowwt); 
   neednewmap = TRUE;

   /* Make changes visible */
   XFlush(idispl);

   /* Free up memory space (Note that lbuf/or excbuf is destroyed */
   XDestroyImage(imagep);
   free(bufin); 
   if (DefaultDepthOfScreen(iscreen) != 8) free(lbuf);

   waitcursor(iwin, FALSE, 79);
 
   return 0;  
   }             
@


1.10
log
@neednewmap
@
text
@d286 1
a286 1
#ifdef WEB_24
@


1.9
log
@fmint not fmin_spi
@
text
@d34 1
a34 1
*C  int wid_power(perm,chktsiz)
d36 1
a36 1
*C  PURPOSE:   READSBACK WINDOW, STORES IN A IMAGE FILE
d38 2
a39 2
*C  PARAMETERS: PERM        PERMANENT OR TEMPORARY SPECTRUM
*C              CHKTSIZ      CHECKS SIZE OF WINDOW
d43 1
a43 1
*C  CALLS:      POWER   X-WINDOWS ROUTINES
d66 1
a66 1
   /* KLUDGE TO GET AROUND TOO MANY CONTINUATIONS */
d76 1
a76 1
   /* set waitcursor */
d120 2
a121 2
             { /* check row size */
             if (it <= nroww) /* get the correct row size */
d338 1
@


1.8
log
@reformated, 24 bit visual supported correctly
@
text
@d62 1
a62 1
   float *bufin, fmin_spi, fmax_spi, fmsc, scal, b;
d189 1
a189 1
      fmin_spi = fmax_spi = bufin[0];
d192 2
a193 2
          fmax_spi = MYMAX(fmax_spi,bufin[i]);
          fmin_spi = MYMIN(fmin_spi,bufin[i]);
d195 1
a195 1
       /* printf("  8input: %f ... %f \n",fmin_spi, fmax_spi); */
d211 1
a211 1
      fmin_spi = fmax_spi = bufin[0];
d214 2
a215 2
          fmax_spi = MYMAX(fmax_spi,bufin[i]);
          fmin_spi = MYMIN(fmin_spi,bufin[i]);
d217 1
a217 1
       /* printf("  32input: %f ... %f \n",fmin_spi, fmax_spi); */
d242 1
a242 1
   fmin_spi = fmax_spi = bufin[0];
d245 2
a246 2
       fmax_spi = MYMAX(fmax_spi,bufin[i]);
       fmin_spi = MYMIN(fmin_spi,bufin[i]);
d249 1
a249 1
   /* printf(" Spectrum: %f ... %f \n",fmin_spi, fmax_spi); */
d251 1
a251 1
   if(fabs((double)(fmax_spi - fmin_spi)) < (double) FLTZER)
d259 2
a260 2
   scal = ((float)(nmax - mapgo)) / (fmax_spi - fmin_spi);
   fmsc = - fmin_spi * scal + mapgo + 0.5;
@


1.7
log
@24 bit display bug fixed
@
text
@d52 1
d61 1
d64 2
d81 11
d94 1
d100 1
d102 1
a102 1
/*----------------------------------------------------- changed by YH */
d137 1
a137 1
/*----------------------------------------------------- changed by YH */
d147 1
a147 1
   imagep = (XImage *) NULL;
a149 3
#ifdef WEB_24
   iplanes = pow(2,16) - 1;
#endif
d154 2
a155 2
                     (unsigned int) nsamwt, (unsigned int) nrowwt,
                     (unsigned long) iplanes, (int) ZPixmap) ) == (XImage *) NULL)                
d157 1
a157 1
        spout("***  XGetImage operation Failed ");
d162 2
a163 2
   /* images are padded to units of four bytes by XGetImage  */ 
   /* see nsamwt .vs. imagep->bytes_per_line                   */
d166 1
a166 1
   /* run time allocation of memory space for 8 bit image */
d169 1
a169 1
       spout(" *** wid_power.c  CAN'T ALLOCATE SUFFICIENT MEMORY");
d174 44
a217 7
   /* convert image data (char) to floating point for power computations */
   /* skip the padding for each scan line                                 */
   k = 0;
   for (i = 0; i < nrowwt; i++)
       {
       for (j = 0 ; j < nsamwt; j++, k += ipad) 
           bufin[i*nsamwt+j] = (float) imagep->data[k++];
d220 13
a232 8
/*************
i = ((nrowwt * nsamwt)/2);  
for (j = i ; j < (i+nsamwt); j++) 
   printf("  ibuf: %d:%d\n",j,imagep->data[j]);

for (j = i ; j < (i+nsamwt); j++) 
   printf("  fbuf: %d:%f\n",j,bufin[j]);
------------- --*/
d234 1
a234 1
   /* free space */
d242 1
a242 1
   fmin_spi= fmax_spi = bufin[0];
d248 3
d256 1
a256 1
   /* display power spectrum */
d265 1
a265 1
      spout(" *** ERROR:  wid_power.c  CAN'T ALLOCATE SUFFICIENT MEMORY");
d272 1
a272 3
           {                   
           lbuf[i] =  (char) ((bufin[i] * scal) + fmsc);
           }
d286 21
a306 13
/* DEBUG ------                                       
i = ((nrowwt * nsamwt)/2); ------------------------
for (j = i ; j < (i+nsamwt); j++) 
   printf(" lbuf:%d:%d\n",j,lbuf[j]);
-------------*/
 
   /* create image for  the screen in window */
   imagep = (XImage *) NULL;
   if ( (imagep  = XCreateImage(idispl, visual,
                     (unsigned int) DefaultDepthOfScreen(iscreen),
                     (int) ZPixmap, 0, (char *) lbuf,
                     (unsigned int) nsamwt,
                     (unsigned int) nrowwt, 8, nsamwt) ) == (XImage *) NULL)
d310 15
d327 2
d330 1
a330 1
   /* put image to the screen */
d334 1
a334 1
   /* make average image permanent */
d339 1
a339 1
   /* make changes visible */
d342 1
a342 1
   /* free up memory space (note that lbuf is thus destroyed */
d345 2
d350 1
a350 1
   }              /*****    wid_power()      **/
@


1.6
log
@fmin ->fmin_spi..
@
text
@d2 7
a8 6
***************************************************************************
*  translated to wid_power.c by mahieddine ladjadj   5/24/94
*C WID_POWER.FOR  -- CREATED FEB 93
*C
*C **************************************************************************
*C *  AUTHOR: ArDean Leith                                                  *
d10 1
a10 1
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
d32 1
a32 1
*C **************************************************************************
d38 2
a39 2
*C  PARAMETERS:   PERM        PERMANENT OR TEMPORARY SPECTRUM
*C                chktsiz      checks size of window.
d41 1
a41 1
*C  CALLED BY:    powerbut_pop()
d43 1
a43 1
*C  CALLS:        POWER   X-WINDOWS ROUTINES
d45 1
a45 2
*
******************************************************************************
d47 1
d51 1
a51 2

/********************************* wid_power()   *****************************/
d54 4
a57 4
   register int j, i, k;
   char	outstr[80];
   static int nsamwt, nrowwt;
   int ik, jt, nsamok, nrowok, it, irtflg, ipad;
d59 1
a59 1
   char   *lbuf, pbuf;
d61 1
d80 1
a80 1
       { spout(" Window col. dimensions reduced to 1024 "); nsamwt = 1024; }
d82 1
a82 1
       { spout(" Window row dimensions reduced to 1024 "); nrowwt = 1024; }
d97 1
a97 1
		    sprintf(outstr, " *** column size is reset from %d to %d.",nsamw,nsamwt);
d109 1
a109 1
		    sprintf(outstr, " *** row size is reset from %d to %d.",nroww,nrowwt);
d129 9
a137 1
   /* read an 8 bit Z-Pixmap from window  */
d141 6
a146 5
                     (unsigned long) 255, (int) ZPixmap) )
                == (XImage *) NULL)                {
           spout("***  failed XGetImage operation ");
           waitcursor(iwin,FALSE,79);
           return 2;                               }
d153 6
a158 6
   if ( (bufin = (float *) malloc(nsamwt * nrowwt * sizeof(float)) ) 
               == (float *) NULL)                                   {
              spout(" *** WARNING: return from comapsav.c ");
              spout(" MALLOC() CAN'T ALLOCATE HEAP MEMORY SPACE");
              waitcursor(iwin, FALSE, 79); XDestroyImage(imagep);
              return 5;                                             }
d169 9
d193 2
a194 1
       { spout(" Blank power spectrum skipped "); free(bufin); 
d204 5
a208 5
   if ( (lbuf = (char *) malloc(nsamwt * nrowwt * sizeof(char)) ) 
              == (char *) NULL)                                     {
              spout(" *** WARNING: return from comapsav.c ");
              spout(" MALLOC() CAN'T ALLOCATE HEAP MEMORY SPACE");
              waitcursor(iwin, FALSE, 79); free(bufin);   return 5;  }
d227 7
a233 1
       }                                         
d237 1
a237 1
   if( (imagep  = XCreateImage(idispl, visual,
d241 3
a243 3
                     (unsigned int) nrowwt, 8, nsamwt) )
                == (XImage *) NULL)                          {
           spout("***  failed XCreateImage operation ");
d245 2
a246 1
           free(bufin); free(lbuf); return 2;                }
d253 1
a253 1
   if(perm)
d266 1
a266 1
   }                        /*****    wid_power()      **/
@


1.5
log
@GPL
@
text
@d60 1
a60 1
   float *bufin, fmin, fmax, fmsc, scal, b;
d167 1
a167 1
   fmin= fmax = bufin[0];
d170 2
a171 2
       fmax = MYMAX(fmax,bufin[i]);
       fmin = MYMIN(fmin,bufin[i]);
d173 1
a173 1
   if(fabs((double)(fmax - fmin)) < (double) FLTZER)
d180 2
a181 2
   scal = ((float)(nmax - mapgo)) / (fmax - fmin);
   fmsc = - fmin * scal + mapgo + 0.5;
@


1.4
log
@took out points not worked on FT
@
text
@d8 23
a30 6
*C *  COPYRIGHT (C)1993, WADSWORTH CENTER FOR LABORATORIES AND RESEARCH,    *
*C *    NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.              *
*C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
*C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
*C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
*C *    THE CENTER FOR LABORATORIES AND RESEARCH 			    *
@


1.3
log
@change fabsf(does not exists on sun sparc) to fabs
@
text
@d38 1
d45 8
a52 63
   int nmax = 127, NOGOODMAX = 714;
   int nogood[] = {
         29,  31,  37,  41,  43,  47,  53,  58,  59,  61,  62,  67
      ,  71,  73,  74,  79,  82,  83,  86,  87,  89,  93,  94,  97
      , 101, 103, 106, 107, 109, 111, 113, 116, 118, 122, 123, 124
      , 127, 129, 131, 134, 137, 139, 141, 142, 145, 146, 148, 149
      , 151, 155, 157, 158, 159, 163, 164, 166, 167, 172, 173, 174
      , 177, 178, 179, 181, 183, 185, 186, 188, 191, 193, 194, 197
      , 199, 201, 202, 203, 205, 206, 211, 212, 213, 214, 215, 217
      , 218, 219, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233
      , 235, 236, 237, 238, 239, 241, 244, 246, 247, 248, 249, 251
      , 253, 254, 255, 257, 258, 259, 261, 262, 263, 265, 266, 267 
      , 268, 269, 271, 273, 274, 277, 278, 279, 281, 282, 283, 284
      , 285, 286, 287, 290, 291, 292, 293, 295, 296, 298, 299, 301
      , 302, 303, 305, 307, 309, 310, 311, 313, 314, 316, 317, 318
      , 319, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333
      , 334, 335, 337, 339, 341, 344, 345, 346, 347, 348, 349, 353
      , 354, 355, 356, 357, 358, 359, 362, 365, 366, 367, 369, 370
      , 371, 372, 373, 374, 376, 377, 379, 381, 382, 383, 385, 386
      , 387, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401
      , 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 415, 417
      , 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431
      , 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446
      , 447, 449, 451, 452, 453, 454, 455, 457, 458, 461, 462, 463
      , 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 477, 478
      , 479, 481, 482, 483, 485, 487, 488, 489, 491, 492, 493, 494
      , 496, 497, 498, 499, 501, 502, 503, 505, 506, 508, 509, 510
      , 511, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 526
      , 527, 530, 531, 533, 534, 535, 536, 537, 538, 541, 542, 543
      , 545, 546, 547, 548, 549, 551, 553, 554, 555, 556, 557, 558
      , 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573
      , 574, 577, 579, 580, 581, 582, 583, 584, 586, 587, 589, 590
      , 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604
      , 606, 607, 609, 610, 611, 613, 614, 615, 617, 618, 619, 620
      , 622, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636
      , 638, 639, 641, 642, 643, 645, 646, 647, 649, 651, 652, 653
      , 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666
      , 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 681, 682
      , 683, 685, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697
      , 698, 699, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712
      , 713, 714, 715, 716, 717, 718, 719, 721, 723, 724, 725, 727
      , 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743
      , 744, 745, 746, 747, 749, 751, 752, 753, 754, 755, 757, 758
      , 759, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773
      , 774, 775, 776, 777, 778, 779, 781, 782, 783, 785, 786, 787
      , 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 801
      , 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814
      , 815, 817, 818, 820, 821, 822, 823, 824, 826, 827, 829, 830
      , 831, 834, 835, 837, 838, 839, 841, 842, 843, 844, 846, 848
      , 849, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862
      , 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 876, 877
      , 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 892
      , 893, 894, 895, 897, 898, 899, 901, 902, 903, 904, 905, 906
      , 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920
      , 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933
      , 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947
      , 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961
      , 962, 963, 964, 965, 966, 967, 969, 970, 971, 973, 974, 976
      , 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989
      , 991, 992, 993, 994, 995, 996, 997, 998, 999,1001,1002,1003
      ,1004,1005,1006,1007,1009,1010,1011,1012,1013,1015,1016,1017
      ,1018,1019,1020,1021,1022,1023 
     };
d67 2
a68 1
      for (i = 0; i < NOGOODMAX; i++)
d70 2
a71 1
          it = nogood[i];
d74 1
a74 1
             if (it == nsamwt)
d76 6
a81 18
                ik = it;
                for (j = i -1; j >= 0; j--)
                    {
                    jt = nogood[j];
                    if (jt < (ik - 1))
                       { /* found a lower value for column size  */
                       nsamwt = ik - 1;
                       nsamok = TRUE;
                       spout(" Window col. dimensions reduced ");
                       break ;  /* gets out of the iteration loop */
                       }
                   else
                       ik = jt;
                   }
                if (!nsamok)
                   { spout(" *** Spectrum sizing failed ");
                     waitcursor(iwin,FALSE,79); return 1;    }

d83 1
a83 4
             else if (it > nsamw)
                { nsamwt = nsamw;  nsamok = TRUE;   }
             }

d86 1
a86 1
             if (it == nrowwt)
d88 6
a93 18
                ik = it;
                for (j = i-1; j >= 0; j--)
                    {
                    jt = nogood[j];
                    if (jt < (ik - 1))
                       { /* found a lower value for row  size  */
                       nrowwt = ik - 1;
                       nrowok = TRUE;
                       spout(" Window row dimensions reduced ");
                       break ;  /* gets out of iteration loop */
                       }
                    else
                       ik = jt;
                    }
                if (!nrowok)
                   { spout(" *** Spectrum sizing failed ");
                     waitcursor(iwin,FALSE,79); return 1; } 

a94 2
             else if (it > nroww)
                { nrowwt = nroww;  nrowok = TRUE;   }
d96 11
a106 2
          if (nsamok && nrowok)  break ;    /* get out of loop */
          }       /****      for (i = 0; i < NOGOODMAX; i++)  **/
@


1.2
log
@better change abs() to fabsf()
@
text
@d228 1
a228 1
   if(fabsf(fmax - fmin) < FLTZER)
@


1.1
log
@Initial revision
@
text
@d228 1
a228 1
   if(abs(fmax - fmin) < FLTZER)
@
