head	1.16;
access;
symbols
	pre-tilt-improve:1.15
	pre_surf_fromtop:1.15
	pre_neednewmap:1.14
	pre_apppluss_remove:1.14
	pre_tiltpair_chng:1.14
	pre_GPL:1.11;
locks;
comment	@ * @;


1.16
date	2018.12.07.17.03.32;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.21.13.33.37;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.06.10.14.08.51;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.05.12.05.27;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.18.16.59.56;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	96.04.01.17.25.32;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	95.05.05.20.12.45;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	95.02.02.16.39.48;	author liy;	state Exp;
branches;
next	1.8;

1.8
date	95.01.26.20.16.38;	author liy;	state Exp;
branches;
next	1.7;

1.7
date	95.01.23.10.22.04;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	94.07.28.09.53.46;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	94.07.19.12.34.19;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	94.05.24.17.54.33;	author odesanya;	state Exp;
branches;
next	1.3;

1.3
date	94.05.23.16.36.52;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.23.16.32.17;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.10.10.11.49;	author leith;	state Exp;
branches;
next	;


desc
@@


1.16
log
@bollingers_email_and_cosmetic
@
text
@
/*$Header: web/src/RCS/maskmen.c,v 1.15 2011/09/21 13:33:37 leith Exp $*/
/*
 C+*********************************************************************
 C
 C WID_MASKMEN.FOR -- CREATED MAY 91
 C maskmen.c                                                   DEC 92
 C
 C *********************************************************************
 C=* AUTHOR:  ArDean Leith                                             *
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2018  Health Research Inc.                     *
 C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.     *
 C=* Email: spider@@health.ny.gov                                       *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* with this program. If not, see <http://www.gnu.org/licenses>      *
 C=*                                                                   *
 C *********************************************************************
 C
 C maskmen
 C
 C PARAMETERS:  none    
 C
 C--*******************************************************************
*/

#include <Xm/ToggleBG.h>
#include <Xm/SelectioB.h>
#include "common.h"
#include "routines.h"
#include "mask.h"

 /* Internal function prototypes */
 static void   maskmen_butcl  (Widget, XtPointer, XtPointer);
 static void   maskmen_buts   (Widget, XtPointer, XtPointer);
 static void   maskmen_butshf (Widget, XtPointer, XtPointer);
 static void   maskmen_butn   (Widget, XtPointer, XtPointer);
 static void   maskmen1       (Widget, XtPointer, XtPointer);
 static void   maskmen1_buta  (Widget, XtPointer, XtPointer);
 static void   maskread       (char *, Pixmap, int, int, unsigned long);
  
 /* External common variables used here */

 /* File variables */
 static Widget   iw_maskmen  = 0;
 Widget          iw_maskmen1 = 0;
 char            masknam[81] = "\0";  

 // -------------------------   maskmen   --------------------------------------

 void maskmen(void)

 {
 Widget  iw_rowcolv, iw_pushs, iw_pushc, iw_pusha; 

 if (iw_maskmen == (Widget)0)
    {   /* Create masking menu first */

    iw_maskmen = wid_dialog(iw_win, 0, "Masking menu", -1, -1);

    iw_rowcolv = wid_rowcol(iw_maskmen, 'v', -1, -1);

                 wid_toggleg(iw_rowcolv,0,"Fill inside",filler,
                        toggle2_cb, &filler, -1,-1);

                 wid_pushg(iw_rowcolv, 0, "Shift the image",
                           maskmen_butshf, NULL, -1,-1);

                 wid_pushg(iw_rowcolv, 0, "Clear mask",
                     maskmen_butcl, (XtPointer) iw_maskmen, -1,-1);

                 wid_pushg(iw_rowcolv, 0, "Save mask",
                     maskmen1, NULL, -1,-1);

                 wid_pushg(iw_rowcolv, 0, "Next input image",
                     maskmen_butn, NULL, -1,-1);

    /* Create box for apply  */
    wid_stdbut(iw_rowcolv, iw_maskmen, 
               &iw_pushs, &iw_pushc, &iw_pusha, "SC",
               maskmen_buts, fin_cb, fin_cb, NULL);
 
    }
 XtManageChild(iw_maskmen);

 }

// -------------------   maskmen_butshf ------------ Shift button callback  

 void maskmen_butshf(Widget iw_temp, XtPointer data, XtPointer call_data)
 {
 // Cancel current masking buttons 
 XtUninstallTranslations(iw_win);

 // Remove the mask menu widget 
 XtUnmanageChild(iw_maskmen);

 XFlush(idispl);

 // Check translations setting in shift 
 shift(MASK);
 
 // printf(" drawing after shift \n");

 // Draw empty polygons on the backing store  
 mask_draw_polys(imagsav,    icontx, TRUE, FALSE);

 // printf(" shifted poly draw finished \n");

 //  Refresh screen  */
 expos_cb(NULL,NULL,NULL);
 }

// ------------------  maskmen_butcl ------------------- Clear masks callback 

 void maskmen_butcl(Widget iw_temp, XtPointer data, XtPointer call_data)

 {
 int    ixs, iys;

 // Erase masks by redrawing image from the Ximage stuff  

 // Find current location of the image 
 ixs = ixul - ixullmin;
 iys = iyul - iyullmin;

 // Redraw the image (without mask on it) 
 XPutImage(idispl,imagsav,icontx, imagel, nsam1,nrow1,
           ixul,iyul, nsam-ixs, nrow-iys);

 XPutImage(idispl,iwin   ,icontx, imagel, nsam1,nrow1,
          ixul,iyul, nsam-ixs, nrow-iys);

 neednewmap = TRUE;

 // Zero mask indices, etc.
 mask_reset();

 //  Remove menu */
 XtUnmanageChild((Widget) data);

 //  Refresh screen  */
 expos_cb(NULL,NULL,NULL);
 }


// ----------------- maskmen_buts -------------------- Stop button callback 

 void maskmen_buts(Widget iw_temp, XtPointer data, XtPointer call_data)
 {

 /* Add a trap here to be sure user wants to stop without storing */
 /******* !!!!!!! *****/

 /*  Remove message */
 showbutx("","","",TRUE);

 /*  Remove the menu widget */
 XtUnmanageChild(iw_maskmen);

 /*  Cancel menu,  stop masking mouse button assignments */
 XtUninstallTranslations(iw_win);

 /* Reset to current foreground color */
 wicolor(icontx,icolor);

 XFreePixmap(idispl,masksav);
 masksav = (Pixmap) NULL;
 //printf(" null in stop masksav: %d \n",masksav);
 }


// ---------------  maskmen_butn ---------------------- Next image callback 

 void maskmen_butn(Widget iw_temp, XtPointer data, XtPointer call_data)
 {
 int          nlet, numfili;

 /* Put in a trap here to be sure user wants to stop without storing */
 /******* !!!!!!! *****/

 /* Remove menu */
 XtUnmanageChild(iw_maskmen);

 /* Remove button assignment message */
 showbutx("","","",TRUE);             

 /* Refresh screen  */
 expos_cb(NULL,NULL,NULL);

 if (masksav != ((Pixmap) NULL)) XFreePixmap(idispl,masksav);
 masksav = (Pixmap) NULL;
 // printf(" null masksav in next image: %d \n",masksav);

 // Zero mask indices, etc. to start new mask
 mask_reset();

 /* Increment input image file name */
 filinc(filnow,filnext,&nlet,&numfili);

 /* Ask for next filename to be masked */
 imagemen(NULL,"6",NULL);  
 }

// ----------------  maskmen1 --------------------  Save mask button callback 

 void maskmen1(Widget iw_temp, XtPointer data, XtPointer call_data)
 {

 /* Create mask file name text input widget */
 iw_maskmen1 = wid_text(iw_win, iw_maskmen1, "Mask file", &masknam[0],
                        *maskmen1_buta, NULL, ixul+nsam, iyul+nrow);

 XtManageChild(iw_maskmen1);
 }


// -------------------  maskmen1_buta ---------- Mask filename accept callback 

 void maskmen1_buta(Widget iw_temp, XtPointer data, XtPointer call_data)
 {
 int                            nlet,numfild;
 XmSelectionBoxCallbackStruct * cbs;
 char *                         string = NULL;
 unsigned long                  ipmask ;
 int                            iwintyp = 3;

 cbs    = (XmSelectionBoxCallbackStruct *) call_data;
 string = extractstr(cbs -> value);
 strcpy(masknam,string);
 if (string) XtFree(string);

 if (masknam[0] == '\0') 
    {   /*  This program requires an image file name */
    spout("*** You must enter a mask file name now!");
    return;
    }

 // Remove options menu 
 XtUnmanageChild(iw_maskmen);

 //  Remove mask file-name menu 
 XtUnmanageChild(iw_maskmen1);

 // Draw filled polygons on mask image with no shift offset 
 mask_draw_polys(masksav, icontxmask, FALSE, TRUE);

 // Store mask image in mask image file 
 ipmask  = -1;
 maskread(masknam, masksav, nsam, nrow, ipmask);
 
 // Increment mask image file name 
 filinc(masknam, masknam, &nlet, &numfild);

 // Zero mask indices, etc. to start new mask
 mask_reset();
 }


 // ----------------------  maskread   --------------------------------


 void maskread(char * winnamt, Pixmap mask, int nsamt, int nrowt,
               unsigned long ipmask)
 {
 float          *buf;
 FILEDATA       *filedatat = NULL;
 int            i, j, k, ipad, itemp, bpl, byord;
 unsigned char  cit;
 XImage         *imagerec = NULL;
 char           outstr[81];

/* Add datexc to winnam if not already there */
 if (strstr(winnamt,datexc) == 0)
    { strcat(winnamt,".");    strcat(winnamt,datexc);  }

 /* Open new output file for window */
 filedatat = opennew(winnamt, nsamt, nrowt, 1, 1, "u");
 if (filedatat == (FILEDATA *) NULL) return;

 /* Set wait cursor */
 waitcursor(iwin, TRUE, 79);

 //printf(" maskread recording masksav: %d Size: %d %d Planes: %#x \n",
 //         masksav,nsamt,nrowt,ipmask);
 
 imagerec = XGetImage(idispl, mask, 0,0, nsamt,nrowt,ipmask, XYPixmap);
 if (imagerec == (XImage *) NULL) 
    { spout("*** Mask image formation failed");  return; }

 /* X images are padded to units of four bytes */
 ipad = nsamt % 4;
 if (ipad > 0) ipad = 4 - ipad;

 /* Use default read / write buffer from filedatat */
 buf = filedatat -> buf;

 /* Convert single bit image to spider format */
 byord        = imagerec -> byte_order;
 bpl          = imagerec -> bytes_per_line;

 //int wt     = imagerec -> width;
 //int ht     = imagerec -> height;
 //int tdepth = imagerec -> depth;
 //int bu     = imagerec -> bitmap_unit;
 //printf("  byord: %d depth:%d bpl:%d, w: %d h: %d  bu: %d\n",
 //          byord,   tdepth,   bpl,    wt,  ht,     bu);

 int   jt, jexp;
 float vback = 0;
 float vmask = 1;
 if (!filler)
    {vback = 1; vmask = 0;}

 if (byord == 0)
    { 
    for (i=1; i <= nrowt; i++)
       {
       itemp = (i-1) * bpl;

       for (j=0; j < nsamt; j+=8)
          {
          /* Recover the relevant character of line every 8 cols */
          cit = imagerec -> data[itemp++];

          if (cit == 0) 
             {  // All background can set all to background
             for (jt = j; jt < (j + 8) && jt < nsamt; jt++)
                 { buf[jt] = vback;}
             continue;
             }           

          jt   = j ;
          jexp = 1 ;

          for (jt = j; jt < (j + 8) && jt < nsamt; jt++)
             {if ((cit & jexp) > 0) 
                { buf[jt] = vmask ; }
              else
                { buf[jt] = vback ; }
             jexp = jexp * 2;
             }
       } // End of: for (j=

       // Save data to file                                  
       wrtlin(filedatat, buf, nsamt, i);

       }  // End of: for (i=0; 
    }     // End of: if (byord == 0)

 else
    {
    // byte order
    for (i=1; i <= nrowt; i++)
       {
       itemp = (i-1) * bpl;

       for (j=0; j < nsamt; j+=8)
          {
          /* Recover the relevant character of line every 8 cols */
          cit = imagerec -> data[itemp++];

          if (cit == 0) 
             {  // All background
             for (jt = j; jt < (j + 8) && jt < nsamt; jt++)
                 { buf[jt] = vback;}
             continue;
             }           

          jt   = j ;
          jexp = 128 ;

          for (jt = j; jt < (j + 8) && jt < nsamt; jt++)
             {if ((cit & jexp) > 0) 
                { buf[jt] = vmask ; }
              else
                { buf[jt] = vback ; }
             jexp = jexp / 2;
             }
       } // End of: for (j=

       // Save data to file                                  
       wrtlin(filedatat, buf, nsamt, i);

       }  // End of: for (i=0; 
    }     // End of: if (byord == 0)

 sprintf(outstr,"Mask recorded:  %d x %d  \n",nsamt,nrowt);
 spout(outstr);

 closefile(filedatat); filedatat = NULL;

 /* Free image memory.  This deallocates image buffer also */
 XDestroyImage(imagerec);

 /* Reset wait cursor */
 waitcursor(iwin, FALSE, 79);
 }









@


1.15
log
@neednewmap
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/maskmen.c,v 1.14 2011/06/10 14:08:51 leith Exp leith $*/
d4 6
a9 6
C+**********************************************************************
C
C WID_MASKMEN.FOR -- CREATED MAY 91
C maskmen.c                  DEC 92
C
C **********************************************************************
d12 3
a14 6
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
d23 1
a23 1
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
d27 1
a27 3
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
d29 7
a35 7
C **********************************************************************
C
C MASKMEN
C
C PARAMETERS:  none    
C
C--*********************************************************************
d38 2
d42 1
a42 2
#include <Xm/ToggleBG.h>
#include <Xm/SelectioB.h>
d45 7
a51 9
 void          maskmen_butcl  (Widget, XtPointer, XtPointer);
 void          maskmen_buts   (Widget, XtPointer, XtPointer);
 void          maskmen_butshf (Widget, XtPointer, XtPointer);
 void          maskmen_butn   (Widget, XtPointer, XtPointer);
 void          maskmen1       (Widget, XtPointer, XtPointer);
 void          maskmen1_buta  (Widget, XtPointer, XtPointer);
 void          maskread       (char *, Pixmap, int, int, unsigned long);
 void          mask_draw_polys(Pixmap, GC, int, int);
 void          mask_reset     ();
a53 4
 extern int      filler;
 extern char     outstr[80];
 extern GC       icontxmask;       // Mask GC 
 extern Pixmap   masksav;          // Mask store 
d75 1
a75 1
                        toggle2_cb, (void *) &filler, -1,-1);
d99 1
a99 1
// -------------------   maskmen_butshf -------------- Shift button callback  
d282 1
@


1.14
log
@removed planeforcolor
@
text
@d2 1
a2 1
/*$Header: /usr8/web/new/RCS/maskmen.c,v 1.13 2011/05/05 12:05:27 leith Exp leith $*/
d154 2
@


1.13
log
@-cmap_changes_etc
@
text
@d2 1
a2 1
/*$Header:  $*/
a425 50
// -----------------  planeforcolor ------- Finds planemask for spider color 

 unsigned long planeforcolor(int icolort)
 {
 
 unsigned long                   icolorxt, ipmask, it;
 
 icolorxt = ispicol[icolort];

 it = icolorxt >> 16;
 if (it != 0) 
    {
    ipmask = 0X800000;
//    printf(" 16 icolor: %d,  icolorx:  %#8x  it: %#x, mask: %#8x \n",
//          icolort, icolorxt, it, ipmask);
    return ipmask;
    }

 it = icolorxt >> 8;
 if (it != 0) 
    {
    ipmask = 0X008000;
//    printf(" 08 icolor: %d,  icolorx:  %#8x  it: %#x, mask: %#8x \n",
//          icolort, icolorxt, it, ipmask);
    return ipmask;
    }

 it     = icolorxt;
 if (it != 0) 
    {
    ipmask = 0X000080;
//    printf(" 00 icolor: %d,  icolorx:  %#8x  it: %#x, mask: %#8x \n",
//          icolort, icolorxt, it, ipmask);
          return ipmask;
    }
    
ipmask = 0X1;
//printf(" -1 icolor: %d,  icolorx:  %#8x  it: %#x, mask: %#8x \n",
//          icolort, icolorxt, it, ipmask);
return ipmask;

 }

//  128 129 130 131  132 133 134 135
//  BLA BLU GRE CYA  RED MAG YEL WHI 
// ispicol(124..127) : 0x7c7c7c  0x7d7d7d   0x7e7e7e   0x7f7f7f
//                          BLA       BLU        GRE        CYA    
// ispicol(128..131) :        0      0xff     0xff00     0xffff
//                     RED            MAG        YEL        WHI 
// ispicol(132..135) : 0xff0000  0xff00ff   0xffff00   0xffffff
@


1.12
log
@GPL
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/maskmen.c,v 1.11 1996/04/01 17:25:32 leith Exp $*/
d4 1
a4 1
C+**************************************************************************
d10 1
a10 1
C    AUTHOR:  ArDean Leith                                                 *
d38 1
a38 1
C PARAMETERS:    
d40 1
a40 1
C--*************************************************************************
d48 1
a48 1
 /* internal function prototypes */
d51 1
d55 14
a68 10
 
 /* external common variables */
 extern int iwintyp;               /* winread uses this */
 extern int filler;
 extern GC  icontxx;

 /* internal common variables */
 static Widget        iw_maskmen = 0;
 Widget               iw_maskmen1 = 0;
 char                 masknam[81] = "\0";  
d70 1
a70 1
 /********************   maskmen   ****************************/
d78 1
a78 1
    {   /* create masking menu first */
d87 3
d93 1
a93 1
                 wid_pushg(iw_rowcolv, 0, "Save masks",
d99 1
a99 1
    /* create box for apply  */
d106 1
d109 27
a135 1
/***********  maskmen_butcl ----- clear masks callback ************/
d140 7
a146 2
 /*  blank masks but not image, by clearing overlay planes */
 clearover(NULL,NULL,NULL);
d148 11
a158 1
 /*  remove menu */
d160 3
d165 2
a166 1
/*********** maskmen_buts ----- stop button callback ***************/
d171 1
a171 1
 /* put in a trap here to be sure user wants to stop without storing */
d174 1
a174 4
 /*  enable all planes for drawing (in case it was not set by error)*/
 wisetplanes(idispl, icontx, -1);

 /*  remove message */
d177 1
a177 1
 /*  remove the menu widget */
d180 1
a180 1
 /*  cancel menu,  stop masking mouse button assignments */
d183 6
a188 2
 /*  restore default lut */
 setamap(map);
d192 1
a192 1
/***********  maskmen_butn -------next image callback *************/
d198 1
a198 1
 /* put in a trap here to be sure user wants to stop without storing */
d201 1
a201 4
 /*  enable all planes for drawing */
 wisetplanes(idispl,icontx,-1);

 /*  remove menu */
d204 1
a204 1
 /*  remove button assignment message */
d207 1
a207 1
 /* refresh screen  */
d210 3
a212 2
 /* increment input image file name */
 filinc(filnow,filnext,&nlet,&numfili);
d214 2
a215 2
 /*  restore default lut */
 setamap(map);
d217 2
a218 2
 /* get rid of xor graphics context */
 XFreeGC(idispl,icontxx);
d220 1
a220 1
 /* ask for next filename to be masked */
d224 1
a224 1
/***********  maskmen1 -----  save masks button callback ***********/
d229 1
a229 1
 /* create mask file name text input widget */
d237 1
a237 1
/***********  maskmen1_buta --- filename accept callback **********/
d241 5
a245 3
 int                             nlet,numfild;
 XmSelectionBoxCallbackStruct *  cbs;
 char *                          string = NULL;
d247 1
a247 1
 cbs = (XmSelectionBoxCallbackStruct *) call_data;
d253 1
a253 2
    {
    /*  this program requires an iamge file name */
d258 1
a258 1
 /*  remove options menu */
d261 1
a261 1
 /*  remove mask file-name menu */
d264 2
a265 7
 /* store mask image in mask image file */
 iwintyp = 3;
 nsamw   = nsam;
 nroww   = nrow;
 ixulw   = ixul;
 iyulw   = iyul;
 winread1(masknam, FALSE, 128);
d267 5
a271 1
 /* increment mask file name */
d274 2
d277 199
@


1.11
log
@xtpointer, iw_maskmen=0, statics, stringfree
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/maskmen.c,v 1.10 1995/05/05 20:12:45 leith Exp leith $*/
d9 1
a9 1
C **************************************************************************
d11 24
a34 7
C *  COPYRIGHT (C)1991, WADSWORTH CENTER FOR LABORATORIES AND              *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
@


1.10
log
@changed togglecb
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/maskmen.c,v 1.9 1995/02/02 16:39:48 liy Exp leith $*/
d10 2
a11 2
C    AUTHOR:  ArDean Leith
C *  COPYRIGHT (C)1991, WADSWORTH CENTER FOR LABORATORIES AND             *
d23 1
a23 1
C--*********************************************************************
d32 5
a36 5
 void          maskmen_butcl  (Widget, caddr_t, caddr_t);
 void          maskmen_buts   (Widget, caddr_t, caddr_t);
 void          maskmen_butn   (Widget, caddr_t, caddr_t);
 void          maskmen1       (Widget, caddr_t, caddr_t);
 void          maskmen1_buta  (Widget, caddr_t, caddr_t);
d44 3
a46 2
 Widget        iw_maskmen, iw_filler, iw_maskmen1 = 0, iw_mask;
 char          masknam[81] = "\0";  
d53 1
a53 2
 Widget  iw_rowcolv, iw_pushs, iw_pushc, iw_pusha, iw_dums; 
 Widget  iw_clear, iw_save, iw_next;
d55 1
a55 1
 if (iw_maskmen <= (Widget)0)
d62 1
a62 1
    iw_filler  = wid_toggleg(iw_rowcolv,0,"Fill inside",filler,
d65 2
a66 2
    iw_clear   = wid_pushg(iw_rowcolv, 0, "Clear mask",
                     maskmen_butcl, (caddr_t) iw_maskmen, -1,-1);
d68 1
a68 1
    iw_save    = wid_pushg(iw_rowcolv, 0, "Save masks",
d71 1
a71 1
    iw_next    = wid_pushg(iw_rowcolv, 0, "Next input image",
d75 3
a77 3
    iw_dums   = wid_stdbut(iw_rowcolv, iw_maskmen, 
                         &iw_pushs, &iw_pushc, &iw_pusha, "SC",
                        maskmen_buts, fin_cb, fin_cb, NULL);
d85 1
a85 1
 void maskmen_butcl(Widget iw_temp, caddr_t data, caddr_t call_data)
d97 1
a97 1
 void maskmen_buts(Widget iw_temp, caddr_t data, caddr_t call_data)
d122 1
a122 1
 void maskmen_butn(Widget iw_temp, caddr_t data, caddr_t call_data)
d156 1
a156 1
 void maskmen1(Widget iw_temp, caddr_t data, caddr_t call_data)
d169 1
a169 1
 void maskmen1_buta(Widget iw_temp, caddr_t data, caddr_t call_data)
d173 1
d176 3
a178 1
 strcpy(masknam,extractstr(cbs -> value));
@


1.9
log
@modified (int)Widget again to keep web run on all machines
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/maskmen.c,v 1.8 1995/01/26 20:16:38 liy Exp liy $*/
a30 1

a31 1
 void          toggle_cb      (Widget, caddr_t, caddr_t);
d63 1
a63 1
                        toggle_cb, (caddr_t) &filler, -1,-1);
@


1.8
log
@modified (int)widget for Onyx
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/maskmen.c,v 1.7 1995/01/23 10:22:04 leith Exp liy $*/
d57 1
a57 1
 if (iw_maskmen <= (void *)0)
@


1.7
log
@ shortened name of extractstring to extractstr
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/maskmen.c,v 1.6 94/07/28 09:53:46 leith Exp Locker: leith $*/
d57 1
a57 1
 if ((int)iw_maskmen <= 0)
@


1.6
log
@used routines.h
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/maskmen.c,v 1.5 94/07/19 12:34:19 leith Exp Locker: leith $*/
d177 1
a177 1
 strcpy(masknam,extractstring(cbs -> value));
@


1.5
log
@?
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/maskmen.c,v 1.4 94/05/24 17:54:33 odesanya Exp Locker: leith $*/
d27 1
a30 23
 /* function prototypes */
 extern Widget wid_text     (Widget, Widget, char *, char *, 
                             void (*)(), caddr_t, int, int);
 extern Widget wid_pushg    (Widget, Widget, char *, void (*) (), 
                             char *,int,int);
 extern Widget wid_rowcol   (Widget, char , int, int);
 extern Widget wid_toggleg  (Widget, Widget, char *, int, void (*)(),
                                char *, int, int);
 extern Widget wid_dialog   (Widget, Widget, char *, int, int);
 extern Widget wid_stdbut   (Widget, Widget, Widget*, Widget*, Widget*, 
                             char *, void (*)(), void (*)(), void (*)(),
                             void (*)());
 extern void   showbutx     (char *, char *, char *, int);
 extern void   expos_cb     (Widget, caddr_t, caddr_t);
 extern int    wisetplanes  (Display *, GC, int);
 extern void   clearover    (Widget, caddr_t, caddr_t);
 extern void   setamap      (Colormap);
 extern int    filinc       (char *, char *, int *, int *);
 void          winread1     (char *, int, int);
 extern void   spout        (char *);
 extern void   imagemen     (Widget, caddr_t, caddr_t);
 extern void   fin_cb       (Widget, caddr_t, caddr_t);
 extern char*  extractstring(XmString);
a32 1

@


1.4
log
@fixed bad GC error msg on next image selection
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web/RCS/maskmen.c,v 1.1 93/11/10 10:11:49 leith Exp $*/
d117 1
a117 1
 XtUnmanageChild(data);
@


1.3
log
@cast data to widget in unmange statement
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/maskmen.c,v 1.2 1994/05/23 16:32:17 leith Exp leith $*/
d117 1
a117 1
 XtUnmanageChild((Widget) data);
@


1.2
log
@gc bug fixed
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web/RCS/maskmen.c,v 1.1 93/11/10 10:11:49 leith Exp $*/
d117 1
a117 1
 XtUnmanageChild(data);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*$Header$*/
d161 1
a161 1
 showbutx("","","",TRUE);
d176 1
a176 1
 imagemen(NULL,"1",NULL);  
@
