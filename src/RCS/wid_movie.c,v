head	1.8;
access;
symbols
	pre-tilt-improve:1.7
	pre_surf_fromtop:1.7
	pre_neednewmap:1.5
	pre_apppluss_remove:1.5
	pre_tiltpair_chng:1.5
	pre_GPL:1.5;
locks;
comment	@ * @;


1.8
date	2018.12.07.17.03.35;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.27.17.34.37;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.21.13.49.16;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	96.09.04.13.17.43;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	96.02.08.21.39.36;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.07.28.20.45.03;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	95.07.28.20.38.13;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	95.03.30.17.05.55;	author mladjadj;	state Exp;
branches;
next	;


desc
@command movie
@


1.8
log
@bollingers_email_and_cosmetic
@
text
@
/***********************************************************************
 * wid_movie.for  Created               feb 93                         *
 *                Ported to: c          7/14/94 Mahieddine Ladjadj     *
 *
 C *********************************************************************
 C * AUTHOR: ArDean Leith                                              *
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2018  Health Research Inc.                     *
 C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.     *
 C=* Email: spider@@health.ny.gov                                       *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* with this program. If not, see <http://www.gnu.org/licenses>      *
 C=*                                                                   *
 ***********************************************************************
 *
 * PURPOSE:     
 * 
 * PARAMETERS:	 
 *
 ***********************************************************************
*/

#include "common.h"
#include "routines.h"
#include "mont.h"
#include "movie.h"

static void  movie_pop      (Widget, XEvent *, String *, Cardinal *);
static void  movie_doit     (Widget, XtIntervalId *);
static void  wid_movierun   (void);

int         ixulm, iyulm, iskipm, ixoffm, iyoffm, ixulmm, iyulmm; 
int	    icycles, movierun, nisams, nirows, checkmag, cyclnbr;


XtIntervalId  intval; 

/*************************  wid_movie  ********************************/
void wid_movie(void)
  {
  if (setupbuttons)
     {
     showbutx("Step thru movie.",
              "Menu/(start movie).",
              "Stop movie.",FALSE);

     actions(iw_win,"movie_pop",movie_pop,"M123");
     setupbuttons = FALSE;
     }

  XFlush(idispl);

  /* Find display location */
  ixulmm = (iwidex - ixoffm) / 2;
  iyulmm = (ihighx - iyoffm) / 2;

  /* Total number of frames for a continous movie */
  if (twoway)
      cyclnbr = moviecycl * ndone * 2 - 1 ;
  else
      cyclnbr = moviecycl * ndone ;
  
  /* Start movie running  */
  checkmag = TRUE;   movierun = TRUE;   movie_step = FALSE;
  wid_movierun();
  }

/**********************************  wid_movierun  *******************/
void wid_movierun(void)
   {
   
   /* names_height is the number of pixel needed to write filename
          under image, defined in imoptmen.c */
	  
   int    imcol, imrow, idelay, ixnn,iynn;
   char   outstr[10]="Frame:   ";
   int    nlft;
   int    old_magx, old_magy, old_mfac, x11, y11;

   if (iskip >= -1 && iskip <= 1)
      { /* Display image full-sized  */
      iskip = 1;
      nisams = (nsam2 - nsam1 + 1) ; nirows = (nrow2 - nrow1 + 1) ;
      }
   else if (iskip > 1)
      { /* Shrink image by factor of iskip */
      nisams = 1 + (nsam2 - nsam1)/iskip; nirows = 1 + (nrow2 - nrow1)/iskip;
      }
   else if (iskip < 1) 
      {  /* Magnify image by factor of iskip */
      nisams = (nsam2-nsam1+1)*(-iskip); nirows = (nrow2-nrow1+1)*(-iskip);
      }

   /* Find correct subimage location, ndone : total number of images */
   if (!twoway)
      {
      imno++;
      if (imno > ndone || imno <= 1)
         {
         imno   = 1; 
         ixulmv = ixulmon; iyulmv = iyulmon;
	 }
      else
         { /* find the location */  
         ixulmv = ixulmon + ((imno -1) % nprow ) * (nisams + marx);
         iyulmv = iyulmon + ( (imno -1) / nprow ) * (nirows + mary ) ; 
	 }

      if( !(imno % nprow ))
          iyulmv += (( imno / nprow ) - 1 ) * names_height ;
      else
	  iyulmv += ( imno / nprow ) * names_height ;
      }
   else if (twoway && forward)
      {
      imno++;
      if (imno > ndone) 
         {
         imno    = ndone - 1; forward = FALSE;
         ixulmv = ixulmon + ((imno -1) % nprow ) * (nisams + marx);
         iyulmv = iyulmon + ( (imno -1) / nprow ) * (nirows + mary ) ;

         if( !(imno % nprow ))
	      iyulmv += (( imno / nprow ) - 1 ) * names_height ;
         else
	      iyulmv += ( imno / nprow ) * names_height ;
	 
         imno--; 
         }            
      else
         { /* Find the location */  
         ixulmv = ixulmon + ((imno -1) % nprow ) * (nisams + marx);
         iyulmv = iyulmon + ( (imno -1) / nprow ) * (nirows + mary ) ;
 
         if( !(imno % nprow ))
              iyulmv += (( imno / nprow ) - 1 ) * names_height ;
         else
	      iyulmv += ( imno / nprow ) * names_height ; 
	 }
                          
      }
   else if (twoway)
      {
      imno--;
      if (imno < 0) 
          {
          imno    = 1;  forward = TRUE;
          ixulmv = ixulmon; iyulmv = iyulmon;
          }           
      else
         { /* find the location */  
         ixulmv = ixulmon + ((imno -1) % nprow ) * (nisams + marx);
         iyulmv = iyulmon + ( (imno -1) / nprow ) * (nirows + mary ) ;
         if( !(imno % nprow ))
              iyulmv += (( imno / nprow ) - 1 ) * names_height ;
         else
	      iyulmv += ( imno / nprow ) * names_height ; 
	 }
      }
      
  
   /* Copy window to center of screen */
   if(moviemagni <= 1)
      { /* no magnification, just copy */
      XCopyArea(idispl,imagsav,iwin,icontx,ixulmv,iyulmv,
                       nisams,nirows+names_height,ixulmm,iyulmm);
      neednewmap = TRUE;

/* this is temp . replace it back */
/*                       nisams,nirows,ixulmm,iyulmm);
*/
      }
   else
      { /* new magnify on the fly                        */
      /* could save this somewhere else                  */
      /* preserve the OLD image size and magnification   */
      old_magx = magsizx; old_magy = magsizy; old_mfac = magfac;
      magsizx = nisams; magsizy = nirows; magfac = moviemagni;

      /* Compute new position for movie image */
      if(checkmag)
         {
         checkmag = FALSE;
         ixulmm -= magsizx * magfac / 2;
         iyulmm -= magsizy * magfac / 2;
         }

      glass(imagsav, iwin, ixulmv, iyulmv, FALSE, FALSE,
            &ixulmm,&iyulmm,FALSE);
      neednewmap = TRUE;

      /* Put back values of image size and magnification */
      magsizx = old_magx; magsizy = old_magy; magfac = old_mfac;
      }

   XFlush(idispl);

   if(forward)
       { sprintf(&outstr[7],"%2d", imno); spout(outstr); }
   else
       { sprintf(&outstr[7],"%2d", (imno + 1)); spout(outstr); }

   /* Stop if this is single frame stepping */
   if(!movie_step) 
       {
       intval = XtAppAddTimeOut(XtWidgetToApplicationContext(iw_win),
                       (unsigned long) moviedelay, 
                       (XtTimerCallbackProc) movie_doit,
		       (XtPointer) NULL);
       }
   } /* wid_movierun(void) */


/* ******************* movie_doit ************************************/

void movie_doit(Widget w, XtIntervalId *id)
     {
     int doit;
     
     /* Strangely enough some extra timeout seem to occur. execute
        this routine only if it is caused by moviemen timeout */

     if(*id != intval) 
	doit=0;
     else
        doit=1;

     if  (movierun)
         {
         if (moviemenu)
            {	
            moviemenu = FALSE;
            moviemen(FALSE);  			/* movie menu   */
            }
         else
	    {
	    cyclnbr--;
            if(!cyclnbr) {cyclnbr = moviecycl * ndone; movie_step = TRUE; }
            if(doit) wid_movierun();            /* Continue run */
	    }
	 }
     else 				        /* Stop movie   */
         moviemen_buts(NULL,NULL,NULL);
	 
     }

/* ******************* movie_pop **************************************/

void movie_pop(Widget iw_t, XEvent *event, String *params,
                   Cardinal *num_params)
  {                        
  if (!(strcmp(*params,"1")))                 /* Button 1 pushed */
     {                         /* restart movie  ------- Restart */
     movie_step = TRUE;   wid_movierun(); 
     }
  else if (!(strcmp(*params,"2")))            /* Button 2 pushed */
     {                        /* menu callup   ------------ Menu */
     moviemenu = TRUE;
     if (movie_step)
        {   movie_step = FALSE;   wid_movierun();  }		
     }
  else if (!(strcmp(*params,"3")))            /* Button 3 pushed */
     {
     movierun = FALSE;  
     movie_step = TRUE;  moviemen_buts(NULL,NULL,NULL);
     }

  } /* end of: movie_pop  */
@


1.7
log
@cosmetic formatting
@
text
@d1 32
a32 16
/*
C wid_movie.for  Created                       feb 93
C                Ported to: c               7/14/94 Mahieddine Ladjadj *
C
C
C **************************************************************************
C *  author:  ardean leith                                                 *
C *  copyright (c)1993, wadsworth center for laboratories and              *
C *  research, new york state department of health, albany, ny 12201.      *
C *    the contents of this document are proprietary to the center for     *
C *    laboratories and research and are not to be disclosed to others or  *
C *    used for purposes other than intended without written approval of   *
C *    the center for laboratories and research			           *
C **************************************************************************
C
C***************************************************************************
d37 2
d40 3
a42 7
void         movie_pop      (Widget, XEvent *, String *, Cardinal *);
void         wid_movierun   (void);
void         movie_doit     (Widget, XtIntervalId *);
extern void  moviemen_buts  (Widget, caddr_t, caddr_t);
extern void  glass          (Window , Window , int , int ,
	                    int , int , int *, int *, int );

a43 4
extern int  ixulmon,iyulmon;          /* First image of montage */ 
extern int  numfil;		      /* Last file number+1     */ 
extern int  setupbuttons, moviedelay, moviemagni, moviecycl, imno, forward,
            movie_step, twoway,moviemenu, ndone, ixulmv,iyulmv;
@


1.6
log
@neednewmap
@
text
@d2 15
a16 17
*  translated to movie.c by mahieddine ladjadj   7/14/94
*
c++*************************************************************************
c
c wid_movie.for -- created feb 93
c
c **************************************************************************
c *  author:  ardean leith                                                 *
c *  copyright (c)1993, wadsworth center for laboratories and              *
c *  research, new york state department of health, albany, ny 12201.      *
c *    the contents of this document are proprietary to the center for     *
c *    laboratories and research and are not to be disclosed to others or  *
c *    used for purposes other than intended without written approval of   *
c *    the center for laboratories and research			           *
c **************************************************************************
c
c***************************************************************************
d40 1
a40 1
/*************************  wid_movie  *************************************/
d45 3
a47 3
     showbutx("step thru movie.",
              "menu/(start movie).",
              "stop movie.",FALSE);
d59 1
a59 1
  /* total number of frames for a continous movie */
d70 1
a70 1
/**********************************  wid_movierun  ************************/
d78 1
a78 1
   char   outstr[10]="frame:   ";
d96 1
a96 1
   /* find correct subimage location, ndone : total number of images */
d102 1
a102 1
         imno = 1; 
d222 1
a222 1
     /* strangely enough some extra timeout seem to occur. execute
d224 1
d241 1
a241 1
            if(doit) wid_movierun();            /* continue run */
d244 1
a244 1
     else 				        /* stop movie   */
d254 2
a255 2
  if (!(strcmp(*params,"1")))                 /* button 1 pushed */
     {                         /* restart movie  ------- restart */
d258 2
a259 2
  else if (!(strcmp(*params,"2")))            /* button 2 pushed */
     {                        /* menu callup   ------------ menu */
d264 1
a264 1
  else if (!(strcmp(*params,"3")))            /* button 3 pushed */
d270 1
a270 1
  } /* end of movie_pop  */
@


1.5
log
@better movie position computed
@
text
@d32 2
a33 2
extern int  ixulmon,iyulmon;          /* first image of montage */ 
extern int  numfil;		      /* last file number+1     */ 
d57 1
a57 1
  /* find display location */
d67 1
a67 1
  /* start movie running  */
d81 2
a82 2
   int nlft;
   int old_magx, old_magy, old_mfac, x11, y11;
d85 1
a85 1
      { /* display image full-sized  */
d90 1
a90 1
      { /* shrink image by factor of iskip */
d94 1
a94 1
      {  /* magnify image by factor of iskip */
d112 1
d126 1
d135 1
a135 1
         { /* find the location */  
d138 1
d166 1
a166 1
   /* copy window to center of screen */
d169 1
a169 1
       XCopyArea(idispl,imagsav,iwin,icontx,ixulmv,iyulmv,
d171 2
d184 1
a184 1
      /* compute new position for movie image */
d194 1
d196 1
a196 1
      /* put back values of image size and magnification */
d207 1
a207 1
   /* stop if this is single frame stepping */
@


1.4
log
@made movie accept filename displayed under images
@
text
@d62 4
a65 1
  cyclnbr = moviecycl * ndone;
d74 3
a76 1
   {  /* name_margin is the number of pixel needed to write filename
d78 2
a79 1
   int    imcol, imrow, idelay, ixnn,iynn, name_margin=10;
a96 5
      
   if(!imno)
      { /* position of first image */
      ixulmv = ixulmon; iyulmv = iyulmon;
      }
d102 1
a102 1
      if (imno > ndone)
d107 9
d122 8
a129 3
         imno    = ndone - 2; forward = FALSE;
         ixulmv = ixulmon + (imno % nprow ) * (nisams + marx);
         iyulmv = iyulmon + (imno / nprow ) * (nirows + 2 * mary + 1); 
d131 11
a141 1
         }                                   
d150 10
a159 1
          }
a162 12
	 /*  displaying the filename of the images, 
         add 10 pixel in y axis direction */
         if (names) 
	     {
	     if( !(imno % nprow ))
	         iyulmv += (( imno / nprow ) - 1 ) * name_margin;
             else
	         iyulmv += ( imno / nprow ) *  name_margin;
	     }
  

  
d167 4
a170 1
                       nisams,nirows,ixulmm,iyulmm);
d196 4
a199 5
   /* find next location */  
   ixulmv = ixulmon + (imno % nprow ) * (nisams + marx);
   iyulmv = iyulmon + (imno / nprow ) * (nirows + 2 * mary + 1) ; 

   sprintf(&outstr[7],"%2d", imno); spout(outstr);
@


1.3
log
@added a limit on number of frames displayed by a run of movie
@
text
@d71 3
a73 2
   { 
   int    imcol, imrow, idelay, ixnn,iynn;
d91 1
d93 1
a93 1
      {
d97 1
a97 1
   /* find correct subimage location */
d115 1
a115 1
         imno--;
d127 12
a138 1

d140 1
@


1.2
log
@added a limit on number of frames displayed by a run of movie
@
text
@d152 1
a152 1
      magsizx = old_magy; magsizy = old_magy; magfac = old_mfac;
@


1.1
log
@command movie
@
text
@d34 1
a34 1
extern int  setupbuttons, moviedelay, moviemagni, imno, forward,
d37 1
a37 1
int	    icycles, movierun, nisams, nirows, checkmag;
d39 3
d61 3
a94 1

a160 1
   /* stop if this is single frame stepping */
d163 4
a166 4

   if(!movie_step)
       { /* count the number of time we call movie_doit */
       XtAppAddTimeOut(XtWidgetToApplicationContext(iw_win),
d169 1
a169 1
                       (XtPointer) iw_win);
a170 1

d178 9
a186 1
     /* we are taking care of one timeout, decrement number. */
d188 1
d195 6
a200 1
            wid_movierun();                     /* continue run */
d203 1
d210 1
a210 1
  {                                  
d212 2
a213 3
     { /* restart movie                         -------- restart */
     movie_step = TRUE;
     wid_movierun(); 
d216 1
a216 1
     { /* menu callup                          ------------ menu */
d219 1
a219 4
        { 
        movie_step = FALSE;   
        wid_movierun(); 
        }		/* else  TimeOutCallback takes care of it */
d222 3
a224 14
     { /* stop movie                           ----------- stop  */
        moviemen_buts(NULL,NULL,NULL);
/*
     if(movie_step)
        moviemen_buts(NULL,NULL,NULL);
     else
        { 
*/
/* TimeOutCallback takes care of it */
/*
        movierun = FALSE;    
	wid_movierun();  
        }
*/
@
