head	1.16;
access;
symbols
	pre-tilt-improve:1.15
	pre_surf_fromtop:1.15
	pre_neednewmap:1.14
	pre_apppluss_remove:1.14
	pre_tiltpair_chng:1.14
	pre_GPL:1.11;
locks;
comment	@ * @;


1.16
date	2018.12.07.17.03.33;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.23.19.30.08;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.05.17.17.30.33;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.01.19.33.45;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.18.17.00.02;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.09.14.14.15.39;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	95.11.14.16.14.00;	author liy;	state Exp;
branches;
next	1.9;

1.9
date	94.09.12.16.00.44;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	94.09.12.15.41.44;	author mladjadj;	state Exp;
branches;
next	1.7;

1.7
date	94.09.08.18.58.44;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	94.09.07.19.29.54;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	94.08.19.14.45.05;	author odesanya;	state Exp;
branches;
next	1.4;

1.4
date	94.02.14.12.45.15;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	93.11.18.12.28.15;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	93.11.15.16.59.13;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.10.15.20.12;	author leith;	state Exp;
branches;
next	;


desc
@profiling routine
@


1.16
log
@bollingers_email_and_cosmetic
@
text
@/*$Header: /usr8/web/src/RCS/profile.c,v 1.15 2011/09/23 19:30:08 leith Exp $*/
/*
************************************************************************
*  profile.c         6/10/93
*  wid_profile.for  (in VAX) ported to UNIX
*                   Oversize images            16 May 2011 ArDean Leith
* 
C **********************************************************************
*    AUTHOR:  Mahieddine Ladjadj                                       *
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2011  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
C **********************************************************************
*
*    profile()
*
*    PURPOSE:       Plots profile through row or col of image file
*
*    PARAMETERS:    None
*
************************************************************************
*/

#include "common.h"
#include "routines.h"
#include "profile.h"

/* Internal subroutine prototypes */
 static void  profile_plot    (float *);
 static void  profile_line    (int);

 /* Internal common variables */
 static int   first , doxyaxis, permxyaxis ;
 static float *buft;
 static int   LS0, ls;           /* line style of the icontxm GC */
 static int   LW0, lw;           /* line width of the icontxm GC */

 /* External common variables */
 int    horizbar, leavebar, normbar, permbar;
 int    spline;		/* the special line flag */
 int    linenum;	/* the line number of the special line */
 GC     icontxm;

 /***************************  profile  *******************************/

 void profile(void)
   {
   first    = horizbar = normbar = TRUE;
   leavebar = permbar  = spline  = FALSE;
   linenum  = 0;

   /* Avoid drawing X and Y axis more than once */
   doxyaxis = 2; 
   permxyaxis = 2;

   /* Run-time allocation of memory space */
   buft = (float *) calloc(nrow, sizeof(float));
   if (buft == (float *) NULL)
       {  spout("*** Calloc failed in profile"); return; }

   /* Set up a xor graphics context */
   icontxm = setxor(icontx);

   /* Open a message window with the following strings */
   showbutx("Image Profile.",
            "Display menu.",
            "Stop this routine.", FALSE);

   /* Set actions for right, left, and center buttons */
   actions(iw_win, "profile_pop",profile_pop,"M123");

   /* Set color for the overlay */
   wicolor(icontxm,colorgo+icolorov);

   /* Refresh screen */
   expos_cb(NULL,NULL,NULL);
   }

 /********************** profile_pop  *******************/

 void profile_pop(Widget iw_t, XEvent *event, String *params,
                   Cardinal *num_params)
   {
   XGCValues     gcv;
   int           ixc, iyc, ixi, iyi, ix2, iy2, ix3, iy3, inside;
   static int    ix0, iy0, ix1, iy1;
   int           irec, irow, idum;
   float         *buf;
   char          outstr[80];

   /* Get current line style and width */
   /* Line_style is LineSolid(0), LineOnOffDash(1), ... */
   /* Line_width is 0,1,...,5                        */
   if (first)
      { /* Save the line width and style of the GC */
      XGetGCValues(idispl, icontx, GCLineWidth | GCLineStyle, &gcv);
      LW0 = gcv.line_width;
      LS0 = gcv.line_style;
      ls  = LS0; 
      lw  = LW0 - 1;
      }

   if (!(strcmp(*params,"M")))                   /* Cursor moved */
       {
       /* Get mouse position ixc,iyc  */
       getloc(event,'M',&ixc,&iyc);

       /*  Find location relative to image */
       ixi    = ixc - ixul + 1;
       iyi    = iyc - iyul + 1;
       inside = iskipadj(ixi,iyi,nsam,nrow,iskip,&ixi,&iyi);

       if ( !inside )
           { /*  Outside of image. */
           ;
           }
       else if (horizbar)
           {
	   /* If draw the special line */
	   if (spline) {
	      iyi = linenum;
	      iyc = linenum + iyul - 1;
	      }

           /* Horizontal bar inside image, report location. */
           sprintf(outstr,"Row inside image: %d$", iyi); 
	   spout(outstr);

           /* Find bar ends */
           ix2 = ixul;             iy2 = iyc;
           ix3 = ixul + nsam -1;   iy3 = iyc;
           if (!first)
              xorline(iwin,icontxm,FALSE, ix2,iy2, ix3,iy3);
           else
              {
              xorline(iwin,icontxm,FALSE, ix2,iy2, ix3,iy3);
              first = FALSE;
              }
	   }
       else
	   {
	   /* If draw the special line */
	   if (spline) {
	      ixi = linenum;
	      ixc = linenum + ixul - 1;
	      }

           /* Vertical bar inside image, report location. */
           sprintf(outstr,"Col. inside image: %d$", ixi);
           spout(outstr);

           /* Find bar ends */
           ix2 = ixc;    iy2 = iyul;
           ix3 = ixc;    iy3 = iyul + nrow -1;
           if (!first)
              xorline(iwin,icontxm,FALSE, ix2,iy2, ix3,iy3);
           else
              {
              xorline(iwin,icontxm,FALSE, ix2,iy2, ix3,iy3);
              first = FALSE;
              }
           }
       }

   else if (!(strcmp(*params,"1")))            /* Button 1 pushed */
       {
       /* Get mouse position ixc,iyc  */
       getloc(event,'M',&ixc,&iyc);

       /*  Find location relative to image */
       if (!spline) {
           ixi    = ixc - ixul + 1;  
	   iyi    = iyc - iyul + 1;
           inside = iskipadj(ixi,iyi,nsam,nrow,iskip,&ixi,&iyi);
	   }
       else
           {
	   if (horizbar) {
	      ixi = nsam;
	      iyi = linenum;
	      }
	   else {
	      ixi = linenum;
	      iyi = nrow;
	      }
	   }

       if ( !inside )
	   {  /*  Outside of image. can not select this location */
           ;
	   }
       else if (horizbar)
	   {
           /* Horizontal bar inside image, report location. */
           sprintf(outstr,"Profiled row: %d", iyi);  spout(outstr);

           /* Find bar ends */
           ix2 = ixul;              iy2 = iyc;
           ix3 = ixul + nsam -1;    iy3 = iyc;

           if (leavebar)
	      {
              xorline(iwin,icontxm,TRUE, ix2, iy2, ix3, iy3);

              /* Save bar in backing store */
              xorline(imagsav,icontxm,TRUE, ix2, iy2, ix3,iy3);
	      }
           else
              {
              if (!first)
                xorline(iwin,icontxm,FALSE, ix2,iy2, ix3,iy3);
              else
                 {
                 xorline(iwin,icontxm,FALSE, ix2,iy2, ix3,iy3);
                 first = FALSE;
                 }
              }

           /* Read row from image file */
	   if (!spline)
               irec = (islice - 1) * nrow + iyi;
	   else 	/* special line */
               irec = (islice - 1) * nrow + linenum;

           buf  = filedata -> buf;
           if (redlin(filedata,buf,nsam,irec))
               profile_plot(buf);

           /* Plotting the profile has changed static: x0,y0 & x1,y1
           ** in xorline. Delete the last bar */
           if (!leavebar)
              xorline(iwin,icontxm,TRUE, ix2, iy2, ix3, iy3);

	   }
       else
	   {
           /* Vertical bar inside image, report location. */
           sprintf(outstr,"Profiled col.: %d", ixi); spout(outstr);

           /* find bar ends */
           ix2 = ixc;     iy2 = iyul;
           ix3 = ixc;     iy3 = iyul + nrow -1;

           if (leavebar)
	      {
              xorline(iwin,icontxm,TRUE, ix2,iy2, ix3,iy3);

              /* Save bar in backing store */
              xorline(imagsav,icontxm,TRUE, ix2,iy2, ix3,iy3);
	      }
           else
              { 
              if (!first)
                 xorline(iwin,icontxm,FALSE, ix2,iy2, ix3,iy3);
              else
                 {
                 xorline(iwin,icontxm,FALSE, ix2,iy2, ix3,iy3);
                 first = FALSE;
                 }
              }

           /* Read col from image file */
           buf = filedata -> buf;
           for (irow = 0; irow < nrow; irow++)
	      {
              irec = (islice - 1) * nrow + irow;
              redlin(filedata,buf,nsam,irec);
              buft[irow] = buf[ixi];
	      }
           profile_plot(buft);

           /* Plotting the profile has changed static: x0,y0 & x1,y1
           ** in xorline.  Delete the last bar */
           if (!leavebar)
              xorline(iwin,icontxm,TRUE, ix2, iy2, ix3, iy3);

	   }

       }                                       

   else if (!(strcmp(*params,"2")))           /* Button 2 pushed */
       { /* Get mouse position ixc,iyc  */
       getloc(event,'M',&ixc,&iyc);

       if (horizbar) 
           {
           ix2 = ixul;              iy2 = iyc;
           ix3 = ixul + nsam -1;    iy3 = iyc;
           }
       else
           {
           ix2 = ixc;     iy2 = iyul;
           ix3 = ixc;     iy3 = iyul + nrow -1;
           }

       if (!first)
          xorline(iwin,icontxm,TRUE, ix2,iy2, ix3,iy3);
       else
          {
          xorline(iwin,icontxm,TRUE, ix2,iy2, ix3,iy3);
          first = FALSE;
          }
 
       /* menu  callup */
       profilemen();

       if (!permbar) { permxyaxis=2; doxyaxis=2; }
       }

   else if (!(strcmp(*params,"3")))           /* Button 3 pushed */
       {
       /* Free heap memory */
       if (buft) free(buft);

       /* Stop this routine */
       profilemen_buts(NULL, NULL, NULL);
       }

 return;
 }

/*********************  profile_plot  *****************************/

 void  profile_plot(float *buf)
   {
   int    xline, yline, i, xpsize, ypsize;
   int    ixend, ixori, iyori, ix, itick;
   int    iytop, iybot, ixgo, iygo, iy;
   float  bufmin,bufmax,vrange,vscale,hscale;

   xline = TRUE;
   yline = TRUE;

   if (normbar)
       {
       /* Find max y value in the buffer */
       bufmax = buf[0];
       bufmin = buf[0];
       for (i = 1; i < nsam; i++)
	  {
          bufmax = MYMAX(bufmax, buf[i]);
          bufmin = MYMIN(bufmin, buf[i]);
	  }
       }
   else
       {
       /* Use fmin_spi and fmax_spi for scaling */
       bufmax = fmax_spi;
       bufmin = fmin_spi;
       }

   vrange = bufmax - bufmin;
   if (vrange < FLTZER)
      {spout("*** NULL PROFILE");  return; }

   /* Set plot size */
   xpsize = iwidex - 100;
   ypsize = ihighx - 100;

   /* Find x and y scaling factors */
   hscale = xpsize / nsam;
   if (hscale < 1) hscale = (float) xpsize / (float) nsam;

   vscale = (float) ypsize / vrange;
   if (vscale < 1) vscale = ypsize / (float) vrange;

   /* Find origin of plot */
   ixori = ((iwidex - xpsize) / 2) + hscale;
   iyori = ihighx - (ihighx - ypsize) / 2;

   //printf("*** nsam: %d   \n",nsam);
   //printf("*** iwidex: %d  ihighx: %d \n",iwidex,ihighx);
   //printf("*** hscale: %f  xpsize: %d ypsize: %d \n",hscale,xpsize,ypsize);
   //printf("*** ixori: %d iyori: %d \n",ixori,iyori);

   if (xline)
       {
       /* Draw horizontal X axis */
       ixend = nsam * hscale + ixori - hscale;

       if(doxyaxis > 0) 
          {
          xorline(iwin,icontxm,TRUE, ixori, iyori, ixend, iyori);
          doxyaxis--;
          }
       if (permxyaxis > 0)
          {
          if (permbar)
              xorline(imagsav,icontxm,TRUE, ixori, iyori,
                                            ixend, iyori);
          permxyaxis--;
          }

       /* Add tick marks */
       itick = 50;
       if (nsam < 20 )
          itick = 1;
       else if (nsam < 300)
          itick = 10;

       for (i = 0; i < nsam ; i += itick)
	   {
           ix = i * hscale + ixori - hscale;
           xorline(iwin,icontxm,TRUE, ix, iyori, ix, iyori + 4);
           if (permbar)
             xorline(imagsav,icontxm,TRUE, ix, iyori, ix, iyori + 4);
	   }
       }
     
   if (yline)
       {
       /* Draw vertical Y axis */
       iytop = iyori - (vrange * vscale);
       iybot = iyori;

       /* Draw Y axis */
       if (doxyaxis > 0)
          {
          xorline(iwin,icontxm,TRUE, ixori, iybot, ixori, iytop);
          doxyaxis--;
          }

       if (permxyaxis > 0)
          {
          if (permbar)
             xorline(imagsav,icontxm,TRUE, ixori, iybot,
                                           ixori, iytop);
          permxyaxis--;
          }

       /* Put tick at bottom of Y axis */
       xorline(iwin,icontxm,TRUE, ixori-4, iybot, ixori, iybot);
       if (permbar)
         xorline(imagsav,icontxm,TRUE, ixori-4, iybot, ixori, iybot);

       /* Put tick at top of Y axis */
       xorline(iwin,icontxm,TRUE, ixori-4, iytop, ixori, iytop);
       if (permbar)
         xorline(imagsav,icontxm,TRUE, ixori-4, iytop, ixori, iytop);
       }

     /* Plot the profile */
     ixgo = ixori;
     iygo = iyori;

     /* Select line style and width for icontxm GC */

     profile_line(1);
     for (i = 0; i < nsam; i++)
        {
        ix = i * hscale + ixori;
        iy = iyori - ((buf[i] - bufmin) * vscale);

        xorline(iwin,icontxm,TRUE, ixgo, iygo, ix, iy);
        if (permbar)
           xorline(imagsav,icontxm,TRUE, ixgo, iygo, ix, iy);
        ixgo = ix;
        iygo = iy;
        }

     /* Reset line style and width for icontxm GC */
     profile_line(0);

     return;
     }

/*********************  profile_line  *****************************/

 void  profile_line(int doit)
   {
   XGCValues     gcv;
   int ls1, lw1;

   if (doit)
       {  /* Change line style and width if icontxm GC */
       if (lw >= 5) 
           { /* Reset line width and change line style */
           lw = 1;
           if (ls >= 2 ) 
             ls = 0;
           else
             ls++;
           }
       else
           {/* Next line width */
           lw++;
           }
       ls1 = ls; lw1 = lw;
       }
   else
       {  /* Reset line style and width if icontxm GC */
       ls1 = LS0; lw1 = LW0;
       }

   gcv.line_width = lw1;
   switch( ls1 )
       {
       case 0:   gcv.line_style = LineSolid;        break;
       case 1:   gcv.line_style = LineOnOffDash;    break;
       case 2:   gcv.line_style = LineDoubleDash;   break;
       }

   XChangeGC( idispl, icontxm, GCLineWidth | GCLineStyle, &gcv);
   }
//*** nsam: 1205
//*** iwidex: 900  ihighx: 779
//*** hscale: 0.663900  xpsize: 800 ypsize: 679
//*** ixori: 50 iyori: 729
//*** ixgo: 899 iygo: 778
//*** ix: 899 iy: 778
@


1.15
log
@wicolor(icontxm,colorgo.
@
text
@d1 1
a1 1
/*$Header: /usr8/web/new/RCS/profile.c,v 1.14 2011/05/17 17:30:33 leith Exp $*/
d46 1
d49 2
a50 5
 void  profile_pop     (Widget, XEvent *, String *, Cardinal *);
 void  profile_plot    (float *);
 void  profilemen      (void);
 void  profilemen_buts (int, int, int);
 void  profile_line    (int);
d53 4
a56 6
 int   first , horizbar , leavebar, normbar, permbar, doxyaxis, permxyaxis ;
 int   spline;		/* the special line flag */
 int   linenum;		/* the line number of the special line */
 float *buft;
 int   LS0, ls;           /* line style of the icontxm GC */
 int   LW0, lw;           /* line width of the icontxm GC */
d59 3
d336 1
a336 1
       profilemen_buts(idum,idum,idum);
@


1.14
log
@bug fixed
@
text
@d1 1
a1 1
/*$Header: /usr8/web/new/RCS/profile.c,v 1.13 2007/11/01 19:33:45 leith Exp leith $*/
d94 1
a94 1
   wicolor(icontxm,icolorov);
@


1.13
log
@fmin ->fmin_spi..
@
text
@d1 1
a1 1
/*$Header: /net/bali/usr1/web/src/RCS/profile.c,v 1.12 2005/10/18 17:00:02 leith Exp $*/
d3 1
a3 1
*****************************************************************************
d5 3
a7 3
*
*  wid_profile.for (in VAX) ported to UNIX
*
d9 1
a9 1
* *  AUTHOR:  Mahieddine Ladjadj                                           *
d11 1
a11 1
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
d35 1
a35 3
*    PROFILE()
*
*    PURPOSE:        PLOTS A PROFILE THROUGH ROW OR COL OF AN IMAGE FILE
d37 1
a37 1
*    PARAMETERS:     NONE
d39 1
d41 1
a41 1
*****************************************************************************
d47 1
a47 1
/* internal subroutine prototypes */
d54 1
a54 1
 /* internal common variables */
d59 2
a60 2
 int LS0, ls;           /* line style of the icontxm GC */
 int LW0, lw;           /* line width of the icontxm GC */
d62 1
a62 1
 /* external common variables */
d68 8
a75 7
 {
   first = horizbar = normbar = TRUE;
   leavebar = permbar = spline = FALSE;
   linenum = 0;

   /* avoid drawing X and Y axis more than once */
   doxyaxis = 2; permxyaxis =2;
d77 1
a77 1
   /* run-time allocation of memory space */
d82 1
a82 1
   /* set up a xor graphics context */
d85 1
a85 1
   /* open a message window with the following strings */
d90 1
a90 1
   /* set the actions for right, left, and center buttons */
d93 1
a93 1
   /* set color for the overlay */
d96 1
a96 1
   /* refresh screen */
d98 1
a98 1
 }
d112 5
a116 5
   /* get current line style and width */
   /* line_style is LineSolid(0), LineOnOffDash(1), ... */
   /* line_width is 0,1,...,5                        */
   if(first)
      { /* save the line width and style of the GC */
d120 2
a121 1
      ls = LS0; lw = LW0 - 1;
d124 1
a124 1
   if (!(strcmp(*params,"M")))                 /* cursor moved */
d126 1
a126 1
       /* get mouse position ixc,iyc  */
d129 1
a129 1
       /*  find location relative to image */
d135 1
a135 1
           { /*  outside of image. */
d140 1
a140 1
	   /* if draw the special line */
d146 1
a146 1
           /* horizontal bar inside image, report location. */
d150 1
a150 1
           /* find bar ends */
d153 1
a153 1
           if(!first)
d163 1
a163 1
	   /* if draw the special line */
d169 1
a169 1
           /* vertical bar inside image, report location. */
d173 1
a173 1
           /* find bar ends */
d176 1
a176 1
           if(!first)
d186 1
a186 1
   else if (!(strcmp(*params,"1")))            /* button 1 pushed */
d188 1
a188 1
       /* get mouse position ixc,iyc  */
d191 1
a191 1
       /*  find location relative to image */
d210 1
a210 1
	   {  /*  outside of image. can not select this location */
d215 1
a215 1
           /* horizontal bar inside image, report location. */
d218 1
a218 1
           /* find bar ends */
d226 1
a226 1
              /* save bar in backing store */
d231 1
a231 1
              if(!first)
d240 1
a240 1
           /* read row from image file */
d250 2
a251 2
           /* plotting the profile has changed the static x0,y0 & x1,y1
           ** in xorline. delete the last bar */
d258 1
a258 1
           /* vertical bar inside image, report location. */
d269 1
a269 1
              /* save bar in backing store */
d274 1
a274 1
              if(!first)
d283 1
a283 1
           /* read col from image file */
d293 2
a294 2
           /* plotting the profile has changed the static x0,y0 & x1,y1
           ** in xorline. delete the last bar */
d302 2
a303 2
   else if (!(strcmp(*params,"2")))           /* button 2 pushed */
       { /* get mouse position ixc,iyc  */
d306 1
a306 1
       if(horizbar) 
d317 1
a317 1
       if(!first)
d331 1
a331 1
   else if (!(strcmp(*params,"3")))           /* button 3 pushed */
d333 2
a334 2
       /* free the heap memory space */
       if(buft) free(buft);
d336 1
a336 1
       /* stop this routine */
d346 1
a346 1
 {
d357 1
a357 1
       /* find the max y value in the buffer */
d368 1
a368 1
       /* use fmin_spi and fmax_spi for scaling */
d377 1
a377 1
   /* set plot size */
d381 1
a381 1
   /* find x and y scaling facters */
d383 4
a386 1
   vscale = ypsize / vrange;
d388 1
a388 1
   /* find origin of plot */
d392 5
d399 1
a399 1
       /* draw horizontal X axis */
d401 1
d415 1
a415 1
       /* add tick marks */
d433 1
a433 1
       /* draw vertical Y axis */
d437 1
a437 1
       /* draw Y axis */
d452 1
a452 1
       /* put tick at bottom of Y axis */
d457 1
a457 1
       /* put tick at top of Y axis */
d463 1
a463 1
     /* plot the profile */
d467 1
a467 1
     /* select a line style and width for icontxm GC */
d474 1
d482 1
a482 2

     /* reset a line style and width for icontxm GC */
d485 2
a486 2
 return;
 }
d496 1
a496 1
       {  /* change line style and width if icontxm GC */
d498 1
a498 1
           { /* reset line width and change line style */
d506 1
a506 1
           {/* next line width */
d512 1
a512 1
       {  /* reset line style and width if icontxm GC */
d519 3
a521 3
         case 0:   gcv.line_style = LineSolid;        break;
         case 1:   gcv.line_style = LineOnOffDash;    break;
         case 2:   gcv.line_style = LineDoubleDash;   break;
a524 2


d526 6
@


1.12
log
@GPL
@
text
@d1 1
a1 1
/*$Header: /net/ithaca/usr1/web/src/RCS/profile.c,v 1.11 1999/09/14 14:15:39 leith Exp $*/
d367 3
a369 3
       /* use fmin and fmax for scaling */
       bufmax = fmax;
       bufmin = fmin;
@


1.11
log
@added iskipadj
@
text
@d1 1
a1 1
/*$Header: /net/ithaca/usr1/web/src/RCS/profile.c,v 1.10 1995/11/14 16:14:00 liy Exp leith $*/
d8 1
a8 1
* **************************************************************************
d10 24
a33 7
* *  COPYRIGHT (C)1990 , WADSWORTH CENTER FOR LABORATORIES AND             *
* *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
* *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
* *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
* *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
* *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
* **************************************************************************
@


1.10
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*$Header: /net/alwyn/usr1/web/src/RCS/profile.c,v 1.9 1994/09/12 16:00:44 mladjadj Exp $*/
d89 1
a89 1
   int           ixc, iyc, ixi, iyi, ix2, iy2, ix3, iy3;
d112 3
a114 2
       ixi = ixc - ixul + 1;
       iyi = iyc - iyul + 1;
d116 1
a116 1
       if ( (ixi < 1 || ixi > nsam ) || (iyi < 1 || iyi > nrow) )
d175 3
a177 2
           ixi = ixc - ixul + 1;  
	   iyi = iyc - iyul + 1;
d179 2
a180 1
       else {
d191 1
a191 1
       if ( (ixi < 1 || ixi > nsam) || (iyi < 1 || iyi > nrow) )
@


1.9
log
@fixed extra bar when cliking 2 button
@
text
@d1 1
a1 1
/*$Header: /net/alwyn/usr1/web/src/RCS/profile.c,v 1.7 1994/09/08 18:58:44 mladjadj Exp $*/
d40 2
d54 3
a56 1
   leavebar = permbar = FALSE;
d121 6
d128 2
a129 1
           sprintf(outstr,"Row inside image: %d$", iyi); spout(outstr);
d144 6
d173 14
a186 1
       ixi = ixc - ixul + 1;  iyi = iyc - iyul + 1;
d220 5
a224 1
           irec = (islice - 1) * nrow + iyi;
@


1.8
log
@fixed overwrite of XY axis of plot
@
text
@d263 1
a263 1
          xorline(iwin,icontxm,FALSE, ix2,iy2, ix3,iy3);
d266 1
a266 1
          xorline(iwin,icontxm,FALSE, ix2,iy2, ix3,iy3);
@


1.7
log
@change LS to LS0 (to avoid LS,ls vax problem)
@
text
@d1 1
a1 1
/*$Header: /net/alwyn/usr1/web/src/RCS/profile.c,v 1.6 1994/09/07 19:29:54 mladjadj Exp mladjadj $*/
d39 1
a39 1
 int   first , horizbar , leavebar, normbar, permbar ;
d53 2
d92 2
a93 2
   /* line_style is LineSolid(0), LineOnOffDash(1) */
   /* line_width is 1,...,5                        */
d111 2
a112 8
/*
       if ( ((!horizbar) && (ixi < 1 || ixi > nsam )) ||
             ( horizbar  && (iyi < 1 || iyi > nrow))) 
*/
       if ( (ixi < 1 || ixi > nsam ) || (iyi < 1 || iyi > nrow) ) 

           {
           /*  outside of image. */
d124 1
a124 2
              xorlin(iwin,icontxm,TRUE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d127 1
a127 2
              xorlin(iwin,icontxm,FALSE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d141 1
a141 2
              xorlin(iwin,icontxm,TRUE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d144 1
a144 2
              xorlin(iwin,icontxm,FALSE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d147 1
a147 1
	   }
a157 4
/*
       if (((!horizbar) && (ixi < 1 || ixi > nsam )) || 
            (horizbar   && (iyi < 1 || iyi > nrow)))
*/
d159 1
a159 2
	   {
           /*  outside of image. can not select this location */
d167 4
d173 1
a173 3
              /* find bar ends */
              ix2 = ixul;              iy2 = iyc;
              ix3 = ixul + nsam -1;    iy3 = iyc;
a174 2
              xorlin(iwin,icontxm,FALSE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d176 1
a176 2
              xorlin(imagsav,icontxm,FALSE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d181 1
a181 2
                 xorlin(iwin,icontxm,TRUE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d184 1
a184 2
                 xorlin(iwin,icontxm,FALSE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d194 6
d206 4
d212 1
a212 3
              /* find bar ends */
              ix2 = ixc;     iy2 = iyul;
              ix3 = ixc;     iy3 = iyul + nrow -1;
a213 2
              xorlin(iwin,icontxm,FALSE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d215 1
a215 2
              xorlin(imagsav,icontxm,FALSE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d218 1
a218 1
              {
d220 1
a220 2
                 xorlin(iwin,icontxm,TRUE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d223 1
a223 2
                 xorlin(iwin,icontxm,FALSE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d237 6
d244 1
d248 14
a261 1
       {
d263 1
a263 2
            xorlin(iwin,icontxm,TRUE,TRUE,&ix0,&iy0,&ix1,&iy1,
                                            ix2,iy2, ix3,iy3);
d266 1
a266 2
          xorlin(iwin,icontxm,FALSE,TRUE,&ix0,&iy0,&ix1,&iy1,
                        ix2,iy2, ix3,iy3);
d269 1
a269 1

d272 2
d338 12
a349 3
       xorline(iwin,icontxm,TRUE, ixori, iyori, ixend, iyori);
       if (permbar)
          xorline(imagsav,icontxm,TRUE, ixori, iyori, ixend, iyori);
d374 5
a378 1
       xorline(iwin,icontxm,TRUE, ixori, iybot, ixori, iytop);
d380 7
a386 2
       if (permbar)
         xorline(imagsav,icontxm,TRUE, ixori, iybot, ixori, iytop);
@


1.6
log
@profile drawn with different line styles
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/profile.c,v 1.4 94/02/14 12:45:15 leith Exp $*/
d41 2
a42 2
 int LS, ls;           /* line style of the icontxm GC */
 int LW, lw;           /* line width of the icontxm GC */
d95 3
a97 3
      LW = gcv.line_width;
      LS = gcv.line_style;
      ls = LS; lw = LW - 1;
d424 1
a424 1
       ls1 = LS; lw1 = LW;
@


1.5
log
@*** empty log message ***
@
text
@d29 1
a30 13
 /* external subroutines */
 extern void     xorlin     (Window, GC, int, int, int *, int * , int *, int*, 
                             int, int, int, int);
 extern GC       setxor     (GC);
 extern void     showbutx   (char *, char *, char *, int);
 extern void     actions    (Widget, char *, void (*)(), char *);
 extern void     getloc     (XEvent *, char, int *, int *);
 extern void     spout      (char *);
 extern void     expos_cb   (Widget, caddr_t, caddr_t);
 extern int      redlin     (FILEDATA *, float *, int , int);
 extern int      wicolor    (GC, int);
 extern void     xorline    (Window, GC, int, int, int, int, int);

d36 1
d39 4
a42 2
 int   first, horizbar = TRUE, leavebar = FALSE, normbar = TRUE;
 int   permbar = FALSE;
d51 7
a57 1
   first = TRUE;
d82 17
a98 6
   int    ixc, iyc, ixi, iyi;
   int    ix0, iy0, ix1, iy1, ix2, iy2, ix3, iy3;
   int    irec, irow;
   float  *buf, *buft;
   int    idum;
   char   outstr[80];
d109 1
d111 5
a115 2
             ( horizbar  && (iyi < 1 || iyi > nrow)))
	   {
d118 1
a118 1
	   }
d120 1
a120 1
	   {
d122 1
a122 2
           sprintf(outstr,"Row inside image: %d$", iyi);
           spout(outstr);
d125 8
a132 7
           ix2 = ixul;
           iy2 = iyc;

           ix3 = ixul + nsam -1;
           iy3 = iyc;

           xorlin(iwin,icontxm,!first,TRUE,&ix0,&iy0,&ix1,&iy1,
d134 2
a135 1
           first = FALSE;
d144 8
a151 7
           ix2 = ixc;
           iy2 = iyul;

           ix3 = ixc;
           iy3 = iyul + nrow -1;

           xorlin(iwin,icontxm,!first,TRUE,&ix0,&iy0,&ix1,&iy1,
d153 2
a154 1
           first = FALSE;
d164 1
a164 2
       ixi = ixc - ixul + 1;
       iyi = iyc - iyul + 1;
d166 1
d169 2
d175 1
a175 1
      else if (horizbar)
d178 1
a178 2
           sprintf(outstr,"Profiled row: %d", iyi);
           spout(outstr);
d183 2
a184 2
              ix2 = ixul;
              iy2 = iyc;
d186 2
a187 2
              ix3 = ixul + nsam -1;
              iy3 = iyc;
d190 1
a190 2
                                               ix2,iy2, ix3,iy3);

d192 12
d214 1
a214 2
           sprintf(outstr,"Profiled col.: %d", ixi);
           spout(outstr);
d216 1
a216 1
          if (leavebar)
d219 2
a220 4
              ix2 = ixc;
              iy2 = iyul;
              ix3 = ixc;
              iy3 = iyul + nrow -1;
d222 3
d226 1
a226 1
                                                ix2,iy2, ix3,iy3);
d228 12
a239 3

           /* run-time allocation of memory space */
           /* not very efficient for multiple calls!!!!al */
a240 4
           buft = (float *) calloc(nrow, sizeof(float));
           if (buft == (float *) NULL)
              {  spout("*** Calloc failed in profile"); return; }

a249 3

           /* free the heap memory space */
           free(buft);
d255 10
d271 3
d378 3
d392 4
d399 40
@


1.4
log
@replaced MIN,MAX with MYMIN,MYMAX
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/profile.c,v 1.3 93/11/18 12:28:15 leith Exp Locker: leith $*/
a37 1
 extern void     overlut    (void);
a71 3

   /* set new lut for all correct use with x-or */
   overlut();
@


1.3
log
@does not leave initial bar
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/profile.c,v 1.2 93/11/15 16:59:13 leith Exp Locker: leith $*/
d262 2
a263 2
          bufmax = MAX(bufmax, buf[i]);
          bufmin = MIN(bufmin, buf[i]);
@


1.2
log
@new
@
text
@d1 1
a1 1
/*$Header$*/
a28 2
#include "files.h"
#include <stdio.h>
d31 2
a32 1
 extern void     xorline    (Window, GC, int, int, int, int, int);
d42 1
d89 3
a91 1
   int ixi, iyi, ix1, iy1, ix2, iy2, ix3, iy3, irec, irow;
d93 2
a94 2
   int idum;
   char  outstr[80];
d98 2
a99 2
       /* get mouse position ix1,iy1  */
       getloc(event,'M',&ix1,&iy1);
d102 2
a103 2
       ixi = ix1 - ixul + 1;
       iyi = iy1 - iyul + 1;
d105 2
a106 1
       if ((!horizbar) && (ixi < 1 || ixi > nsam ))
d108 1
a108 1
           /*  outside of image. can not select this location */
a110 4
       else if (horizbar && (iyi < 1 || iyi > nrow))
	   {
           ;
	   }
d114 1
a114 1
           sprintf(outstr,"Row inside image: %d $", iyi);
a116 6
           if (!first)
	      {
              /* erase old bar */
              xorline(iwin,icontxm,FALSE,ix2,iy2,ix3,iy3);
	      }

d119 2
a120 1
           iy2 = iy1;
d122 4
a125 2
           iy3 = iy1;
           xorline(iwin,icontxm,FALSE,ix2,iy2,ix3,iy3);
d131 1
a131 1
           sprintf(outstr,"Col. inside image: %d $", ixi);
a133 5
           if (!first)
	       {
               /* erase old bar */
               xorline(iwin,icontxm,FALSE,ix2,iy2,ix3,iy3);
	       }
d135 1
a135 1
           ix2 = ix1;
d137 2
a138 1
           ix3 = ix1;
d141 2
a142 1
           xorline(iwin,icontxm,FALSE,ix2,iy2,ix3,iy3);
d149 2
a150 2
       /* get mouse position ix1,iy1  */
       getloc(event,'M',&ix1,&iy1);
d153 2
a154 2
       ixi = ix1 - ixul + 1;
       iyi = iy1 - iyul + 1;
d156 2
a157 1
       if ((!horizbar) && (ixi < 1 || ixi > nsam ))
d162 1
a162 1
       else if (horizbar && (iyi < 1 || iyi > nrow))
a163 5
           /*  outside of image. can not select this location */
           ;
	   }
       else if (horizbar)
	   {
a167 6
           if (!first)
	      {
              /* erase old bar */
              xorline(iwin,icontxm,FALSE,ix2,iy2,ix3,iy3);
              first = TRUE;
	      }
d170 3
a172 2
              /* draw a permanent line at this level */
              xorline(iwin,icontxm,TRUE,ixul,iy1,ixul+nsam-1,iy1);
d174 2
d177 3
a179 1
              xorline(imagsav,icontxm,TRUE,ixul,iy1,ixul+nsam-1,iy1);
d184 3
a186 3
           buf = filedata -> buf;
           redlin(filedata,buf,nsam,irec);
           profile_plot(buf);
d194 1
a194 1
           if (!first)
d196 5
a200 8
              /* erase old bar */
              xorline(iwin,icontxm,FALSE,ix2,iy2,ix3,iy3);
              first = TRUE;
	      }
           if (leavebar)
	      {
              /* draw a permanent line at this level */
              xorline(iwin,icontxm,TRUE,ix1,iyul,ix1,iyul+nrow-1);
d202 2
a203 2
              /* save bar in backing store */
              xorline(imagsav,icontxm,TRUE,ix1,iyul,ix1,iyul+nrow-1);
d206 3
a208 1
           /* run-time allocation of heap memory space */
d211 1
a211 4
              {
              spout("*** Error: calloc failed in profile");
              return;
	      }
d226 1
a226 1
       }                                        /* button 1 */
d245 1
a245 1
 void  profile_plot    (float *buf)
d247 4
a250 3
   int xline, yline, bufmax, bufmin, i, vrange, xpsize, ypsize;
   int hscale, vscale, ixend, ixori, iyori, ix, itick;
   int iytop, iybot, ixgo, iygo, iy;
d272 1
@


1.1
log
@Initial revision
@
text
@d1 1
d51 2
a52 1
 int   first, horizbar, leavebar, normbar, permbar;
d57 1
a57 1
/***********************  profile  *****************************/
a61 4
   horizbar = TRUE;
   leavebar = FALSE;
   normbar = TRUE;
   permbar = FALSE;
d88 1
a88 1
 {
d95 1
a95 1
     {
d104 1
a104 1
	 {
d107 1
a107 1
	 }
d109 1
a109 1
	 {
d111 1
a111 1
	 }
d113 1
a113 1
	 {
d115 1
a115 1
           sprintf(outstr,"  col. inside image: %d .", iyi);
d119 4
a122 4
	     {
               /* erase old bar */
               xorline(iwin,icontxm,FALSE,ix2,iy2,ix3,iy3);
	     }
d131 1
a131 1
	 }
d133 1
a133 1
	 {
d135 1
a135 1
           sprintf(outstr,"  row inside image: %d .", ixi);
d139 1
a139 1
	     {
d142 1
a142 1
	     }
d151 2
a152 2
	 }
     }
d155 1
a155 1
     {
d164 1
a164 1
	 {
d167 1
a167 1
	 }
d169 1
a169 1
	 {
d172 1
a172 1
	 }
d174 1
a174 1
	 {
d176 1
a176 1
           sprintf(outstr,"  col. inside image: %d .", iyi);
d180 5
a184 5
	     {
               /* erase old bar */
               xorline(iwin,icontxm,FALSE,ix2,iy2,ix3,iy3);
               first = TRUE;
	     }
d186 3
a188 3
	     {
               /* draw a permanent line at this level */
               xorline(iwin,icontxm,TRUE,ixul,iy1,ixul+nsam-1,iy1);
d190 3
a192 3
               /* save bar in backing store */
               xorline(imagsav,icontxm,TRUE,ixul,iy1,ixul+nsam-1,iy1);
	     }
d199 1
a199 1
	 }
d201 1
a201 1
	 {
d203 1
a203 1
           sprintf(outstr,"  row inside image: %d .", ixi);
d207 5
a211 5
	     {
               /* erase old bar */
               xorline(iwin,icontxm,FALSE,ix2,iy2,ix3,iy3);
               first = TRUE;
	     }
d213 3
a215 3
	     {
               /* draw a permanent line at this level */
               xorline(iwin,icontxm,TRUE,ix1,iyul,ix1,iyul+nrow-1);
d217 3
a219 3
               /* save bar in backing store */
               xorline(imagsav,icontxm,TRUE,ix1,iyul,ix1,iyul+nrow-1);
	     }
d223 5
a227 5
           if(buft == (float *) NULL)
             {
               spout("*** Warning: calloc() can't allocate heap memory space");
               return;
	     }
d232 5
a236 5
	     {
               irec = (islice - 1) * nrow + irow;
               redlin(filedata,buf,nsam,irec);
               buft[irow] = buf[ixi];
	     }
d241 2
a242 2
	 }
     }                                        /* button 1 */
d245 1
a245 1
     {
d248 1
a248 1
     }
d251 1
a251 1
     {
d254 1
a254 1
     }
d271 1
a271 1
     {
d276 5
a280 5
	 {
           bufmax = MAX(bufmax, buf[i]);
           bufmin = MIN(bufmin, buf[i]);
	 }
     }
d282 1
a282 1
     {
d286 1
a286 1
     }
d289 1
a289 4
     {
       spout(" *** NULL PROFILE");
       return;
     }
d304 1
a304 1
     {
d309 1
a309 1
         xorline(imagsav,icontxm,TRUE, ixori, iyori, ixend, iyori);
d314 1
a314 1
         itick = 1;
d316 1
a316 1
         itick = 10;
d319 1
a319 1
	 {
d324 2
a325 2
	 }
     }
d328 1
a328 1
     {
d348 1
a348 1
     }
d355 5
a359 5
       {
         ix = i * hscale + ixori;
         iy = iyori - ((buf[i] - bufmin) * vscale);
         xorline(iwin,icontxm,TRUE, ixgo, iygo, ix, iy);
         if (permbar)
d361 3
a363 3
         ixgo = ix;
         iygo = iy;
       }
d367 1
@
