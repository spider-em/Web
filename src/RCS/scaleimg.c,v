head	1.5;
access;
symbols
	pre-tilt-improve:1.5
	pre_surf_fromtop:1.5
	pre_neednewmap:1.5
	pre_apppluss_remove:1.5
	pre_tiltpair_chng:1.5
	pre_GPL:1.4;
locks;
comment	@ * @;


1.5
date	2005.10.18.16.59.51;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.07.29.15.05.36;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	95.09.14.18.31.56;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.05.12.12.40.52;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.12.09.10.58.31;	author leith;	state Exp;
branches;
next	;


desc
@@


1.5
log
@GPL
@
text
@
/*$Header: /net/ithaca/usr1/web/src/RCS/scaleimg.c,v 1.4 1999/07/29 15:05:36 leith Exp $*/

/***********************************************************************
 *
 * scaleimg.c
 *
 ***********************************************************************
 * author : ArDean Leith
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
 ***********************************************************************
 *
 * scaleimg()
 * 
 * PURPOSE:  scales a floating point into 8 bit over range nmint..nmaxt.
 *
 * RETURNS:  true or false
 *
 * PARAMETERS:
 *
 * NOTES: I removed old if (ival > 128 code see previous RCS versions 
 *        to reinstate code if desired. july 99 al 
 *        also removed memory allocation.
 *
 ***********************************************************************
*/

#include "std.h"
#include "routines.h"

 /* externally defined variables */
 extern int imagego, imageend;        /* set norm. range for image */

 /****************************  scaleimg  *****************************/
 
 int scaleimg(float * oldimage, int nsam,   int nrow, 
                                int iskipt, int newmin,
                                float scal, float offset,
                                char * cptr)
 { 
 char   *cbuf;
 int    nsams, nrows, npixpimg, ival, miskip, idum;
 int    irow, isam;
 char   ctemp;
 float  * fptrt, *fptrtt;
 char   * cptrt, *cptrtt;

 /* find number of rows & cols in displayed image */
 dispsize(1,nsam, 1,nrow, 1,1, iskipt,&nsams, &nrows, &idum);

 /* set temporary data pointers */
 cptrt = cptr;

 npixpimg = nsam * nrow;

 if (iskipt > -2 && iskipt < 2)
    {    /*******************************************full size */
    if (newmin)
       { /* want to alter min & max  definition*/
       for (fptrtt = oldimage; fptrtt < oldimage+npixpimg; fptrtt++)
          {
          ival     = (char) (*fptrtt * scal + offset);
          *cptrt++ = MYMIN(MYMAX(ival,imagego),imageend);
          }  /* for isam           */
       }     /* if (newmin         */
    else
       {  
       for (fptrtt = oldimage; fptrtt < oldimage+npixpimg; fptrtt++)
          {
          *cptrt++ = (char) (*fptrtt * scal + offset);
          }       /* for (isam   */
       }          /* not newmin  */
    }             /* if (iskipt > -2 && iskipt < 2)  */

 else if (iskipt > 1)     
    {    /********************************* reduced size image */
    for (irow = 0 ; irow < nrow; irow+=iskipt)
       {
       fptrtt = oldimage + (irow * nsam);
       for (isam = 0; isam < nsam; isam+=iskipt)
          {  
          ival    = (char) (*fptrtt * scal + offset);
          fptrtt += iskipt;
                if (newmin)
             { /* want to alter min & max  definition*/
             *cptrt++ = MYMIN(MYMAX(ival,imagego),imageend);
             }  
          else
             {
             *cptrt++ = ival;
             }  
          }     /* for (isam = 0   */
       }        /* for (irow = 0   */
    }           /* if (iskipt > 1) */

 else if (iskipt < -1)
    {    /******************************* magnified size image */

    fptrtt = oldimage;
    for (irow = 0 ; irow < nrow; irow++)
       {
       cptrtt = cptrt;
       for (isam = 0 ; isam < nsam; isam++)
          {
          ival = (char) (*fptrtt * scal + offset);
          fptrtt++;
          if (newmin)
             { /* want to alter min & max  definition*/
             ctemp = MYMIN(MYMAX(ival,imagego),imageend);
             } 
          else
             {
             ctemp = ival;
             }
          /* calculate and insert first row */
          for (miskip = 0 ; miskip < -iskipt; miskip++)
             {  /* duplicate this pixel miskip times */
             *cptrt++ = ctemp;
             }
          }     /* (isam = 0 ; isam < nsam; isam++) */

       /* duplicate the row miskip -1 times now */
       for (miskip = 1 ; miskip < -iskipt; miskip++)
          {  /* duplicate this row miskip times */
          for (isam = 0 ; isam < nsam*(-iskipt); isam++)
             {
             *cptrt++ = *(cptrtt+isam);
             } /* for (isam = 0 ; isam < nsam*(-iskipt) */
 
          }    /* for (miskip = 1 ; miskip < -iskipt;   */
       }       /* (irow = 0 ; irow < nrow; irow++) */
    }          /* if (iskipt < -1) */

 return TRUE;
 }

@


1.4
log
@removed allocation & scaling setting
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/scaleimg.c,v 1.3 1995/09/14 18:31:56 mladjadj Exp leith $*/
d10 23
a32 6
 * COPYRIGHT (C)1993, WADSWORTH CENTER FOR LABORATORIES AND
 * RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      
 * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     
 * LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  
 * USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF 
 * THE CENTER FOR LABORATORIES AND RESEARCH 			  
@


1.3
log
@set idum before use to  zero
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/scaleimg.c,v 1.2 1994/05/12 12:40:52 leith Exp mladjadj $*/
d24 1
a24 1
 * PARAMETERS: 
d26 4
d36 3
d41 4
a44 5
 int scaleimg(float * oldimage, int nsam, int nsam1, int nsam2, 
                                int nrow, int nrow1, int nrow2,
                                float fmin, float fmax, int iskip,
                                int   nmint, int   nmaxt,
                                char ** cptr)
a45 1

d47 5
a51 23
 int    nsams, nrows, npix, ival, miskip;
 int    j, m, ix,iy, nrowu, idum=0;
 float  scal, fm;

 if (fabs(fmax - fmin) < FLTZER)
    { spout("*** BLANK IMAGE SKIPPED"); return FALSE; }


 /* find number of rows in displayed image */
 dispsize(nsam1,nsam2, nrow1,nrow2, idum,idum, iskip,
         &nsams, &nrows, &idum);

 if (!(*cptr))
    {  /* must allocate space for cbuf */
    if ((*cptr = (char *) malloc(nsams * nrows * sizeof(char))) 
               == (char *) 0)
       { 
       spout(" *** Unable to allocate memory in scaleimg.c");
       return FALSE;
       }
    }
 /* set temporary data pointers */
 cbuf = *cptr;
d53 2
a54 3
 /* CONVERSION FACTOR FROM FLOATING POINT TO LOGICAL * 1 RANGE */
 scal = (float) (nmaxt - nmint) / (fmax - fmin);
 fm   = -fmin * scal + nmint + 0.5;
d56 2
a57 1
 npix = 0;
d59 1
a59 2
 if (iskip > -2 && iskip < 2)
    {    /* display normal full size */
d61 22
a82 1
    for (iy = nrow1-1; iy < nrow2; iy++)
d84 16
a99 20
       if (nmaxt < 128) 
           {   /* no need to convert numbers > 128 */   
           for (ix = nsam1 - 1; ix < nsam2; ix++)
              {
              ival = (*(oldimage + nsam * iy + ix) * scal) + fm;
              *(cbuf + npix++) = ival;
              }
           }
       else
           {   /* need to convert numbers > 128 */   
           for (ix = nsam1 - 1; ix < nsam2; ix++)
              {
              ival = (*(oldimage + nsam * iy + ix) * scal) + fm;
              /* convert 0..255  integers to -128...127 */
              if (ival > 127) ival = ival - 256;
              *(cbuf + npix++) = ival;
              }
           }
       }
    }
d101 2
a102 2
 else if (iskip > 1)
    {    /* display reduced size image */
d104 2
a105 3
    nrowu = nrow2 - (nrow2-nrow1+1) % iskip - iskip + 1;

    for (iy = nrow1-1; iy <= nrowu; iy=iy + iskip)
d107 31
a137 62

       if (nmaxt < 128) 
           {   /* no need to convert numbers > 128 */   
           for (iy = nsam1 - 1; iy < nsam2; iy = iy + iskip)
              {
              ival = (*(oldimage + nsam * iy + ix) * scal) + fm;
              *(cbuf + npix++) = ival;
              }
           }
       else
           {   /* no need to convert numbers > 128 */   
           for (ix = nsam1 - 1; ix < nsam2; ix++)
              {
              ival = (*(oldimage + nsam * iy + ix) * scal) + fm;
              /* convert 0..255  integers to -128...127 */
              if (ival > 127) ival = ival - 256;
              *(cbuf + npix++) = ival;
              }
           }
       }
    }


 else if (iskip < -1)
    {    /* display magnified size image */
    miskip = -iskip;

    for (iy = nrow1-1; iy < nrow2; iy++)
       {
       if (nmaxt < 128) 
           {   /* no need to convert numbers > 128 */   
           for (ix = nsam1 - 1; ix < nsam2; ix = ix++)
              {
              ival = (*(oldimage + nsam * iy + ix) * scal) + fm;

              for (j = 0; j < miskip ; j++)
                 {
                 for (m = 0; m < miskip; m++)
                   *(cbuf + npix + m * nsams + j) = ival;
                 }
              npix = npix + miskip;
              }
           }
       else
           {   /* need to convert numbers > 128 */   
           for (ix = nsam1 - 1; ix < nsam2; ix++)
              {
              ival = (*(oldimage + nsam * iy + ix) * scal) + fm;
              /* convert 0..255  integers to -128...127 */
              if (ival > 127) ival = ival - 256;

              for (j = 0; j < miskip ; j++)
                 {
                 for (m = 0; m < miskip; m++)
                   *(cbuf + npix + m * nsams + j) = ival;
                 }
              npix = npix + miskip;
              }
           }
        npix = (iy - nrow1 + 1) * miskip * nsams - 1;
        }
    }
d140 1
a140 1
}
@


1.2
log
@ used imagego...imageend
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web/src/RCS/scaleimg.c,v 1.1 93/12/09 10:58:31 leith Exp Locker: leith $*/
d43 1
a43 1
 int    j, m, ix,iy, nrowu, idum;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*$Header$*/
d20 1
a20 1
 * PURPOSE:    scales a floating point into 8 bit over range nmin..nmax.
d22 1
a22 1
 * RETURNS:    true or false
d30 1
a31 8
 /* external function prototypes */
 extern void     spout       (char *);
 extern void     dispsize    (int,  int, int,  int, int, int, int,
                              int *, int *, int *);

 /* external common variables */
 

d37 1
a37 1
                                int   nmin, int   nmax,
d67 2
a68 2
 scal = (float) (nmax - nmin) / (fmax - fmin);
 fm   = -fmin * scal + nmin + 0.5;
d77 1
a77 1
       if (nmax < 128) 
d106 1
a106 1
       if (nmax < 128) 
d134 1
a134 1
       if (nmax < 128) 
@
