head	1.22;
access;
symbols
	pre-tilt-improve:1.21
	pre_surf_fromtop:1.21
	pre_neednewmap:1.21
	pre_apppluss_remove:1.21
	pre_tiltpair_chng:1.21
	pre_GPL:1.18;
locks;
comment	@ * @;


1.22
date	2018.12.07.17.03.33;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2007.11.28.16.18.14;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2007.11.01.19.33.45;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.18.16.59.51;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.03.19.36.10;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2000.07.06.14.47.01;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2000.06.29.15.49.09;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	98.03.05.17.16.17;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	98.03.05.17.05.27;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	96.04.01.21.39.37;	author mladjadj;	state Exp;
branches;
next	1.12;

1.12
date	95.08.07.20.21.40;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	95.02.21.20.53.46;	author liy;	state Exp;
branches;
next	1.10;

1.10
date	95.02.10.22.11.24;	author liy;	state Exp;
branches;
next	1.9;

1.9
date	95.01.31.14.01.17;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	95.01.25.19.50.43;	author mladjadj;	state Exp;
branches;
next	1.7;

1.7
date	94.11.17.17.11.57;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	94.11.17.15.29.44;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	94.11.10.16.12.34;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	94.09.02.15.39.11;	author odesanya;	state Exp;
branches;
next	1.3;

1.3
date	94.03.01.14.39.00;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.02.28.16.27.09;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.10.10.11.04;	author leith;	state Exp;
branches;
next	;


desc
@@


1.22
log
@bollingers_email_and_cosmetic
@
text
@
/*$Header: /usr8/web/src/RCS/opennew.c,v 1.21 2007/11/28 16:18:14 leith Exp $*/
/*
 * opennew.c
 *
 *
 *************************************************************************
 * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK 
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
 **************************************************************************
 *
 * opennew(FILNAM,NSAM,NROW,NSLICE,IFORM,DISP)
 *
 * PURPOSE:     TO CREATE A NEW SPIDER DATA FILE FOR RANDOM ACCESS IO
 *
 * PARAMETERS:     FILNAM     CHARACTER ARRAY, CONTAINING FILE NAME 
 *      LUN        LOGICAL UNIT NUMBER TO BE ASSIGNED TO FILNAM.
 *      NSAM,NROW  DIMENSIONS OF FILE - INPUT OR OUTPUT PARAMETERS
 *                 OF OPEN, DEPENDING ON DISP.
 *      DISP       CHARACTER CONTAINING ONE OF THE FOLLOWING 
 *                 DISPOSITION SPECIFICATIONS:
 *
 *                  U -         IT IS NOT KNOWN IF THE FILE EXISTS.  
 *                              IF IT DOES NOT EXIST, NON-ZERO NSAM AND
 *                              NROW VALUES HAVE TO BE AVAILABLE; THE
 *                              FILE IS CREATED WITH THESE DIMENSIONS.
 *                              IF THE FILE ALREADY EXISTS, IT WILL BE 
 *                              OVERWRITTEN. 
 *
 *        NF                    ERROR RETURN FLAG.
 *                              NF = 0    NORMAL RETURN 
 *                              NF = 1    ERROR RETURN
 *
 *	 NSLICE	                NUMBER OF PLANES, EACH CONTAINING NSAM*NROW 
 *                              ELEMENTS. 
 *
 *    VARIABLES:   IFORM  = FILE TYPE SPECIFIER. 
 *                        = +3    3-D IMAGE
 *	                  = +1    2-D IMAGE
 *                        = -1    2-D FOURIER TRANSFORM
 *                        = -3    3-D FOURIER TRANSFORM
 *                        = +8    8 BIT BLACK AND WHITE IMAGE
 *                        = 11    8 BIT COLOR IMAGE
 *
 *   NOTE:         opennew does not set a title in the file nor does
 *                 it set angles in the file (unlike fortran version)
 *
 *********************************************************************/

#include "files.h"
#include "routines.h"

 /* external file prototypes */


/*************************  opennew  ****************************/


 FILEDATA *opennew(char * filnam, int nsam, int nrow, int nslice, 
                    int iform, char disp[]) 
 { 

 /* header union for equivalencing floating point and character buffers */
 union  BUFFER 
        {
        float hbuf[256];
        char  cbuf[1024];
        } header;


 FILEDATA * fileptr;
 time_t     now;
 char     * datentime ,type[4], output[80];
 FILE     * fp;
 int        nlabel,reclen,headrec,headbyt;
 int        k,imami,iangle,k1;
 
 if (strcmp(disp,"u") != 0 && strcmp(disp,"n") != 0) 
    { spout(" *** Invalid disp in opennew"); return 0; }

 if (strcmp(disp,"n") == 0 && (fp = fopen(filnam,"rb")) != NULL)
    {spout(" *** New file already exists"); fclose(fp); return 0;}

 /* open the file */
 if ((fp = fopen(filnam,"w+b")) == NULL) 
    { spout(" *** Unable to open new file"); return 0; } 

 if (nsam == 0 || nrow == 0) 
     /*   for new files, non-zero nsam, nrow need to be supplied  */
     {spout(" ***  Need size info to open file."); return 0; }     

 else if (nslice == 0) 
     {
     /*   new files need a non zero slice number for file format flag */
     spout(" Warning:  nslice set to 1.");
     nslice = 1;
     }

 else if (nslice < 0) 
     {
     /*   want to create an short label format file  */
     spout(" Warning:  short label files no longer  supported.");
     nslice = -nslice;
     }
       
 /*adjust number of header records to have >= 256*4 bytes in header */

 if (iform < 6)
     /*   standard SPIDER floating point files */
     reclen = nsam * 4;

 else if (iform == 8)
     /*   for 8 bit files     */
     reclen = nsam ;

 else if (iform == 10)
     /*   pixel by pixel 8 bit color image file  */
     reclen = nsam * 3;

 else if (iform == 11)
     /*   color by color 8 bit color image file  */
     reclen = nsam * 3;

 else if (iform == 12)
     /*   8 bit runlength color file */
     reclen = nsam * 4;

 else if(iform == 16)
     /*   for 16 bit integer files */
     reclen = nsam * 2;

 else 
     { spout(" *** UNKNOWN IFORM IN OPENNEW"); return 0; }

 /* allocate space for a spider file structure */
 fileptr = (FILEDATA *) malloc(sizeof(FILEDATA));

 if (fileptr == (FILEDATA *) 0) 
     { spout(" *** Unable to allocate memory in opennew."); 
        printf(" *** Unable to allocate memory in opennew.\n");
        return 0; }

 fileptr -> fp = fp;
 
 /* set number of header records and length of header */
 headrec = 1024 / reclen;
 if ((1024 % reclen) != 0) headrec = headrec + 1;
 headbyt = headrec * reclen;

 header.hbuf[0] = -nslice;
 header.hbuf[1] = nrow;
 header.hbuf[2] = headbyt;
 nlabel         = 0;
 header.hbuf[3] = nlabel;
 header.hbuf[4] = iform;
 imami          = 0;
 header.hbuf[5] = imami;

 /*     zero unused buf variables */
 for (k = 5; k < 212 ;k++)
          header.hbuf[k] = 0.0;

 header.hbuf[11] = nsam;
 header.hbuf[12] = headrec;

 /* angles are not set in opennew */
 iangle = 0;
 header.hbuf[13] = iangle;
 header.hbuf[14] = 0.0;
 header.hbuf[15] = 0.0;
 header.hbuf[16] = 0.0;

 header.hbuf[21] = headbyt;
 header.hbuf[22] = reclen;

 fileptr -> offset  = 0;
 fileptr -> nsam    = nsam;
 fileptr -> nrow    = nrow;
 fileptr -> nslice  = nslice;
 fileptr -> nlabel  = nlabel;
 fileptr -> iform   = iform;
 fileptr -> flip    = 0;
 fileptr -> imami   = imami;
 fileptr -> fmin_spi    = 0.0;
 fileptr -> fmax_spi    = 0.0;
 fileptr -> av      = 0.0;
 fileptr -> sig     = 0.0;
 fileptr -> headrec = headrec;
 fileptr -> headbyt = headbyt;
 fileptr -> reclen  = reclen;
 fileptr -> iangle  = iangle;

 /* find current date and time */
 now       = time(0);
 datentime = ctime(&now);

 /* set date for file header */
 strncpy(&header.cbuf[844],datentime + 8,  2);
 header.cbuf[846] = '-';
 strncpy(&header.cbuf[847],datentime + 4,  3);
 header.cbuf[850] = '-';
 strncpy(&header.cbuf[851],datentime + 20, 4);
 header.cbuf[855] = ' ';

 /* set date in current file information */
 strncpy(fileptr -> date, &header.cbuf[844],11);
 fileptr -> date[11] = '\0';

 /* set time in file header */
 strncpy(&header.cbuf[856],datentime + 11, 8);
 header.cbuf[864] = '\0';

 /* set time in current file information */
 strncpy(fileptr -> time, &header.cbuf[856],9);

 /* initialize ximage pointer */
 fileptr -> ximage = NULL;

 /* write header to open file */

 if (wrtlin(fileptr,header.hbuf,256,0) != TRUE)
    { closefile(fileptr); return 0; }

 if ((fileptr -> buf = (float *) malloc(nsam * sizeof(float))) == 
     (float *) 0) 
     {     
     spout(" *** Unable to allocate read/write buffer in opennew.");
     closefile(fileptr); return 0;
     }
 
 /* print file opening information */
 if (iform == -1)
     strcpy(type,"f ");
 else if (iform == -11)
     strcpy(type,"fo");
 else if (iform == -12)
     strcpy(type,"fe");
 else if (iform == -21)
     strcpy(type,"3fe");
 else if (iform == -22)
     strcpy(type,"3fe");
 else if (iform == 0)
     strcpy(type,"d ");
 else if (iform == 3)
     strcpy(type,"r3");
 else if (iform == 8)
     strcpy(type,"8 ");
 else if (iform == 16)
     strcpy(type,"16");
 else
     strcpy(type,"r ");

 /* print filename */
 sprintf(output," %s",filnam);
 spout(output);
     
 /* print file parameters */
 if (nslice > 1)
     {
     sprintf(output," (%s) %d %d %d  New: %s At %s  Header bytes: %d",
           type, nsam, nrow, nslice, fileptr -> date, fileptr -> time, headbyt);
     spout(output);
     }
 else
     {
     sprintf(output," (%s) %d %d     New: %s At %s  Header bytes: %d",
           type, nsam, nrow, fileptr -> date, fileptr -> time, headbyt);
     spout(output);
     }

 return fileptr;

}
@


1.21
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /net/bali/usr1/web/src/RCS/opennew.c,v 1.20 2007/11/01 19:33:45 leith Exp $*/
d73 1
a75 3
 extern   int    wrtlin(FILEDATA *, float *, int, int);
 extern   int    closefile(FILEDATA *);
 extern   void   spout(char *);
d95 1
a95 1
 char     * datentime ,type[3], output[80];
@


1.20
log
@fmin ->fmin_spi..
@
text
@d2 1
a2 1
/*$Header: /net/bali/usr1/web/src/RCS/opennew.c,v 1.19 2005/10/18 16:59:51 leith Exp $*/
a72 3

 /* external common variables */
 extern   float  fmin_spi,fmax_spi;
@


1.19
log
@GPL
@
text
@d2 1
a2 1
/*$Header: /net/bali/usr1/web/src/RCS/opennew.c,v 1.18 2003/03/03 19:36:10 leith Exp $*/
d75 1
a75 1
 extern   float  fmin,fmax;
d211 2
a212 2
 fileptr -> fmin    = 0.0;
 fileptr -> fmax    = 0.0;
@


1.18
log
@endedness
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/opennew.c,v 1.17 2000/07/06 14:47:01 leith Exp $*/
d9 23
a31 6
 * COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND
 * RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
 * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     
 * LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  
 * USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF 
 * THE CENTER FOR LABORATORIES AND RESEARCH 			  
@


1.17
log
@needed to change header irec on first wrtlin
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/opennew.c,v 1.16 2000/06/29 15:49:09 leith Exp leith $*/
a64 8
#ifdef P_SGIOSF
unsigned int *pt;
#define CONVERT_4( A, B )                        \
             (unsigned int)(A) =                 \
            ((unsigned int)(B) >> 24) |          \
            ((unsigned int)(B) << 24) |          \
           (((unsigned int)(B) >> 8) & 0xff00) | \
           (((unsigned int)(B) << 8) & 0xff0000)
a65 2
#endif

d192 1
a228 11
/*   DEC OSF/1 with files written in IEEE standard        
     to allow portability to other Unix machines */ 

#ifdef P_SGIOSF
   pt = (unsigned int *) &header.hbuf[211];
   
   /* flip the bytes for date and time in header */
   for (k1 = 211; k1 <= 216 ; k1++, pt++)
      { CONVERT_4(*pt,*pt);  }
#endif 

a243 8
 else if (iform == -2)
     strcpy(type,"p ");
 else if (iform == -3)
     strcpy(type,"f3");
 else if (iform == -7)
     strcpy(type,"fq");
 else if (iform == -9)
     strcpy(type,"fs");
d248 4
a257 6
 else if (iform == 10)
     strcpy(type,"cp");
 else if (iform == 11)
     strcpy(type,"cc");
 else if (iform == 12)
     strcpy(type,"cr");
a261 1

@


1.16
log
@bug if norm called without buf allocation
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/opennew.c,v 1.15 1998/03/05 17:16:17 leith Exp $*/
d251 1
a251 1
 if (wrtlin(fileptr,header.hbuf,256,1) != TRUE)
@


1.15
log
@removed param
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/opennew.c,v 1.14 1998/03/05 17:05:27 leith Exp leith $*/
d19 1
a19 1
 * PURPOSE:     TO CREATE A NEW SPIDER DATA FILE FOR RANDOM ACCESS io
a55 3
#ifdef VMS
#include <unixio.h>
#endif
a93 1
 float    * buf;
d96 1
a96 2
 int        i,k,imami,iangle,ot,k1,tsam, ptr_ok;
 float    * ptr, * ptrf;
a104 6
#ifdef VMS
 /* mrs=n maximum record size , rfm= fixed length record format */
 sprintf(output,"mrs=%d",nsam*sizeof(float));
 if (( fp = fopen(filnam,"w+b",output,"rfm=fix")) == NULL)
    { spout(" *** Unable to open new file"); return 0; } 
#else
a106 1
#endif
d126 1
a126 1
 /*adjust number of header records to have 256*4 bytes in header */
d129 1
a129 1
     /*   standard spider floating point files */
a195 1

d238 2
a239 8
#ifdef NEVER
 /* title is not set in opennew **************************/
 if ((lentitle = strlen(ctitle)) > 0)
    {    /* title in use */
    strncpy(&header.cbuf[864], ctitle, lentitle);
    strncpy(fileptr -> title,  ctitle, lentitle);
    }
#endif
a240 4
/*
          DEC OSF/1 with files written in IEEE standard        
          to allow portability to other unix machines  
*/ 
a249 33
#ifdef VMS
   /* VAX VAX VAX VAX VAX VAX VAX VAX VAX VAX VAX VAX VAX VAX VAX VAX */
   /* we need to make sure that the complete header is written. however
      wrtlin accepts only records of size nsam*sizeof(float) in which we
      have opened the file fp.  so copy the record into a new memory
      having a multiple number the size of nsam*sizeof(float) that will
      hold the complete header 
   */
   ptrf = header.hbuf;  ptr_ok = 0;
   if ( (headrec * nsam) > 256) 
      {
      /* the last record written will have a number of items less than
         nsam so we will try to write from beyond the end of header.hbuf.
      */
      if ( (ptrf = (float *) malloc(headrec * nsam * sizeof(float))) == (float *) NULL )
         {
	  printf(" can not malloc memory in openenw.c \n");
	  closefile(fileptr); return 0; 
	 }
       ptr_ok = 1;
       memcpy((void *) ptrf,(void *)header.hbuf, 256 * sizeof(float)); 	 
      }
   
   for (k1=1; k1 <= headrec ; k1++)
       {
       if (wrtlin(fileptr, ptrf, nsam, k1) != TRUE)
          { closefile(fileptr); return 0; }
       ptrf += nsam;
       }
       
   if(ptr_ok) free(ptrf);
    
/* VAX VAX VAX VAX VAX VAX VAX VAX VAX  VAX VAX VAX VAX VAX VAX VAX */
d251 1
a251 2
#else
   if (wrtlin(fileptr,header.hbuf,256,1) != TRUE)
a252 1
#endif
a253 3
 /* set offset for reading image data from file in future */
 fileptr -> offset = headbyt;

a292 1
 
@


1.14
log
@removed ihist
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/opennew.c,v 1.13 1996/04/01 21:39:37 mladjadj Exp leith $*/
a61 1
 extern   float  param[102];
a372 9


 param[2] = nsam;
 param[3] = nrow;
 param[4] = 0.0;
 param[5] = 0.0;
 param[6] = 0.0;
 param[7] = 0.0;
 param[8] = nslice;
@


1.13
log
@fixed the writing of image header for vax non-alpha
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/opennew.c,v 1.12 1995/08/07 20:21:40 leith Exp $*/
a220 1
 fileptr -> ihist   = 0;
@


1.12
log
@added ximage pointer to filedata
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/opennew.c,v 1.11 1995/02/21 20:53:46 liy Exp leith $*/
d56 3
a58 5
/*   #ifdef P_SGIOSF   */
/*   #include <cvt.h>  */
/*    int cvt_ftof( void *, int, void *, int, int);  */
/*   #endif   */

d101 3
a103 3
 int        i,k,imami,iangle,ot,k1;
 float    * ptr;
     
d112 1
d135 1
a135 1
     spout(" Warning:  short label files no longer supported.");
d171 4
a174 2
 if (fileptr == 0) 
     { spout(" *** Unable to allocate memory in opennew."); return 0; }
d177 1
a177 2


d262 3
a264 2
/*        DEC OSF/1 with files written in IEEE standard        
**        to allow portability to other unix machines  
a265 15
/*    #ifdef P_SGIOSF     */
/*     for (k1 = 211; k1 <= 216 ; k1++)     */
/*           {     */
               /*  date,time only if title is added
               **  increase the for loop           
               */    
/*           ot = cvt_ftof(&header.hbuf[k1], CVT_BIG_ENDIAN_IEEE_S,     */
/*                         &header.hbuf[k1], CVT_IEEE_S, 0);     */ 
/*          if (ot)       */
/*              {     */
           /* ot=0 success */
/*         printf(" Conversion cvt_ftof of float %d has failed !!\n",k1);     */
/*               }     */
/*           }     */
/*    #endif      */
d268 1
d274 34
d309 2
a310 2
 /* write header to open file */
 if (wrtlin(fileptr,header.hbuf,256,1) != TRUE)
d312 1
@


1.11
log
@changed the size of param[]
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/opennew.c,v 1.10 1995/02/10 22:11:24 liy Exp liy $*/
d250 2
@


1.10
log
@fixed wrtlin() fail for nsam>256
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/opennew.c,v 1.9 1995/01/31 14:01:17 leith Exp liy $*/
d64 1
a64 1
 extern   float  param[103];
@


1.9
log
@fixed undefined nlabel
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/opennew.c,v 1.8 95/01/25 19:50:43 mladjadj Exp Locker: leith $*/
a179 1
 if (headrec < 1) headrec = 1;
@


1.8
log
@ alpha/osf add CONVERT_$ macro to flip bytes faster
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/opennew.c,v 1.7 1994/11/17 17:11:57 mladjadj Exp $*/
d187 1
@


1.7
log
@added if defined(__osf__) && defined()
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/opennew.c,v 1.6 1994/11/17 15:29:44 mladjadj Exp mladjadj $*/
d56 4
a59 2
#if defined(__osf__) && defined(osf_ieee)
#include <cvt.h>
a60 3
 int cvt_ftof( void *, int, void *, int, int);
#endif

d71 10
d263 21
a283 12
#if defined(__osf__) && defined(osf_ieee)
    for (k1 = 211; k1 <= 216 ; k1++)
       {     /*  date,time only if title is added
             **  increase the for loop           
             */
       ot = cvt_ftof(&header.hbuf[k1], CVT_BIG_ENDIAN_IEEE_S,
                     &header.hbuf[k1], CVT_IEEE_S, 0);
       if (ot)     /* ot=0 success */
           printf(" Conversion cvt_ftof of float %d has failed !!\n",k1);
       }
#endif
    
@


1.6
log
@fixed ifdef for cpp
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/opennew.c,v 1.5 1994/11/10 16:12:34 mladjadj Exp mladjadj $*/
d56 1
a56 1
#ifdef  __osf__ && osf_ieee
d254 1
a254 1
#ifdef __osf__ && osf_ieee
@


1.5
log
@add cpp switch __osf__ for DEC/OSF1 alpha machines
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/opennew.c,v 1.4 1994/09/02 15:39:11 odesanya Exp $*/
d56 1
a56 1
#if  __osf__ && osf_ieee
d254 1
a254 1
#if __osf__ && osf_ieee
@


1.4
log
@corrected header record information writing
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/opennew.c,v 1.3 1994/03/01 14:39:00 leith Exp odesanya $*/
d56 2
d59 4
d94 1
a94 1
 int        i,k,imami,iangle;
d241 1
d250 17
@


1.3
log
@sets record length on vax
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/opennew.c,v 1.2 94/02/28 16:27:09 leith Exp Locker: leith $*/
d166 1
a166 1
 if ((1024 % headrec) != 0) headrec = headrec + 1;
@


1.2
log
@failure not said openold
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/opennew.c,v 1.1 93/11/10 10:11:04 leith Exp Locker: leith $*/
d98 5
d105 1
a106 1

d169 1
a169 1
 header.hbuf[0] = nslice;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*$Header$*/
d153 1
a153 1
     { spout(" *** Unable to allocate memory in openold."); return 0; }
@
