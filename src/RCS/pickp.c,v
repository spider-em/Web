head	1.35;
access;
symbols
	pre-tilt-improve:1.30
	pre_surf_fromtop:1.29
	pre_neednewmap:1.29
	pre_apppluss_remove:1.29
	pre_tiltpair_chng:1.28
	pre_GPL:1.27;
locks;
comment	@ * @;


1.35
date	2015.09.24.15.12.57;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2015.09.22.16.34.08;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2015.09.18.16.19.05;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2015.09.10.13.17.36;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2015.09.01.17.53.42;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2015.06.11.13.24.37;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2011.06.22.19.14.46;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2005.10.18.16.59.44;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	96.05.01.16.13.47;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	96.04.16.14.27.13;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	96.04.12.16.25.17;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	96.04.05.16.48.41;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	96.03.25.14.43.22;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	96.03.19.14.15.48;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	95.09.06.16.21.56;	author mladjadj;	state Exp;
branches;
next	1.20;

1.20
date	95.08.16.18.04.51;	author mladjadj;	state Exp;
branches;
next	1.19;

1.19
date	95.08.14.16.58.38;	author mladjadj;	state Exp;
branches;
next	1.18;

1.18
date	95.08.08.15.40.02;	author mladjadj;	state Exp;
branches;
next	1.17;

1.17
date	94.07.05.16.11.25;	author odesanya;	state Exp;
branches;
next	1.16;

1.16
date	94.06.06.11.26.25;	author odesanya;	state Exp;
branches;
next	1.15;

1.15
date	94.06.01.14.06.38;	author odesanya;	state Exp;
branches;
next	1.14;

1.14
date	94.05.27.18.47.59;	author odesanya;	state Exp;
branches;
next	1.13;

1.13
date	94.05.23.11.10.23;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	94.05.19.17.12.24;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	94.04.25.10.58.51;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	94.04.12.15.46.26;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	94.04.12.13.50.10;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	94.04.12.12.08.34;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	94.04.07.13.45.51;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	94.03.29.15.10.31;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	94.03.28.12.30.41;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	94.03.21.12.22.26;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	93.11.29.10.35.33;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	93.11.22.16.54.44;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.16.14.13.47;	author leith;	state Exp;
branches;
next	;


desc
@@


1.35
log
@better error msg if off screen
@
text
@
/*$Header: /usr8/web/src/RCS/pickp.c,v 1.34 2015/09/22 16:34:08 leith Exp $*/

/*
 C**********************************************************************
 C                                                                     *
 C pickp.c                                                             *
 C               Improved                        Jun 2011 ArDean Leith *
 C               Can start pick either side      Jun 2015 ArDean Leith *
 C               Altered particle deletion       Jul 2015 ArDean Leith *
 C               Altered ouput messages          Aug 2015 ArDean Leith *
 C                                                                     *
 C**********************************************************************
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2015  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
 C**********************************************************************
 *
 * pickp
 * 
 * PURPOSE:     Interactive tilt-pair particle selecting      
 * 
 * PARAMETERS:	 
 *
 * VARIABLES:   xim       Imaged number             dfil1 + 2
 *              xu0,yu0   Untilted picked points    dfil1
 *              xs,ys     Tilted picked points      dfil2
 *              xs2,ys2   Tilted predicted points   
 *
 C**********************************************************************
*/

#include "common.h"
#include "routines.h"

 /* External function prototypes */
 extern int       det_tilt      (int wantmsg, int wantlabel);                            /* From pickmen */
 extern void      witran_rev    (float *, float *, float, float,int,float,float, float); /* From witran */
 extern int       fitdoc_addpart(int n,  int iwhich, int xu, int yu, int xt, int yt );   /* From fitdoc */
 extern void      pickmen_butdet(Widget, XtPointer, XtPointer);                          /* From pickmen */
 extern void      showbuts_str  (Widget *, Widget *, char *, char *, char *,  int);

 /* Internal function prototypes */
 void             pick_pop (Widget, XEvent *, String *, Cardinal *);
 Widget           showbuts (Widget, char *, char *, char *, int );
           
 /* Externally defined global variables */
 extern int       firstback;
 extern int       nsaml,   nrowl, nsamr, nrowr;
 extern int       nsam1l,  nrow1l,nsam2l,nrow2l;
 extern int       nsam1r,  nrow1r,nsam2r,nrow2r;
 extern int       ixull,   iyull, ixulr, iyulr;
 extern int       ixulli,  iyulli,ixulri,iyulri;
 extern int       ixullmin,ixlrlmax, iyullmin,iylrlmax;
 extern int       ixulrmin,ixlrrmax, iyulrmin,iylrrmax;
 extern float     phif, thetaf, gammaff;
 extern char      dfil1[12], dfil2[12];
 extern int       maxpart;              // Max particle in doc file or xim file 
 extern int       iredu ;               // Image reduction factor 

 extern float   * xu0, * yu0, * xs, * ys, * xs2, * ys2, * xim;
 
 // Internally defined global variables 
 int              openit1, openit2;
 int              nsamsl, nrowsl, nsamsr, nrowsr;
 int              iradi         = 4;          // Particle radius on screen           
 int              numm          = 1;          // Current particle number   
 int              numm1         = 0;          // Current particle number   
 int              numm2         = 0;          // Current particle number   
 int              fitted        = FALSE;      // Assume unfitted start
 int              leftside      = FALSE;      // Start with either image   
 int              rightside     = FALSE;      // Start with either image   
 Widget           iw_but_lefrit = (Widget) 0; // For: pickmen
 Widget           iw_but_str    = (Widget) 0; // For: pickmen

 //                0026 6         26          242           61          242           61            1
 char             strcom1[] = 
                  " (Untilted)  Particle    Picked-X,Y-location       Original-X,Y-location ";
 char             strcom2[] = 
                  " (Tilted)    Particle    Picked-X,Y-location       Original-X,Y-location ";

 /* Internal file scope  variables */
 static FILE    * fpdoc1  = NULL;
 static FILE    * fpdoc2  = NULL;

 /***********************  pick  ***********************************/

 void pickp(int firstrun)

 {
 if (firstrun)
    {
    /* Retrieve any existing tilted and untilted points, & fit angles */ 
    if (fitdoc(TRUE,TRUE,TRUE,TRUE) > 0)
       { 
       spout("*** Can not continue, fix document files!");
       XBell(idispl,50); XBell(idispl,50); XBell(idispl,50); 
       return;
       }

    /* Set next particle number based on number already in doc file */
    numm = maxpart + 1;

   /* Initialize the first back picking flag */
    firstback = TRUE;

    // printf(" maxpart: %d \n", maxpart); 

    if (maxpart > 0)
       {/* Draw any existing particle numbers & their locations */
       pickdraw(TRUE, TRUE, FALSE, TRUE, FALSE, maxpart);
       }
    }

 // Set circle and # color to green
 wicolor(icontx,colorgo+2);

 openit1 = TRUE;
 openit2 = TRUE;

 /* Find displayed size of both images */
 nsamsl = nsam2l - nsam1l + 1;
 nsamsr = nsam2r - nsam1r + 1;
 nrowsl = nrow2l - nrow1l + 1;
 nrowsr = nrow2r - nrow1r + 1;


 // Display first button assignment window
 showbuts_str(&iw_but_lefrit, &iw_but_str,
              "Select left or right particle.", 
              "Show menu.", 
              "Delete a particle pair.", TRUE);

 //printf(" iw_but_lefrit: %d  iw_but_str: %d \n",iw_but_lefrit, iw_but_str);

 leftside    = FALSE;
 rightside   = FALSE;

 pickmen();

 /* Set  actions for right, left, and center buttons */
 actions(iw_win, "pick_pop", pick_pop,"M123");

 }


 /************************* pick_pop **************************/

 void pick_pop(Widget iw_t, XEvent *event, String *params,
               Cardinal *num_params)
 {
 int           ixi, iyi, ixs, iys,iok, ixt, iyt, derror, iflag;
 char          outstr[100];
 float         dlist[8];
 float         fxi,fyi;
 float         x1,y1, x2,y2, xt,yt;
 char        * string;
 static int    ix1, iy1, ix2, iy2;

 int           nsaytilt      = 48;  /* Say angle for this many particles */
 int           predict_error = 10;  /* Max expected difference from predicted location */

 if (!(strcmp(*params, "M")))
   {  /************************************************ Mouse movement only */
   getloc(event,'m',&ixs,&iys);

   if (leftside && 
       (ixs < ixull || ixs >= ixull + nsamsl || 
        iys < iyull || iys >= iyull + nrowsl ))
       {    /* Cursor is outside of displayed left image */
       spout("*** Not in left image.$");
       }

   else if (ixs >= ixull && ixs < ixull + nsamsl && 
            iys >= iyull && iys < iyull + nrowsl )
       {    /* Cursor inside displayed left image */
       ixi = ixs - ixulli + 1;
       iyi = iys - iyulli + 1;
       sprintf(outstr,"In left  image #%d: (%d,%d)$", numm,ixi,iyi);
       spout(outstr);
       }

    else if (rightside &&
       (ixs < ixulr || ixs >= ixulr + nsamsr || 
        iys < iyulr || iys >= iyulr + nrowsr ))
       {    /* Cursor outside displayed right image */
       spout("*** Not in right image.$");
       }

    else if (ixs >= ixulr && ixs < ixulr + nsamsr && 
             iys >= iyulr && iys < iyulr + nrowsr )
       {    /* Cursor inside displayed right image */
       ixi = ixs - ixulri + 1;
       iyi = iys - iyulri + 1;
       sprintf(outstr,"In right image #%d: (%d,%d)$", numm,ixi,iyi);
       spout(outstr);
       }
    else
       {    /* Cursor is outside both images */
       ixi = ixs - ixulri + 1;
       iyi = iys - iyulri + 1;
       spout("*** Not in either image.$");
       }
    }    // End of: if (!(strcmp(*params, "M")))

    /* Should add position indicator in right side window !!!!! */ 

 /******************************************************************** Left button */

 else if ( !(strcmp(*params, "1")))
    {   /*  Cursor anywhere -- button 1 pushed */ 

    getloc(event,'B',&ixs,&iys);
    iflag = 0;

    //printf("Button 1: %d %d (%d,%d)\n", leftside, rightside, ixs,iys);
    //printf("ixull,nsamsl: (%d,%d) \n", ixull,nsamsl);
    //printf("iyull,nrowsl: (%d,%d) \n", iyull,nrowsl);
    //printf("ixulr,nsamsr: (%d,%d) \n", ixulr,nsamsr);
    //printf("iyulr,nrowsr: (%d,%d) \n", iyulr,nrowsr);

    if (leftside && 
       (ixs < ixull || ixs >= ixull + nsamsl || 
        iys < iyull || iys >= iyull + nrowsl ))
       {    /* Cursor is outside of displayed left image */
       spout("*** Not in left image.$"); XBell(idispl,50); XBell(idispl,50);
       }

    else if ( rightside &&
       (ixs < ixulr || ixs >= ixulr + nsamsr || 
        iys < iyulr || iys >= iyulr + nrowsr ))
       {    /* Cursor outside displayed right image */
       //printf("Button 1: %d %d (%d,%d)\n", leftside, rightside, ixs,iys);
       spout("*** Not in right image.$"); XBell(idispl,50); XBell(idispl,50);
       }

    else if (ixs >= ixull && ixs < ixull + nsamsl &&  
             iys >= iyull && iys < iyull + nrowsl ) 
       {    /* Cursor inside displayed left image, Save location */
       ixi = ixs - ixulli + 1;
       iyi = iys - iyulli + 1;
       // sprintf(outstr,"In left image: (%d,%d)$", ixi,iyi); spout(outstr);
       // printf("Left button: %d %d (%d,%d) \n", leftside,fitted,ixs,iys);
       // printf("ixull,nsamsl: (%d,%d) \n", ixull,nsamsl);
       // printf("iyull,nrowsl: (%d,%d) \n", iyull,nrowsl);

       derror = 0; 
       if (leftside || (!leftside && !rightside))
          { // In left image -- button 1 pushed, record current location  

          /* Check for possible bad leftside location */
          if (leftside && fitted)
             { 
             derror = (int) (sqrt((float)( (ixi - ix1) * (ixi - ix1) + 
                                           (iyi - iy1) * (iyi - iy1)) ));
             }    

          if (fitted)
             { 
             /* Use angles to get predicted location in tilted rightside image */
             fxi = (float)ixi;   fyi = (float)iyi;
             witran(&fxi,&fyi,  &x2,&y2, 1, gammaff, thetaf, phif);
             ix2 = x2;   iy2 = y2;
             }   // End of: if (fitted)


          if (!leftside && fitted)
             {   /* Check for future bad rightside location */
             if (ix2 < 1 || ix2 > nsamr || iy2 < 1 || iy2 > nrowr)
                {    /* Predicted cursor loc. is outside of right image, */
                sprintf(outstr,"*** Tilted cursor not in right image: (%d,%d)$",
                                ix2,iy2);
                spout(outstr); XBell(idispl,50);
                return;
                }
             }   // End of: if (!leftside && fitted)


          /* Save location in array: xu,yu */
          iok =  fitdoc_addpart(numm,  1, ixi,iyi, 0,0 );

          // printf(" Leftside: %d   rightside: %d   numm: %d\n",leftside,rightside,numm);
          // printf(" Predicted: %d, %d  Picked: %d, %d \n", (int)xt,(int)yt, ixi,iyi);

          if (leftside) 
             {    /* Save info in doc files */ 
             dlist[0] = numm;
             dlist[1] = numm ;
             dlist[2] = ixi * iredu;
             dlist[3] = iyi * iredu;
             dlist[4] = ixi;
             dlist[5] = iyi;       
             dlist[6] = 1.0; 

             if (numm == 1)       
                { fpdoc1 = savdnc(dfil1, datexc, &fpdoc1,
                              dlist, 7, &openit1, TRUE, TRUE,strcom1); }
             else
                { fpdoc1 = savdn1(dfil1, datexc, &fpdoc1, 
                              dlist, 7, &openit1, TRUE, TRUE);}

             dlist[2] = xs[numm] * iredu;
             dlist[3] = ys[numm] * iredu;
             dlist[4] = xs[numm];
             dlist[5] = ys[numm];  
     
             if (numm == 1)       
                { fpdoc2 = savdnc(dfil2, datexc, &fpdoc2,
                              dlist, 7, &openit2, TRUE, TRUE,strcom2); }
             else
                { fpdoc2 = savdn1(dfil2, datexc, &fpdoc2,
                              dlist, 7, &openit2, TRUE, TRUE);}
             }

          /* Leave circle at this leftside location */
          xorc(iwin,    icontx, TRUE, ixs, iys, iradi);
          xorc(imagsav, icontx, TRUE, ixs, iys, iradi);

          /* Write particle number at this leftside location */
          string = itoa(numm);
          witext(icontx, string, ixs, iys, 1, 0, -1, 2, FALSE);
          if (string) free(string);
         
          spoutfile(TRUE);

          /* Find predicted location in right image */
          if (fitted)
             {   /* Move cursor to predicted location on right tilted side */
             ixt = ix2 + ixulri;
             iyt = iy2 + iyulri;
             movecur(ixt-ixs,iyt-iys);
             }
          else   //  if (!fitted)
             { /* No tilt angle available, Move cursor to center of right side */
             ixt = ixulr + nsamsr / 2;
             iyt = iyulr + nrowsr / 2;
             movecur(ixt-ixs,iyt-iys);
             }

          if (numm > 2 && numm < nsaytilt && leftside)
             { /* Determine tilt and axis, Sets: fitted */
             iflag = det_tilt(FALSE,TRUE);
             }

          if ( iflag == - numm || derror > predict_error ) 
             { 
             if (derror > predict_error ) printf("*** Check location: %d  for bad position? \n",numm);
             sprintf(outstr,
                  "Picked left:   #%d  (%d,%d)  Distance: %3d  Current Tilt: %-.2f  Axis: %-.2f, %-.2f  BAD??",
                   numm,ixi,iyi, derror, thetaf,phif,gammaff);
             XBell(idispl,50);
             }
          else
             {
             sprintf(outstr,
                  "Picked left:   #%d  (%d,%d)  Distance: %3d  Current Tilt: %-.2f  Axis: %-.2f, %-.2f",
                   numm,ixi,iyi, derror, thetaf,phif,gammaff);
             }
          spout(outstr);
          spoutfile(FALSE);

          if (numm > maxpart) maxpart = numm;
          if (leftside || rightside) {numm++;}

          if (leftside) 
             { rightside = FALSE;}
          else  
             { rightside = TRUE; }
          leftside  = FALSE;

          // Show button message  
          if (leftside)
             { 
             showbuts_str(&iw_but_lefrit, &iw_but_str,
                          "Select left particle.         ", 
                          "Show menu.", 
                          "Delete a particle pair.", TRUE);
             }
          else if (rightside)
             { 
             showbuts_str(&iw_but_lefrit, &iw_but_str,
                       "Select right particle.        ", 
                       "Show menu.", 
                       "Delete a particle pair.", TRUE);
             }
          else
             { 
             showbuts_str(&iw_but_lefrit, &iw_but_str,
                       "Select left or right particle.", 
                       "Show menu.", 
                       "Delete a particle pair.", TRUE);
             }
         }
       //printf(" Left maxpart: %d, numm: %d\n", maxpart,numm);

       } // End of: if (leftside || (fitted && !leftside && !rightside))

    else if (ixs >= ixulr && ixs < ixulr + nsamsr &&  
             iys >= iyulr && iys < iyulr + nrowsr )
       {    /* Cursor is inside displayed right image ------------------------------ */
       ixi = ixs - ixulri + 1;
       iyi = iys - iyulri + 1;
       // sprintf(outstr,"In right image: (%d,%d)$", ixi,iyi);
       // spout(outstr);

       if (rightside || (!leftside && !rightside))
          { // In right image -- button 1 pushed, record current location  

          /* Check for possible bad location */
          derror = 0; 
          if (rightside && fitted)
             {
             derror = (int) (sqrt((float)( (ixi - ix2) * (ixi - ix2) + 
                                           (iyi - iy2) * (iyi - iy2)) ));
             }   

          if (fitted)
             { 
             /* Use angles to get predicted location in untilted leftside image */
             fxi = (float)ixi;   fyi = (float)iyi;
             witran_rev(&x1,&y1,  fxi,fyi, 1, gammaff, thetaf, phif);
             ix1 = x1;   iy1 = y1;
             }   // End of: if (fitted)

          if (!rightside && fitted)
             {  /* Check for future bad leftside location */
             if (ix1 < 1 || ix1 > nsaml || iy1 < 1 || iy1 > nrowl)
                {    /* Predicted cursor loc. is outside of left image, */
                sprintf(outstr,"*** Untilted cursor not in left image: (%d,%d)$",
                                ix1,iy1);
                spout(outstr); XBell(idispl,50);
                return;
                }
             }   // End of: if (!rightside && fitted)

          /* Save location in array: xs,ys */
          iok =  fitdoc_addpart(numm,  2, 0,0, ixi,iyi );

          // printf(" Leftside: %d   rightside: %d   numm: %d\n",leftside,rightside,numm);
          // printf(" Predicted: %d, %d  Picked: %d, %d \n", (int)xt,(int)yt, ixi,iyi);

          if (rightside) 
             {    /* Save info in doc files */ 
             dlist[0] = numm;
             dlist[1] = numm ;
             dlist[2] = ixi * iredu;
             dlist[3] = iyi * iredu;
             dlist[4] = ixi;
             dlist[5] = iyi;       
             dlist[6] = 1.0; 

             if (numm == 1)       
                { fpdoc2 = savdnc(dfil2, datexc, &fpdoc2,
                              dlist, 7, &openit2, TRUE, TRUE,strcom2); }
             else
                { fpdoc2 = savdn1(dfil2, datexc, &fpdoc2, 
                              dlist, 7, &openit2, TRUE, TRUE);}

             dlist[2] = xu0[numm] * iredu;
             dlist[3] = yu0[numm] * iredu;
             dlist[4] = xu0[numm];
             dlist[5] = yu0[numm];  
     
             if (numm == 1)       
                { fpdoc1 = savdnc(dfil1, datexc, &fpdoc1,
                              dlist, 7, &openit1, TRUE, TRUE,strcom2); }
             else
                { fpdoc1 = savdn1(dfil1, datexc, &fpdoc1,
                              dlist, 7, &openit1, TRUE, TRUE);} 
             }

          /* Leave circle at this rightside location */
          xorc(iwin,    icontx, TRUE, ixs, iys, iradi);
          xorc(imagsav, icontx, TRUE, ixs, iys, iradi);

          /* Write particle number at this rightside location */
          string = itoa(numm);
          witext(icontx, string, ixs, iys, 1, 0, -1, 2, FALSE);
          if (string) free(string);
         
          spoutfile(TRUE);

          if (fitted)
             {   /* Move cursor to predicted location on left untilted side */
             ixt = ix1 + ixulli;
             iyt = iy1 + iyulli;
             movecur(ixt-ixs,iyt-iys);
             }             
          else   
             {   /* No tilt angle available yet */
                 /* Move cursor to center of left untilted side */
             ixt = ixull + nsamsl / 2;
             iyt = iyull + nrowsl / 2;
             movecur(ixt-ixs,iyt-iys);
             }

          if (numm > 2 && numm < nsaytilt && rightside)
             { /* Determine tilt and axis, Sets: fitted */
             iflag = det_tilt(FALSE,TRUE);
             }

          if (iflag == -numm || derror > predict_error ) 
             { 
             if (derror > predict_error ) printf("*** Check location: %d  for bad position? \n",numm);
             sprintf(outstr,
                  "Picked right:  #%d  (%d,%d)  Distance: %3d  Current Tilt: %-.2f  Axis: %-.2f, %-.2f   BAD??",
                   numm,ixi,iyi, derror, thetaf,phif,gammaff); 
             XBell(idispl,50);
             }
          else
             {
             sprintf(outstr,
                  "Picked right:  #%d  (%d,%d)  Distance: %3d  Current Tilt: %-.2f  Axis: %-.2f, %-.2f",
                   numm,ixi,iyi, derror, thetaf,phif,gammaff);
              } 
          spout(outstr);
          spoutfile(FALSE);

          if (numm > maxpart) maxpart = numm;
          if (leftside || rightside) numm++ ;

          if (rightside) 
             { leftside = FALSE;}
          else  
             { leftside = TRUE; }
          rightside  = FALSE;

          // Show button message  
          if (leftside)
             { 
             showbuts_str(&iw_but_lefrit,&iw_but_str,
                          "Select left particle.         ", 
                          "Show menu.", 
                          "Delete a particle pair.", TRUE);
             }
          else if (rightside)
             { 
             showbuts_str(&iw_but_lefrit,&iw_but_str,
                          "Select right particle.        ", 
                          "Show menu.", 
                          "Delete a particle pair.", TRUE);
             }
          else
             { 
             showbuts_str(&iw_but_lefrit,&iw_but_str,
                          "Select left or right particle.", 
                          "Show menu.", 
                          "Delete a particle pair.", TRUE);
             }

          }// End of:  if (leftside || (fitted && !leftside && !rightside))
       }   // End of:  if (leftside || (fitted && !leftside && !rightside))

    // Update label box for next particle number 
    pickmen();

    }      // End of:  else if (ixs >= ixulr && ixs < ixulr + ..

 /***************************************************** Middle button */ 

 else if (!(strcmp(*params, "2")))
    {                          /* Show menu --       Button 2 pushed */
    if (fpdoc1) 
       { fclose(fpdoc1); fpdoc1 = NULL; openit1 = TRUE; }
    if (fpdoc1) 
       { fclose(fpdoc2); fpdoc2 = NULL; openit2 = TRUE; }

    /* Display picking menu */
    pickmen();

    }   // End of: else if (!(strcmp(*params, "2"))) 

 /****************************************************** Right button */ 

 else if (!(strcmp(*params, "3")))
    {                          /* Button 3 pushed */
    getloc(event,'B',&ixs,&iys);

    if (fpdoc1) 
       { fclose(fpdoc1); fpdoc1 = NULL; openit1 = TRUE; }
    if (fpdoc2) 
       { fclose(fpdoc2); fpdoc2 = NULL; openit2 = TRUE; }

    leftside  = FALSE;
    rightside = FALSE;

    /* Display particle deletion menu */
    tiltp_deletemen();

    // Replace button messages  
    showbuts_str(&iw_but_lefrit, &iw_but_str,
              "Select left or right particle.", 
              "Show menu.", 
              "Delete a particle pair.", TRUE);

    }      // End of: else if (!(strcmp(*params, "3"))) 

 }

@


1.34
log
@Improved bad location determination
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/pickp.c,v 1.33 2015/09/18 16:19:05 leith Exp $*/
d291 1
a291 1
                sprintf(outstr,"*** Tilted cursor not in right image: (%d,%d)",
d449 1
a449 1
                sprintf(outstr,"*** Untilted cursor not in left image: (%d,%d)",
@


1.33
log
@fitdoc Parameters changed
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/pickp.c,v 1.32 2015/09/10 13:17:36 leith Exp $*/
d57 1
a57 1
 extern void      det_tilt      (int wantmsg, int wantlabel);                            /* From pickmen */
d114 1
a114 1
    if (fitdoc(TRUE,TRUE,TRUE) > 0)
d172 1
a172 1
 int           ixr, iyr, ixi, iyi, ixs, iys,iok, derror;
d175 2
a176 1
 float         fx,fy;
d178 1
a178 2
 static int    ixt, iyt;
 static float  xt,yt;
d184 1
a184 1
   {  /****************************************** Mouse movement only */
d228 1
a228 1
 /****************************************************** Left button */
d234 1
d253 1
a253 1
       //printf("xxxButton 1: %d %d (%d,%d)\n", leftside, rightside, ixs,iys);
d256 1
d259 1
a259 1
       {    /* Cursor inside displayed left image */
d262 23
a284 2
       // sprintf(outstr,"In left image: (%d,%d)$", ixi,iyi);
       // spout(outstr);
a285 3
       //printf("Left button: %d %d (%d,%d) \n", leftside,fitted,ixs,iys);
       //printf("ixull,nsamsl: (%d,%d) \n", ixull,nsamsl);
       //printf("iyull,nrowsl: (%d,%d) \n", iyull,nrowsl);
d287 11
a297 3
       if (leftside || (!leftside && !rightside))
          {   /* In left image -- button 1 pushed */
              /* Want to record this left particle location */
d299 1
a299 1
          /* Save location in array */
a304 1
          derror = 0; 
d306 1
a306 13
             {
             if ( fitted)
                { /* Check for possible bad location */
                derror = (int) (sqrt((float)( (ixi - (int)xt) * (ixi - (int)xt) + 
                                              (iyi - (int)yt) * (iyi - (int)yt)) ));
                if (derror > predict_error ) 
                   { 
                   sprintf(outstr,"Left location is large distance: %d  from expected location!",derror); 
                   spout(outstr);  XBell(idispl,50);
                   }
                }    // End of:  if ( fitted)

             /* Save info in doc file */ 
d335 1
a335 1
          /* Leave permanent circle at this location */
d348 4
a351 23
             {
             /* Transform the x values */
             fx = (float)ixi;
             fy = (float)iyi;
	     
             /* Use angles to get predicted location in tilted image */
             witran(&fx, &fy,  &xt, &yt, 1, gammaff, thetaf, phif);
   
             ixt = xt;
             iyt = yt;
   
             if (ixt < 1 || ixt > nsamr || iyt < 1 || iyt > nrowr)
                {    /* Predicted cursor loc. is outside of right image, */
                sprintf(outstr,"*** Tilted cursor not in right image: (%d,%d)",
                                ixt,iyt);
                spout(outstr); XBell(idispl,50);
                }
             else
                {   /* Move cursor to predicted location on right tilted side */
                ixt = ixt + ixulri;
                iyt = iyt + iyulri;
                movecur(ixt-ixs,iyt-iys);
                }
d362 10
a371 1
             det_tilt(FALSE,TRUE);
d373 3
a375 1
          sprintf(outstr,
d378 1
d420 1
a420 1
       {    /* Cursor is inside displayed right image */
d426 29
a454 5
       // printf(" leftside: %d   Rightside: %d   numm: %d\n",leftside,rightside,numm);
       if (rightside || ( !leftside && !rightside))
          {   /* In right image -- button 1 pushed */
              /* Want to record this right particle location */
          spoutfile(TRUE);
d456 1
a456 1
          /* Save location in array */
d459 2
a460 2
          //printf(" Leftside: %d   rightside: %d   numm: %d\n",leftside,rightside,numm);
          //printf(" Predicted: %d, %d  Picked: %d, %d \n",(int) xt,(int)yt, ixi,iyi);
a461 1
          derror = 0; 
d463 1
a463 14
             {      /* Save info in doc file */ 


             if ( fitted )
                {    /* Check for possible bad location */
                derror = (int) (sqrt((float)( (ixi - (int)xt) * (ixi - (int)xt) + 
                                              (iyi - (int)yt) * (iyi - (int)yt)) ));
                if (derror > predict_error ) 
                   { 
                   sprintf(outstr,"Right location is large distance: %d  from expected location!",derror); 
                   spout(outstr); XBell(idispl,50);
                   }
                }

d465 1
a465 1
             dlist[1] = numm;
d470 2
a471 2
             dlist[6] = 1.0;   
	    
d473 2
a474 2
                {fpdoc2 = savdnc(dfil2, datexc, &fpdoc2,
                                dlist, 7, &openit2, TRUE, TRUE,strcom2);}
d476 2
a477 2
                { fpdoc2 = savdn1(dfil2, datexc, &fpdoc2,
                             dlist, 7, &openit2, TRUE, TRUE);}
d483 1
a483 1

d485 2
a486 2
                {fpdoc1 = savdnc(dfil1, datexc, &fpdoc1,
                                dlist, 7, &openit1, TRUE, TRUE,strcom1);}
d488 2
a489 2
                {fpdoc1 = savdn1(dfil1, datexc, &fpdoc1,
                             dlist, 7, &openit1, TRUE, TRUE);}
d492 1
a492 1
          /* Leave permanent circle at this location */
d496 1
a496 1
          /*   Write particle number at this rightside location */
d500 2
a502 1
          /* Find predicted location in left image */
d504 6
a509 25
             {
             /* Transform the x values */
             fx = (float)ixi;
             fy = (float)iyi;
	     
             /* Use angles to get predicted location in un-tilted image */
             witran_rev(&xt, &yt,  fx, fy, 1, gammaff, thetaf, phif);
   
             ixt = xt;
             iyt = yt;
   
             if (ixt < 1 || ixt > nsaml || iyt < 1 || iyt > nrowl)
                {    /* Predicted cursor loc. is outside of left image, */
                sprintf(outstr,"*** Untilted cursor not in left image: (%d,%d)",
                                ixt,iyt);
                spout(outstr); XBell(idispl,50);
                }
             else
                {   /* Move cursor to predicted location on left untilted side */
                ixt = ixt + ixulli;
                iyt = iyt + iyulli;
                movecur(ixt-ixs,iyt-iys);
                }             
             }
          else   //  if (!fitted)
d519 1
a519 1
             det_tilt(FALSE,TRUE);
d522 11
a532 1
          sprintf(outstr,
d534 2
a535 1
                   numm,ixi,iyi, derror, thetaf,phif,gammaff); 
d559 3
a561 3
                       "Select right particle.        ", 
                       "Show menu.", 
                       "Delete a particle pair.", TRUE);
d566 3
a568 3
                       "Select left or right particle.", 
                       "Show menu.", 
                       "Delete a particle pair.", TRUE);
a569 2

          //printf(" RIT maxpart: %d, numm: %d\n", maxpart,numm);
@


1.32
log
@Reposition button menu
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/pickp.c,v 1.31 2015/09/01 17:53:42 leith Exp $*/
d57 1
a57 1
 extern void      det_tilt      (int wantmsg, int wantlabel);                             /* From pickmen */
d114 1
a114 1
    if (fitdoc(TRUE) > 0)
d568 1
a568 1
    }      // End of:  else if (ixs >= ixulr && ixs < ixulr + .......................
@


1.31
log
@$2
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/pickp.c,v 1.30 2015/06/11 13:24:37 leith Exp $*/
d57 1
a57 1
 extern void      det_tilt      (int wantmsg, int wantlabel);                            /* From pickmen */
d61 1
d86 9
a94 7
 int              iradi     = 4;        // Particle radius on screen           
 int              numm      = 1;        // Current particle number   
 int              numm1     = 0;        // Current particle number   
 int              numm2     = 0;        // Current particle number   
 int              fitted    = FALSE;
 int              leftside  = FALSE;    // Start with left  image   
 int              rightside = FALSE;    // Start with right image   
a101 4
 Widget           iw_but_lef    = 0;    // For: pickmen
 Widget           iw_but_rit    = 0;    // For: pickmen
 Widget           iw_but_lefrit = 0;    // For: pickmen

a146 16
 /* Create button assignment dialogs with following strings  */
 
 iw_but_lef = showbuts(iw_but_lef,
                       "Select left particle.", 
                       "Show menu.", 
                       "Delete a particle pair", FALSE);

 iw_but_rit = showbuts(iw_but_rit,
                       "Select right particle.", 
                       "Show menu.", 
                       "Delete a particle pair", FALSE);

 iw_but_lefrit = showbuts(iw_but_lefrit,
                       "Select left or right particle.", 
                       "Show menu.", 
                       "Delete a particle pair", FALSE);
d149 4
d154 1
a154 1
 XtManageChild(iw_but_lefrit);
d180 1
a180 1
 int           nsaytilt = 48;       /* Say angle for this many particles */
d272 1
a272 1
          iok = fitdoc_addpart(numm,  1, ixi,iyi, 0,0 );
d274 2
a275 2
          //printf(" Leftside: %d   rightside: %d   numm: %d\n",leftside,rightside,numm);
          //printf(" Predicted: %d, %d  Picked: %d, %d \n", (int)xt,(int)yt, ixi,iyi);
d289 1
a289 1
                }
d302 1
a302 1
                          dlist, 7, &openit1, TRUE, TRUE,strcom1); }
d304 2
a305 2
                { fpdoc1 = savdn1(dfil1, datexc, &fpdoc1,
                          dlist, 7, &openit1, TRUE, TRUE);}
d314 1
a314 1
                          dlist, 7, &openit2, TRUE, TRUE,strcom2); }
d317 1
a317 1
                          dlist, 7, &openit2, TRUE, TRUE);}
d324 1
a324 1
          /* Write particle number at this location */
d384 7
a390 5
          XtUnmanageChild(iw_but_lef);
          XtUnmanageChild(iw_but_rit);
          XtUnmanageChild(iw_but_lefrit);
          if (leftside) 
             { XtManageChild(iw_but_lef); }
d392 6
a397 1
             { XtManageChild(iw_but_rit); }
d399 7
a405 4
             { XtManageChild(iw_but_lefrit);}

          }
        
d434 1
d458 1
a458 1
                {fpdoc2 = savdn1(dfil2, datexc, &fpdoc2,
a482 3
          /* Save location in xim arrays */
          iok =  fitdoc_addpart(numm, 2, ixi,iyi, ixi,iyi );

d524 1
a524 1
                   numm,ixi,iyi, derror, thetaf,phif,gammaff);
d538 7
a544 5
          XtUnmanageChild(iw_but_lef);
          XtUnmanageChild(iw_but_rit);
          XtUnmanageChild(iw_but_lefrit);
          if (leftside) 
             { XtManageChild(iw_but_lef); }
d546 6
a551 1
             { XtManageChild(iw_but_rit); }
d553 6
a558 1
             { XtManageChild(iw_but_lefrit);}
d567 1
d576 1
a576 2

    if (fpdoc2) 
d590 7
a596 3
    // Remove button messages  
    XtUnmanageChild (iw_but_lef);
    XtUnmanageChild (iw_but_rit);
d601 6
a606 6
    if (leftside) 
       { XtManageChild(iw_but_lef); }
    else if (rightside)
       { XtManageChild(iw_but_rit); }
    else
       { XtManageChild(iw_but_lefrit);}
@


1.30
log
@running tilt, pick either side
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/pickp.c,v 1.29 2011/06/22 19:14:46 leith Exp $*/
d5 1
a5 1
 ***********************************************************************
d10 3
d37 1
a37 1
 ***********************************************************************
d50 1
a50 1
 ***********************************************************************
d57 4
a60 3
 extern void show_tilt(int wantmsg, int wantlabel);
 extern void witran_rev(float *, float *, float, float, int,
                float, float, float);
d63 2
a64 2
 void   pick_pop (Widget, XEvent *, String *, Cardinal *);
 Widget showbuts (Widget, char *, char *, char *, int );
d68 7
a74 7
 extern int       nsaml, nrowl, nsamr, nrowr;
 extern int       nsam1l,nrow1l,nsam2l,nrow2l;
 extern int       nsam1r,nrow1r,nsam2r,nrow2r;
 extern int       ixull, iyull, ixulr, iyulr;
 extern int       ixulli,iyulli,ixulri,iyulri;
 extern int       ixullmin,ixlrlmax,iyullmin,iylrlmax;
 extern int       ixulrmin,ixlrrmax,iyulrmin,iylrrmax;
d77 4
a80 3
 extern int       maxpart;        // Max marker in doc file 
 extern int       iredu ;         // Image reduction factor 
 extern Widget    iw_pickmen;     // For: pickmen
d82 2
a83 2
 // Internally defined global  variables 
 int              openitl, openitr;
d85 17
a101 9
 int              iradi   = 4;      // Marker radius           
 int              numm    = 1;      // Current marker number   
 int              fitted  = FALSE;

 Widget           iw_but_lef0   = 0;     // For: pickmen
 Widget           iw_but_lef1   = 0;     // For: pickmen
 Widget           iw_but_rit0   = 0;     // For: pickmen
 Widget           iw_but_rit1   = 0;     // For: pickmen
 Widget           iw_but_lefrit = 0;     // For: pickmen
a105 8
 int              left    = TRUE;   // Start with left image   
 int              right   = FALSE;  // Start with left image   

 char     strl[] = 
  "            Particle    Reduced-X,Y-location      Original-X,Y-location   (in untilted image)";
 char     strr[] = 
  "            Particle    Reduced-X,Y-location      Original-X,Y-location   (in   tilted image)";
//0026 6           26          242           61          242           61            1
d114 9
a122 1
    /* Set next marker to number already in doc file */
d124 2
a125 1
    /* Initialize the first back picking flag */
a126 1
    left      = TRUE;
d128 1
a128 1
    //printf("left,numm,maxpart: %d %d \n", left,numm,maxpart);
d130 3
a132 5
    if (maxpart > 0) 
       {
       /* Retrieve tilted and untilted points, & fit angles */
       //printf("calling fitdoc: %d %d \n", left,numm,maxpart);
       fitdoc(FALSE);
d139 2
a140 2
 openitl = TRUE;
 openitr = TRUE;
d150 1
a150 6
 iw_but_lef0 = showbuts(iw_but_lef0,
                       "Select left particle.", 
                       "Menu.", 
                       "Reselect previous particle pair", FALSE);

 iw_but_lef1 = showbuts(iw_but_lef1,
d152 2
a153 2
                       "Menu.", 
                       "Reselect right particle.", FALSE);
d155 1
a155 1
 iw_but_rit0 = showbuts(iw_but_rit0,
d157 2
a158 7
                       "Menu.", 
                       "Reselect previous particle pair", FALSE);

 iw_but_rit1 = showbuts(iw_but_rit1,
                       "Select right particle.", 
                       "Menu.", 
                       "Reselect left particle", FALSE);
d162 2
a163 2
                       "Menu.", 
                       "Reselect previous particle pair", FALSE);
d169 2
a170 2
 left    = FALSE;
 right   = FALSE;
a172 1
 //XtUnmanageChild(iw_pickmen);
d185 1
a185 3
 int           ixr, iyr, ixi, iyi, ixs, iys;
 int           ixt, iyt;
 static int    ixp, iyp;
d188 1
a188 1
 float         xt,yt,  fx,fy;
d190 2
d193 2
d200 1
a200 1
   if (left && 
d212 1
a212 1
       sprintf(outstr,"In left image #%d: (%d,%d)$", numm,ixi,iyi);
d216 1
a216 1
    else if (right &&
d248 1
a248 1
    //printf("Button 1: %d %d (%d,%d)\n", left, right, ixs,iys);
d254 1
a254 1
    if (left && 
d261 1
a261 1
    else if ( right &&
d265 1
a265 1
       //printf("xxxButton 1: %d %d (%d,%d)\n", left, right, ixs,iys);
d276 1
a276 1
       //printf("Left button: %d %d (%d,%d) \n", left,fitted,ixs,iys);
d280 1
a280 1
       if (left || (!left && !right))
d284 48
a331 15
          /* Save info in doc file */ 
          dlist[0] = numm;
          dlist[1] = numm ;
          dlist[2] = ixi * iredu;
          dlist[3] = iyi * iredu;
          dlist[4] = ixi;
          dlist[5] = iyi;       
          dlist[6] = 1.0; 

          if (openitl)       
             { fpdoc1 = savdnc(dfil1, datexc, &fpdoc1,
                          dlist, 7, &openitl, TRUE, TRUE,strl); }
          else
             { fpdoc1 = savdn1(dfil1, datexc, &fpdoc1,
                          dlist, 7, &openitl, TRUE, TRUE);}
d337 1
a337 1
          /* Write marker number at this location */
d341 1
a341 1

d371 1
a371 2
             { /* No tilt angle available yet */
               /* Move cursor to center of right tilted side */
d377 3
a379 8
          if (numm > 3 && numm < 32 && left)
             { 
             show_tilt(FALSE,TRUE);
             sprintf(outstr,"Picked left:  #%d  (%d,%d)   Current Tilt: %f6.2",numm,ixi,iyi,thetaf);
             }
          else
             { 
             sprintf(outstr,"Picked left:  #%d  (%d,%d)",  numm,ixi,iyi);
d381 3
a386 2

          if (left || right) {numm++;}
d388 1
d390 2
a391 2
          if (left) 
             { right = FALSE;}
d393 2
a394 2
             { right = TRUE; }
          left  = FALSE;
d397 2
a398 4
          XtUnmanageChild(iw_but_lef0);
          XtUnmanageChild(iw_but_lef1);
          XtUnmanageChild(iw_but_rit0);
          XtUnmanageChild(iw_but_rit1);
d400 4
a403 4
          if (left) 
             { XtManageChild(iw_but_lef1); }
          else if (right)
             { XtManageChild(iw_but_rit1); }
a406 3
          /* Record undo location */
          ixp  = ixs;
          iyp  = iys;
d408 2
d411 1
a411 1
       } // End of: if (left || (fitted && !left && !right))
d421 2
a422 1
       if (right || ( !left && !right))
d427 28
a454 8
          /* Save info in doc file */ 
          dlist[0] = numm;
          dlist[1] = numm;
          dlist[2] = ixi * iredu;
          dlist[3] = iyi * iredu;
          dlist[4] = ixi;
          dlist[5] = iyi;       
          dlist[6] = 1.0;   
d456 19
a474 6
          if (openitr)       
             {fpdoc2 = savdnc(dfil2, datexc, &fpdoc2,
                             dlist, 7, &openitr, TRUE, TRUE,strr);}
          else
             {fpdoc2 = savdn1(dfil2, datexc, &fpdoc2,
                             dlist, 7, &openitr, TRUE, TRUE);}
d480 1
a480 1
          /*   Write marker number at this location */
d485 3
d522 3
a524 8
          if (numm > 3 && numm < 32 && right)
             { 
             show_tilt(FALSE,TRUE);
             sprintf(outstr,"Picked right: #%d  (%d,%d)   Current tilt: %f6.2",numm,ixi,iyi,thetaf);
             }
          else
             { 
             sprintf(outstr,"Picked right: #%d  (%d,%d)", numm,ixi,iyi);
d526 4
a532 1
          if (left || right) numm++ ;
d534 1
d536 2
a537 2
          if (right) 
             { left = FALSE;}
d539 2
a540 2
             { left = TRUE; }
          right  = FALSE;
d543 2
a544 4
          XtUnmanageChild(iw_but_lef0);
          XtUnmanageChild(iw_but_lef1);
          XtUnmanageChild(iw_but_rit0);
          XtUnmanageChild(iw_but_rit1);
d546 4
a549 4
          if (left) 
             { XtManageChild(iw_but_lef1); }
          else if (right)
             { XtManageChild(iw_but_rit1); }
d553 8
a560 6
          /* Record undo location */
          ixp  = ixs;
          iyp  = iys;
          }// End of:  if (left || (fitted && !left && !right))
       }   // End of:  if (left || (fitted && !left && !right))
    }      // End of:  else if (ixs >= ixulr && ixs < ixulr + nsamsr &&  iys >= iyulr && iys < iyulr + nrowsr )
d567 1
a567 1
       { fclose(fpdoc1); fpdoc1 = NULL; openitl = TRUE; }
d570 1
a570 1
       { fclose(fpdoc2); fpdoc2 = NULL; openitr = TRUE; }
d583 14
a596 19
    // Show button message  
    XtUnmanageChild (iw_but_lef0);
    XtUnmanageChild (iw_but_lef1);
    XtUnmanageChild (iw_but_rit0);
    XtUnmanageChild (iw_but_rit1);

   if (right)

       {   // Move cursor back to left image location 
       // spout("Moving cursor back to left"); 
      
       // Show button assignment message  
       XtManageChild (iw_but_lef1);
    
       movecur(ixp-ixs, iyp-iys);

       right = FALSE;
       ixp   = ixs; iyp = iys;
       }
a597 22
    else if (left)
       {  // Move cursor back to previous right position 
       // spout("Moving cursor back to right");        

       // Show button assignment message  
       XtManageChild (iw_but_rit1);

       left = FALSE;
       movecur(ixp-ixs, iyp-iys);
       ixp  = ixs; iyp = iys;
       }

    else if (!left && !right)
       {   

       // Show button assignment message  
       XtManageChild (iw_but_lefrit);

       numm--;
       ixp     = ixs; iyp = iys;
       }
    }      // End of: else if (!(strcmp(*params, "3"))) 
@


1.29
log
@rewrite
@
text
@d2 1
a2 1
/*$Header:  Exp $*/
d8 2
a9 1
 C                      Improved                 Jun 2011 ArDean Leith *
d12 1
a12 1
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
d53 5
a60 1
 
d75 1
d78 1
d80 9
a88 9
 int              iradi  = 4;      // Marker radius           
 int              numm   = 1;      // Current marker number   
 int              left   = TRUE;   // Start with left image   
 int              fitted = FALSE;
 int              openitl, openitr;
 Widget           iw_but_lef0 = 0;     // For: pickmen
 Widget           iw_but_lef1 = 0;     // For: pickmen
 Widget           iw_but_rit0 = 0;     // For: pickmen
 Widget           iw_but_rit1 = 0;     // For: pickmen
d91 4
a94 3
 static int       gotright = FALSE;
 static FILE    * fpdoc1 = NULL;
 static FILE    * fpdoc2 = NULL;
d115 8
a122 2
    /* Retrieve tilted and untilted points, & fit angles */
    fitdoc(FALSE);
d142 1
a142 1
                       " ", FALSE);
d152 1
a152 1
                       "         ", FALSE);
d159 5
d165 8
a172 4
 if (left)
    {XtManageChild(iw_but_lef0);}
 else
    {XtManageChild(iw_but_rit0);}
d188 1
a188 1
 char          outstr[60];
d197 1
d205 2
a206 1
    else if (left)
d210 1
a210 1
       sprintf(outstr,"In left image: (%d,%d)$", ixi,iyi);
d214 1
a214 1
    else if (!left &&
d221 2
a222 1
    else if (!left)
d226 1
a226 1
       sprintf(outstr,"In right image: (%d,%d)$", ixi,iyi);
d229 8
a236 1
    }
d239 4
a242 1
 /****************************************************** Left button */ 
a243 2
 else if (left && !(strcmp(*params, "1")))
   {   /*  In left image -- button 1 pushed */
d246 19
a264 8
    /* Find location inside whole left image */
    ixi    = ixs - ixulli + 1;
    iyi    = iys - iyulli + 1;

   if (ixs < ixull || ixs >= ixull + nsamsl || 
       iys < iyull || iys >= iyull + nrowsl )
       {    /* Cursor is outside displayed left image, want inside */
       spout("*** Not in left image.$"); XBell(idispl,50);
d266 31
d298 44
a341 6
    else 
       {   /* Want to record this left particle location */
       spoutfile(TRUE);
       sprintf(outstr,"Left: %d  (%d,%d)",numm,ixi,iyi);
       spout(outstr);
       spoutfile(FALSE);
d343 4
a346 44
       /* Save info in doc file */ 
       dlist[0] = numm;
       dlist[1] = numm ;
       dlist[2] = ixi * iredu;
       dlist[3] = iyi * iredu;
       dlist[4] = ixi;
       dlist[5] = iyi;       
       dlist[6] = 1.0; 

       if (openitl)       
          { fpdoc1 = savdnc(dfil1, datexc, &fpdoc1,
                       dlist, 7, &openitl, TRUE, TRUE,strl); }
       else
          { fpdoc1 = savdn1(dfil1, datexc, &fpdoc1,
                       dlist, 7, &openitl, TRUE, TRUE);}

       /* Leave permanent circle at this location */
       xorc(iwin,    icontx, TRUE, ixs, iys, iradi);
       xorc(imagsav, icontx, TRUE, ixs, iys, iradi);

       /* Write marker number at this location */
       string = itoa(numm);
       witext(icontx, string, ixs, iys, 1, 0, -1, 2, FALSE);
       if (string) free(string);

       /* Find predicted location in right image */
       if (fitted)
          {
          /* transform the x values */
          fx = (float)ixi;
          fy = (float)iyi;
	  
          /* Use angles to get predicted location in tilted image */
          witran(&fx, &fy,  &xt, &yt, 1, gammaff, thetaf, phif);

          ixt = xt;
          iyt = yt;

          if ((ixt < 1 || ixt > nsamr ||
               iyt < 1 || iyt > nrowr))
             {    /* Predicted cursor loc. is outside of right image, */
             sprintf(outstr,"*** Tilted not in right image: (%d,%d)",
                             ixt,iyt);
             spout(outstr); XBell(idispl,50);
d349 2
a350 4
             {   /* Move cursor to predicted location on tilted side */
             ixr = ixt + ixulri;
             iyr = iyt + iyulri;
             movecur(ixr-ixs,iyr-iys);
d352 29
a380 8
          
          }
       else
          { /* No tilt angle available yet */
            /* move cursor to center of tilted side */
          ixt = ixulr + nsamsr / 2;
          iyt = iyulr + nrowsr / 2;
          movecur(ixt-ixs,iyt-iys);
d383 1
a383 14
       left     = FALSE;
       gotright = FALSE;
       if (numm > maxpart) maxpart = numm;

       // Show button message  
       XtUnmanageChild(iw_but_lef0);
       XtUnmanageChild(iw_but_lef1);
       XtManageChild  (iw_but_rit1);

       /* Record undo location */
       ixp  = ixs;
       iyp  = iys;
       }
    }
d385 7
a391 3
 else if (!(strcmp(*params, "1")))
    {                          /*  In right image -- Button 1 pushed */
    getloc(event,'B',&ixs,&iys);
d393 13
a405 25
    /* Find location inside whole right image */
    ixi    = ixs - ixulri + 1;
    iyi    = iys - iyulri + 1; 

    if (ixs < ixulr || ixs >= ixulr + nsamsr || 
        iys < iyulr || iys >= iyulr + nrowsr )
       {    /* Cursor outside of displayed right image, want inside */
       spout("*** Not in right image.$"); XBell(idispl,50);
       }

    else 
       {   /* Want to record this location */
        spoutfile(TRUE);
        sprintf(outstr,"Right:%d  (%d,%d)",numm,ixi,iyi);
        spout(outstr);
        spoutfile(FALSE);

        /* Save info in doc file */ 
        dlist[0] = numm;
        dlist[1] = numm;
        dlist[2] = ixi * iredu;
        dlist[3] = iyi * iredu;
        dlist[4] = ixi;
        dlist[5] = iyi;       
        dlist[6] = 1.0;   
d407 90
a496 34
       if (openitr)       
          {fpdoc2 = savdnc(dfil2, datexc, &fpdoc2,
                           dlist, 7, &openitr, TRUE, TRUE,strr);}
       else
          {fpdoc2 = savdn1(dfil2, datexc, &fpdoc2,
                           dlist, 7, &openitr, TRUE, TRUE);}

        /* Leave permanent circle at this location */
        xorc(iwin,    icontx, TRUE, ixs, iys, iradi);
        xorc(imagsav, icontx, TRUE, ixs, iys, iradi);

        /*   Write marker number at this location */
        string = itoa(numm);
        witext(icontx, string, ixs, iys, 1, 0, -1, 2, FALSE);
        if(string) free(string);

        // Show button message  
        XtUnmanageChild(iw_but_rit0);
        XtUnmanageChild(iw_but_rit1);
        XtManageChild  (iw_but_lef1);

        left     = TRUE;
        gotright = TRUE;
        if (numm > maxpart) maxpart = numm;
        numm++;

        /* Move cursor to last position of untilted side */
        movecur(ixp-ixs,iyp-iys);

        /* Record undo location */
        ixp  = ixs;
        iyp  = iys;
       }
    }
d502 2
a503 2
      if(fpdoc1) {
        fclose(fpdoc1); fpdoc1 = NULL; openitl = TRUE;  }
d505 2
a506 2
      if(fpdoc2) {
        fclose(fpdoc2); fpdoc2 = NULL; openitr = TRUE;  }
d510 2
a511 1
    }
d515 2
a516 3
 else if (!left && !(strcmp(*params, "3")))

    {                          /*  In right image -- Button 3 pushed */
a518 3
    /* Move cursor back to left image location 
    spout("Moving cursor back to left");       */

d520 12
a531 3
    XtUnmanageChild(iw_but_rit0);
    XtUnmanageChild(iw_but_rit1);
    XtManageChild  (iw_but_lef0);
d533 1
a533 4
    movecur(ixp-ixs, iyp-iys);
    left = TRUE;
    ixp = ixs; iyp = iys;
    }
d535 3
a537 4
 else if (!(strcmp(*params, "3")))
    {                          /*  In left image -- Button 3 pushed */
    /* Move cursor back to previous right position 
    spout("Moving cursor back to right");          */
d539 3
a541 3
    if (gotright) 
       {
       getloc(event,'B',&ixs,&iys);
d544 1
a544 3
       XtUnmanageChild(iw_but_lef0);
       XtUnmanageChild(iw_but_lef1);
       XtManageChild  (iw_but_rit0);
a545 1
       numm--;
d550 11
a560 1
    }             
d562 1
@


1.28
log
@GPL
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickp.c,v 1.27 1996/05/01 16:13:47 leith Exp $*/
d6 4
a9 4
 *
 * pickp.c
 *
 ***********************************************************************
d35 1
a35 1
 * 
d41 4
a44 4
 * VARIABLES:   xim       imaged number             dfil1 + 2
 *              xu0,yu0   untilted picked points    dfil1
 *              xs,ys     tilted picked points      dfil2
 *              xs2,ys2   tilted predicted points   
a48 2
#include "std.h"
#include "x.h"
d52 6
a57 5
 /* internal functions */
 void           pick_pop (Widget, XEvent *, String *, Cardinal *);

 /* external variables */
 extern XImage  * imagep;
d59 11
d71 6
a76 1
 /* internal file scope  variables */
d78 6
a83 1
 int              fitted;
d85 8
a92 23
           
 /* externally defined file global variables */
 extern XImage *    imagel;
 extern XImage *    imager;
 extern int         nsaml, nrowl, nsamr, nrowr;
 extern int         nsam1l,nrow1l,nsam2l,nrow2l;
 extern int         nsam1r,nrow1r,nsam2r,nrow2r;
 extern int         ixull,iyull,ixulr,iyulr, ximoff;
 extern int         ixulli,iyulli,ixulri,iyulri;
 extern int         ixullmin,ixlrlmax,iyullmin,iylrlmax;
 extern int         ixulrmin,ixlrrmax,iyulrmin,iylrrmax;
 extern float       phif, thetaf, gammaff;
 extern Widget      iw_pickmen, iw_fitmen;


 int                nsamsl, nrowsl, nsamsr, nrowsr;
 static FILE    *   fpdoc1 = NULL, *fpdoc2 = NULL;
 int                iradi = 4;      /* marker radius           */
 int                numm  = 1;      /* current marker number   */
 extern int         maxpart;        /* max. marker in doc file */
 extern int         iredu ;         /* image reduction factor  */
 int                left  = TRUE;   /* start with left image   */
 extern char        dfil1[12], dfil2[12];
d101 1
a101 1
    /* set next marker to number already in doc file */
d103 1
a103 1
    /* initialize the first back picking flag */
d106 3
d111 3
d117 1
a117 1
 /* find displayed size of both images */
d123 23
a145 1
 /* open a message window with the following strings  */
d147 1
a147 3
    showbutx("Select left particle.", 
             "Menu.", 
             " ", FALSE);
d149 1
a149 3
    showbutx("Select right particle.", 
             "Menu.", 
             " ", FALSE);
d151 1
a151 2

 /* set the actions for right, left, and center buttons */
d172 1
a172 1
   {  /****************************************** mouse movement only */
d177 1
a177 1
       {    /* cursor is outside of displayed left image */
d182 1
a182 1
       {    /* cursor inside displayed left image */
d192 1
a192 1
       {    /* cursor outside displayed right image */
d197 1
a197 1
       {    /* cursor inside displayed right image */
d204 1
a204 1
    /* should add position indicator in right side window !!!!! */ 
d206 1
a206 1
 /********************************************************left button */ 
d209 1
a209 1
   {   /*  in left image -- button 1 pushed */
d212 1
a212 1
    /* find location inside whole left image */
d218 1
a218 1
       {    /* cursor is outside displayed left image, want inside */
d223 1
a223 1
       {   /* want to record this left particle location */
d229 1
a229 8
       /* Make sure pickmen menu is gone */
       if (iw_pickmen && XtIsManaged(iw_pickmen)) 
              XtUnmanageChild(iw_pickmen);

       if (iw_fitmen && XtIsManaged(iw_fitmen))
              XtUnmanageChild(iw_fitmen);

        /* save info in doc file */ 
d231 1
a231 1
       dlist[1] = numm + ximoff;
d236 1
a236 3
       dlist[6] = 1.0;        
       fpdoc1   = savdn1(dfil1, datexc, &fpdoc1,
                         dlist, 7, &openitl, TRUE, TRUE);
d238 8
a245 1
       /* leave permanent circle at this location */
d249 1
a249 1
       /*   write marker number at this location */
d251 2
a252 2
       witext(icontx, string, ixs, iys, 1, 0, 9, 2, FALSE);
       if(string) free(string);
d254 1
a254 1
       /* find predicted location in right image */
d261 1
a261 1
          /* use angles to get predicted location in tilted image */
d269 1
a269 1
             {    /* predicted cursor loc. is outside of right image, */
d275 1
a275 1
             {   /* warp cursor to predicted location on tilted side */
d283 2
a284 2
          { /* no tilt angle available yet */
          /* warp cursor to center of tilted side */
d294 4
a297 7
       /*  remove message */
       showbutx("","","",TRUE);

       /* open a message window with the following strings  */
       showbutx("Select right particle.", 
                "Menu.", 
                "Reselect left particle.", FALSE);
d299 1
a299 1
       /* record undo location */
d306 1
a306 1
    {                          /*  in right image -- button 1 pushed */
d309 1
a309 1
    /* find location inside whole right image */
d315 1
a315 1
       {    /* cursor outside of displayed right image, want inside */
d320 1
a320 1
       {   /* want to record this location */
d326 1
a326 8
       /* Make sure pickmen menu is gone */
       if (iw_pickmen && XtIsManaged(iw_pickmen)) 
              XtUnmanageChild(iw_pickmen);

       if (iw_fitmen && XtIsManaged(iw_fitmen))
              XtUnmanageChild(iw_fitmen);

        /* save info in doc file */ 
d328 1
a328 1
        dlist[1] = numm + ximoff;
d335 6
a340 2
        fpdoc2   = savdn1(dfil2, datexc, &fpdoc2, 
                         dlist, 7, &openitr, TRUE, TRUE);
d342 1
a342 1
        /* leave permanent circle at this location */
d346 1
a346 1
        /*   write marker number at this location */
d348 1
a348 1
        witext(icontx, string, ixs, iys, 1, 0, 9, 2, FALSE);
d351 4
a354 7
        /*  remove message */
        showbutx("","","",TRUE);

        /* open a message window with the following strings  */
        showbutx("Select left particle.", 
                "Menu.", 
                "Reselect right particle.", FALSE);
d361 1
a361 1
        /* warp cursor to last position of untilted side */
d364 1
a364 1
        /* record undo location */
d370 1
a370 1
 /***************************************************** middle button */ 
d373 1
a373 1
    {                          /* show menu --       button 2 pushed */
d376 1
d380 1
a380 1
    /* display picking menu */
d384 1
a384 1
 /****************************************************** right button */ 
d388 1
a388 1
    {                          /*  in right image -- button 3 pushed */
d391 1
a391 1
    /* warp cursor back to left image location 
d394 4
a397 7
    /*  remove message */
    showbutx("","","",TRUE);

    /* open a message window with the following strings  */
    showbutx("Select left particle.", 
             "Menu.", 
             " ", FALSE);
d405 2
a406 2
    {                          /*  in left image -- button 3 pushed */
    /* warp cursor back to previous right position 
d413 4
a416 7
       /*  remove message */
       showbutx("","","",TRUE);

       /* open a message window with the following strings  */
       showbutx("Select right particle.", 
              "Menu.", 
             " ", FALSE);
@


1.27
log
@altered savdn1 call
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickp.c,v 1.26 1996/04/16 14:27:13 leith Exp leith $*/
d10 23
a32 6
 * COPYRIGHT (C)1992, WADSWORTH CENTER FOR LABORATORIES AND
 * RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.  
 * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     
 * LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  
 * USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF 
 * THE CENTER FOR LABORATORIES AND RESEARCH 			  
@


1.26
log
@openit always used, middle button no longer calls fitsav
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickp.c,v 1.25 1996/04/12 16:25:17 leith Exp leith $*/
d200 1
a200 1
                         dlist, 7, &openitl, TRUE);
d303 1
a303 1
                         dlist, 7, &openitr, TRUE);
@


1.25
log
@removed bad comment
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickp.c,v 1.24 1996/04/05 16:48:41 leith Exp leith $*/
a51 1
 extern int         lim;
a76 1
 /* set new lut for all correct use with x-or */
d83 1
d86 2
a87 2
 openitl = firstrun;
 openitr = firstrun;
a88 3
 if(fpdoc1 == NULL)   openitl = TRUE;
 if(fpdoc2 == NULL)   openitr = TRUE;

d90 4
a93 4
  nsamsl = nsam2l - nsam1l + 1;
  nsamsr = nsam2r - nsam1r + 1;
  nrowsl = nrow2l - nrow1l + 1;
  nrowsr = nrow2r - nrow1r + 1;
d345 1
a345 3
    lim = numm - 1;
    fitsav();

@


1.24
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickp.c,v 1.23 1996/03/25 14:43:22 leith Exp leith $*/
a27 2
 *              aval
 *              bval
@


1.23
log
@minor
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickp.c,v 1.22 1996/03/19 14:15:48 leith Exp leith $*/
d63 1
d65 1
d180 1
a180 1
       spout("*** Not in left image.$");
d190 7
d235 1
a235 1
             spout(outstr);
d282 1
a282 1
       spout("*** Not in right image.$");
d292 7
d352 1
a352 1
    fitsav(TRUE);
@


1.22
log
@removed unused variables
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickp.c,v 1.21 1995/09/06 16:21:56 mladjadj Exp leith $*/
d22 1
a22 3
 * PARAMETERS:	Widget 		iw_temp		pushbutton (not used)
 *		caddr_t		data		label text string
 *		caddr_t		call_data	not used 
d162 2
a163 1
    } 
@


1.21
log
@remove XtUninstallTranslations
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickp.c,v 1.20 1995/08/16 18:04:51 mladjadj Exp $*/
d73 1
a73 3
 extern int         nfd ;     /* doc file number         */
 extern char        dfil1[12],dfil2[12],dfil3[12],dfil4[12];
 extern char        dfil5[12],dfil6[12];
@


1.20
log
@clean out some output msgs
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickp.c,v 1.19 1995/08/14 16:58:38 mladjadj Exp mladjadj $*/
a112 2
 /* remove all translations from iw_win */
 XtUninstallTranslations(iw_win);
d209 1
d305 1
@


1.19
log
@initialize elsewhere iredu...
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/pickp.c,v 1.17 1994/07/05 16:11:25 odesanya Exp $*/
d200 1
a200 7
       dlist[6] = 1.0; 
	    
	printf(" pickp: filename dfil1 %s \n",dfil1);
	printf(" pickp: numm = %f ximoff  = %f \n",dlist[0],ximoff);
	printf(" pickp: ixi*iredu= %f iyi*iredu= %f\n",dlist[2],dlist[3]);
	printf(" pickp: ixi = %f iyi = %f\n",dlist[4],dlist[5]);
	       
d218 1
a218 4
    
	  printf(" pickp: fitted=1 gammaff %f thetaf %f phif %f\n",
	               gammaff, thetaf, phif);
	
@


1.18
log
@clean printf
@
text
@d70 2
a71 2
 int                maxpart = 0;    /* max. marker in doc file */
 int                iredu = 1;      /* image reduction factor  */
d73 3
a75 3
 int                nfd   = -1;     /* doc file number         */
 char               dfil1[12],dfil2[12],dfil3[12],dfil4[12];
 char               dfil5[12],dfil6[12];
d202 5
d224 4
a227 1

@


1.17
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/pickp.c,v 1.16 1994/06/06 11:26:25 odesanya Exp odesanya $*/
d201 2
a202 1
      fpdoc1   = savdn1(dfil1, datexc, &fpdoc1,
d205 1
a205 1
      /* leave permanent circle at this location */
d288 1
a288 1
       /* save info in doc file */ 
d296 1
a296 1

d300 1
a300 1
       /* leave permanent circle at this location */
d304 1
a304 1
       /*   write marker number at this location */
d308 1
a308 1
       /*  remove message */
d311 1
a311 1
       /* open a message window with the following strings  */
d321 1
a321 1
       /* warp cursor to last position of untilted side */
d324 1
a324 1
       /* record undo location */
d355 1
a355 1
   /*  remove message */
d358 1
a358 1
   /* open a message window with the following strings  */
d377 2
a378 2
    /*  remove message */
     showbutx("","","",TRUE);
d380 2
a381 2
    /* open a message window with the following strings  */
    showbutx("Select right particle.", 
d385 1
a385 1
        numm--;
@


1.16
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web/src/RCS/pickp.c,v 1.15 94/06/01 14:06:38 odesanya Exp $*/
d64 1
a64 1
 extern float       phif, thetaf, gammaf;
d220 1
a220 1
          witran(&fx, &fy,  &xt, &yt, 1, gammaf, thetaf, phif);
@


1.15
log
@fixed problem with doc file key number entry
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web/src/RCS/pickp.c,v 1.14 94/05/27 18:47:59 odesanya Exp $*/
d56 1
d74 2
a75 1
 char               dfil1[12],dfil2[12],dfil3[12],dfil4[12],dfil5[12];
d337 3
@


1.14
log
@modified output to doc files
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/pickp.c,v 1.13 94/05/23 11:10:23 leith Exp $*/
d68 1
a68 1
 int                numm  = 0;      /* current marker number   */
d84 1
a84 1
    numm = maxpart;
@


1.13
log
@openitl and r chaned to unitialized
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/pickp.c,v 1.12 94/05/19 17:12:24 leith Exp Locker: leith $*/
d59 1
a59 1
 extern int         ixull,iyull,ixulr,iyulr, xoffset;
a185 1
       numm++;
d193 1
a193 1
       dlist[1] = numm + xoffset;
a198 1

d287 1
a287 1
        dlist[1] = numm + xoffset;
d316 1
a357 1
    numm--;
d379 1
@


1.12
log
@test if files are open before opening openitl etc
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web/src/RCS/pickp.c,v 1.11 94/04/25 10:58:51 leith Exp $*/
d49 1
a49 1
 int              openitl = NULL, openitr = NULL;
@


1.11
log
@removed wisetplanes
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web/src/RCS/pickp.c,v 1.10 94/04/12 15:46:26 leith Exp Locker: leith $*/
d49 1
a49 1
 int              openitl,openitr;
d59 1
a59 2
 extern int         ixull,iyull,ixulr,iyulr;
 extern int         uximoff, tximoff;
d66 1
a66 1
 static FILE    *   fpdoc1, *fpdoc2, *fpdoc3;
d92 3
d133 1
d192 1
a192 1
       /* save info in doc file */ 
d194 1
a194 1
       dlist[1] = uximoff++;
d199 3
a201 2
       dlist[6] = 1.0;       
       fpdoc1   = savdn1(dfil1, datexc, &fpdoc1,
d289 1
a289 1
        dlist[1] = tximoff++;
d294 2
a295 1
        dlist[6] = 1.0;       
d333 1
a333 1
        fclose(fpdoc1); openitl = TRUE;  }
d335 1
a335 1
        fclose(fpdoc2); openitr = TRUE;  }
d347 10
a356 2
    /* warp cursor back to left image location */
    spout("Moving cursor back to left");
d366 2
a367 2
    /* warp cursor back to previous right position */
    spout("Moving cursor back to right");
d372 9
@


1.10
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/pickp.c,v 1.9 94/04/12 13:50:10 leith Exp Locker: leith $*/
d200 1
a200 4
       /*  enable plane 8 only for drawing */
       wisetplanes(idispl,icontx,128);

       /* leave permanent circle at this location */
a207 3
       /*  enable all planes for drawing */
       wisetplanes(idispl,icontx,-1);

a293 3
       /*  enable plane 8 only  for drawing */
        wisetplanes(idispl,icontx,128);

a300 3

       /*  enable all planes for drawing */
        wisetplanes(idispl,icontx,-1);
@


1.9
log
@added pickback stuff
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/pickp.c,v 1.8 94/04/12 12:08:34 leith Exp Locker: leith $*/
d46 1
d86 2
@


1.8
log
@lelan's changes
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/pickp.c,v 1.5 94/03/28 12:30:41 leith Exp $*/
a58 1
 extern char        dfil2[12], dfil1[12];
d66 1
a66 1
 static FILE    *   fpdoc1, *fpdoc2;
d73 1
a73 1
 char               dfil1[12],dfil2[12],dfil3[12],dfil4[12];
@


1.7
log
@updated
@
text
@d60 1
a73 1
 int                ximoff= 0;      /* image file offset       */
d121 2
a122 1
 int           ixr,iyr, ixi,iyi, ixs, iys, ixt, iyt;
d189 1
a189 1
       dlist[1] = ximoff;
d282 4
a285 4
       spoutfile(TRUE);
       sprintf(outstr,"Right:%d  (%d,%d)",numm,ixi,iyi);
       spout(outstr);
       spoutfile(FALSE);
d288 8
a295 8
       dlist[0] = numm;
       dlist[1] = ximoff;
       dlist[2] = ixi * iredu;
       dlist[3] = iyi * iredu;
       dlist[4] = ixi;
       dlist[5] = iyi;       
       dlist[6] = 1.0;       
       fpdoc2   = savdn1(dfil2, datexc, &fpdoc2, 
d299 1
a299 1
       wisetplanes(idispl,icontx,128);
d302 2
a303 2
       xorc(iwin,    icontx, TRUE, ixs, iys, iradi);
       xorc(imagsav, icontx, TRUE, ixs, iys, iradi);
d306 2
a307 2
       string = itoa(numm);
       witext(icontx, string, ixs, iys, 1, 0, 9, 2, FALSE);
d310 1
a310 1
       wisetplanes(idispl,icontx,-1);
d313 1
a313 1
       showbutx("","","",TRUE);
d316 1
a316 1
       showbutx("Select left particle.", 
d320 3
a322 3
       left     = TRUE;
       gotright = TRUE;
       if (numm > maxpart) maxpart = numm;
d324 3
d328 3
a330 8
       ixp  = ixs;
       iyp  = iys;

       /* warp cursor to center of untilted side */
       ixt = ixull + nsamsl / 2;
       iyt = iyull + nrowsl / 2;
       movecur(ixt-ixs,iyt-iys);
        }
@


1.6
log
@used showbutxmes
@
text
@a83 1

a85 7

    /* find displayed size of both images */
    nsamsl = nsam2l - nsam1l + 1;
    nsamsr = nsam2r - nsam1r + 1;
    nrowsl = nrow2l - nrow1l + 1;
    nrowsr = nrow2r - nrow1r + 1;

d91 6
a127 1

a130 1

d132 2
a133 2
       (ixs < ixull || ixs >= ixull + nsam2l || 
        iys < iyull || iys >= iyull + nrow2l))
d147 2
a148 2
       (ixs < ixulr || ixs >= ixulr + nsam2r || 
        iys < iyulr || iys >= iyulr + nrow2r))
d172 2
a173 2
   if (ixs < ixull || ixs >= ixull + nsam2l || 
       iys < iyull || iys >= iyull + nrow2l)
d197 3
d208 3
d233 2
a234 2
             ixr = xt + ixulr + nsam1r;
             iyr = yt + iyulr + nrow1r;
d251 3
d255 3
a257 3
       showbutxmes("Select right particle.", 
                   "Menu.", 
                   "Reselect left particle.");
d273 2
a274 2
    if (ixs < ixulr || ixs >= ixulr + nsam2r || 
        iys < iyulr || iys >= iyulr + nrow2r)
d297 3
d308 6
d315 3
a317 3
       showbutxmes("Select left particle.", 
                   "Menu.", 
                   "Reselect right particle.");
a331 6

#ifdef VMS
   XSetInputFocus(idispl,iwin,RevertToParent,CurrentTime);
#endif


@


1.5
log
@remoed overlut , warped cursor to right in unfitted after left pick
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/pickp.c,v 1.4 94/03/21 12:22:26 leith Exp Locker: leith $*/
d130 1
d134 1
a200 3
       /*  enable plane 8 only for drawing */
       wisetplanes(idispl,icontx,128);

a208 3
       /*  enable all planes for drawing */
       wisetplanes(idispl,icontx,-1);

a248 3
       /*  remove message */
       showbutx("","","",TRUE);

d250 3
a252 3
       showbutx("Select right particle.", 
                "Menu.", 
                "Reselect left particle.", FALSE);
a291 3
       /*  enable plane 8 only  for drawing */
       wisetplanes(idispl,icontx,128);

a299 6
       /*  enable all planes for drawing */
       wisetplanes(idispl,icontx,-1);

       /*  remove message */
       showbutx("","","",TRUE);

d301 3
a303 3
       showbutx("Select left particle.", 
                "Menu.", 
                "Reselect right particle.", FALSE);
d318 6
@


1.4
log
@changes for vax
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/pickp.c,v 1.3 93/11/29 10:35:33 leith Exp $*/
d39 1
a40 20
 /* external function prototypes */
 extern void    showbutx  (char *, char *, char *, int);
 extern void    actions   (Widget, char *, void (*)(), char*);
 extern void    spout     (char *);
 extern void    xorc      (Window, GC, int, int, int, int);
 extern void    getloc    (XEvent *, char, int *, int *);
 extern void    fitdocmen (Widget, caddr_t, caddr_t);
 extern void    pickmen   (Widget, caddr_t, caddr_t);
 extern FILE *  savdn1    (char *, char *, FILE **, float *, 
                           int,int *,int);
 extern void    overlut   (void);
 extern int     wisetplanes(Display *, GC, int);
 extern void    witran    (float *, float *, float *, float *, int,
			   float, float, float);
 extern void   witext     (GC, char *, int, int,int, int, 
                           int, int, int);
 extern char * itoa       (int);
 extern void   movecur    (int, int);
 extern int    wicolor    (GC, int);

d47 1
a47 1
 /* internal common variables */
d52 1
a52 1
 /* externally defined file variables */
a83 3
    /*  set overlay drawing and set drawing color */
    overlut();
    wicolor(icontx,icolorov);
d183 1
d186 1
d239 1
d241 7
d283 1
a283 1

d286 1
d345 1
a345 1
    pickmen(NULL,NULL,NULL);
@


1.3
log
@altered doc file contents
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/pickp.c,v 1.2 93/11/22 16:54:44 leith Exp Locker: leith $*/
d85 1
a85 1
 static FILE    *   fpdoc1,*fpdoc2;
d216 1
a216 1
       fpdoc1    = savdn1(dfil1, datexc, &fpdoc1,
d254 1
a254 1
             {   /* warp cursor to predicted location on titled side */
d351 5
d387 1
a387 1
    }     
@


1.2
log
@fixed
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/pickp.c,v 1.1 93/11/16 14:13:47 leith Exp Locker: leith $*/
d215 1
d217 1
a217 1
                         dlist, 6, &openitl, TRUE);
d306 1
d308 1
a308 1
                         dlist, 6, &openitr, TRUE);
@


1.1
log
@Initial revision
@
text
@a0 1
/*$Header$*/
d2 2
d84 1
d109 7
d145 2
a146 3
 int           ixl,iyl, ixr,iyr, ixi,iyi, ixs, iys, ipix, irect;
 static int    ixp, iyp, ixt, iyt;
 float         fval;
a195 3
    ixl    = ixi;
    iyl    = iyi;

d242 2
a243 2
          ixr = xt + ixulr + nsam1r;
          iyr = yt + iyulr + nrow1r;
d245 5
a249 3
          if ((ixr < 1 || ixr > nsamr || iyr < 1 || iyr > nrowr))
             {    /* cursor is outside of right image, */
             sprintf(outstr,"*** Tilted not in right image: (%d,%d)$",ixr,iyr);
d253 3
a255 1
             {   /* warp cursor to predicted location */
d337 6
a342 1
       }
@
