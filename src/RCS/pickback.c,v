head	1.15;
access;
symbols
	pre-tilt-improve:1.14
	pre_surf_fromtop:1.14
	pre_neednewmap:1.14
	pre_apppluss_remove:1.14
	pre_tiltpair_chng:1.14
	pre_GPL:1.13;
locks;
comment	@ * @;


1.15
date	2015.09.01.17.53.27;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.18.16.59.50;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	96.05.13.14.39.56;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	96.05.01.16.13.46;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	96.04.16.14.26.09;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	96.04.05.16.48.50;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	95.09.06.16.19.46;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	94.08.24.20.56.59;	author odesanya;	state Exp;
branches;
next	1.7;

1.7
date	94.08.23.17.13.40;	author odesanya;	state Exp;
branches;
next	1.6;

1.6
date	94.07.05.16.11.18;	author odesanya;	state Exp;
branches;
next	1.5;

1.5
date	94.06.08.12.38.33;	author odesanya;	state Exp;
branches;
next	1.4;

1.4
date	94.06.06.11.27.11;	author odesanya;	state Exp;
branches;
next	1.3;

1.3
date	94.04.18.11.09.07;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.04.12.15.46.19;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.04.12.14.26.47;	author leith;	state Exp;
branches;
next	;


desc
@new
@


1.15
log
@$2
@
text
@
/*$Header: /usr8/web/src/RCS/pickback.c,v 1.14 2005/10/18 16:59:50 leith Exp $*/

/*
 ***********************************************************************
 *
 * pickback.c
 *
 ***********************************************************************
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2015  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
 ***********************************************************************
 * 
 * 
 * PURPOSE:     Interactive tilt-pair background window selection      
 * 
 * PARAMETERS:	 
 *
 * VARIABLES:   
 *
 ***********************************************************************
*/

#include "common.h"
#include "routines.h"

 /* Internally defined  functions */
 void               pickback_pop (Widget, XEvent *, String *, Cardinal *);
          
 /* Externally defined global variables */
 extern char        dfil4[12], dfil5[12];
 extern int         nsam1l,nrow1l,nsam2l,nrow2l;
 extern int         nsam1r,nrow1r,nsam2r,nrow2r;
 extern int         ixull, iyull, ixulr, iyulr;
 extern int         ixulli,iyulli,ixulri,iyulri;
 extern int         ixulw, iyulw, nsamw, nroww;
 extern int         iredu;               /* Image reduction factor  */
 extern int         fitted;
 extern float       phif, thetaf, gammaff;
 extern FILEDATA *  filedatal;
 extern FILEDATA *  filedatar;
 extern int         firstback;
 extern GC          icontxor;
 extern int         maxpart;

 /* Internal file scope variables */
 static int         nsamsl, nrowsl, nsamsr, nrowsr;
 static int         openitl, openitr;
 static int         gotright = FALSE;
 static int         left     = TRUE;    /* Start with left image   */

 /* Global variables defined here */
 int                back_win_now;       /* Current window number   */
 FILE *             fpdoc4;             /* Used by: pickbackmen.c  */
 FILE *             fpdoc5;             /* Used by: pickbackmen.c  */

 /***********************  pick  ***********************************/

 void pickback(int firstrun)

 {
 openitl   = firstrun;
 openitr   = firstrun;
 firstback = FALSE;

 /* Find displayed size of both images */
 nsamsl = nsam2l - nsam1l + 1;
 nsamsr = nsam2r - nsam1r + 1;
 nrowsl = nrow2l - nrow1l + 1;
 nrowsr = nrow2r - nrow1r + 1;

 gotright = FALSE;
 left     = TRUE;

 /* Open a message window with the following strings  */
 showbutx("Select left background window.", 
          "Show background window menu.", 
          " ", FALSE);

 /* Set the actions for right, left, and center buttons */
 actions(iw_win, "pickback_pop", pickback_pop,"M123");
 }

 /************************* pickback_pop **************************/

 void pickback_pop(Widget iw_t, XEvent *event, String *params,
                   Cardinal *num_params)
 {
 char          outstr[60];
 float         dlist[8];
 int           ixr,iyr, ixs, iys, ixt, iyt;
 static int    ixp, iyp;
 float         xt,yt,  fx,fy, aver;

 char          strwin1[] = "Window Locations in Untilted File "; 
 char          strwin2[] = "Window Locations in Tilted File "; 

 char          strwin[] = 
  "Window    Average         Reduced-X,Y-location     Columns        Rows         Flag"; 

 if (!(strcmp(*params, "M")))
   {  // ******************************************** Mouse movement only 

   getloc(event,'m',&ixs,&iys);
   if (left && 
       (ixs < ixull || ixs >= ixull + nsamsl || 
        iys < iyull || iys >= iyull + nrowsl ))
       {    /* Cursor outside of displayed left image */
       spouto("*** Not in left image.");
       }

    else if (!left &&
       (ixs < ixulr || ixs >= ixulr + nsamsr || 
        iys < iyulr || iys >= iyulr + nrowsr ))
       {    /* Cursor outside displayed right image */
       spouto("*** Not in right image.");
       }
    else
       spouto("                        ");

    /* Draw xor box */
    xorbox(iwin,    icontxor, FALSE, ixs, iys, nsamw, nroww);
#ifndef WEB_TRUE    
    xorbox(imagsav, icontxor, FALSE, ixs, iys, nsamw, nroww);
#endif 
    } 

 // ******************************************************** Left button  

 else if (left && !(strcmp(*params, "1")))
   {   /*  Want box in left image -- button 1 pushed */
    getloc(event,'B',&ixs,&iys);

    /* Find location inside whole left image */
    ixulw    = ixs - ixulli + 1;
    iyulw    = iys - iyulli + 1;

   if (ixs < ixull || ixs >= ixull + nsamsl || 
       iys < iyull || iys >= iyull + nrowsl )
       {       /* Cursor is outside displayed left image, want inside */
       spouto("*** Not in left image."); XBell(idispl,50);
       }

    else 
       {   /* Want to record left background window location */
       spoutfile(TRUE);
       sprintf(outstr,"Left window:  %d (%d,%d)",back_win_now,ixulw,iyulw);
       spout(outstr);
       spoutfile(FALSE);

       /* Leave permanent box at this location  */
#ifndef WEB_TRUE    
       xorbox(iwin,    icontxor, TRUE, ixs, iys, nsamw, nroww);
#endif 
       xorbox(imagsav, icontxor, TRUE, ixs, iys, nsamw, nroww);  

       /* Find average within window */
       rcaver(filedatal, nsaml, nrowl, nsamw, nroww, 
              ixulw, iyulw,  &aver);

       /* Save info in doc file */        
       dlist[0] = back_win_now;
       dlist[1] = aver;
       dlist[2] = ixulw * iredu;
       dlist[3] = iyulw * iredu;
       dlist[4] = nsamw;
       dlist[5] = nroww;       
       dlist[6] = 1.0;       
       if (openitl)      
          {
          fpdoc4 = savdnc(dfil4, datexc, &fpdoc4,
                          dlist, 0, &openitl, TRUE, TRUE,strwin1);
          fpdoc4 = savdnc(dfil4, datexc, &fpdoc4,
                          dlist, 0, &openitl, TRUE, FALSE,strwin);
          }
       fpdoc4 = savdn1(dfil4, datexc, &fpdoc4,
                             dlist, 7, &openitl, TRUE, FALSE);

       /* Find predicted location in right image */
       if (fitted)
          {
          /* Transform the values */
          fx = (float)ixulw;
          fy = (float)iyulw;

          /* Use angles to get predicted location in tilted image */
          witran(&fx, &fy,  &xt, &yt, 1, gammaff, thetaf, phif);

          ixt = xt;
          iyt = yt;

          if ((ixt < 1 || ixt > ixulr + nsamsr ||
               iyt < 1 || iyt > iyulr + nrowsr))
             {    /* Predicted  loc. is outside of right image, */
             sprintf(outstr,"*** Window not in right image: (%d,%d)",
                             ixt,iyt);
             spout(outstr);
             }
          else
             {   /* Warp cursor to predicted location on tilted side */
             ixr = ixt + ixulri;
             iyr = iyt + iyulri;

             movecur(ixr-ixs,iyr-iys);

             /* Draw box at this location */
             xorbox(iwin,    icontxor, FALSE, ixr, iyr, nsamw, nroww);
#ifndef WEB_TRUE    
             xorbox(imagsav, icontxor, FALSE, ixr, iyr, nsamw, nroww); 
#endif 
             }
          }
       else
          { /* No tilt angle available yet */

          /* Warp cursor to center of tilted side */
          ixt = ixulr + nsamsr / 2;
          iyt = iyulr + nrowsr / 2;

          movecur(ixt-ixs,iyt-iys);

          /* Draw box at this location  */
          xorbox(iwin,    icontxor, TRUE, ixt, iyt, nsamw, nroww);
#ifndef WEB_TRUE    
          xorbox(imagsav, icontxor, TRUE, ixt, iyt, nsamw, nroww);
#endif 
          } 

       left     = FALSE;
       gotright = FALSE;

       /*  Remove message */
       showbutx("","","",TRUE);

       /* Open a message window with the following strings  */
       showbutx("Select right background window.", 
                "Show background window menu.", 
                "Reselect left window.", FALSE);

       /* Record undo location */
       ixp  = ixs;
       iyp  = iys;
       }
    }

 else if (!(strcmp(*params, "1")))
    {             /*  Want box in right image -- Button 1 pushed */
    getloc(event,'B',&ixs,&iys);

    /* Find location inside whole right image */
    ixulw    = ixs - ixulri + 1;
    iyulw    = iys - iyulri + 1; 

    if (ixs < ixulr || ixs >= ixulr + nsamsr || 
        iys < iyulr || iys >= iyulr + nrowsr )
       {    /* Cursor outside of displayed right image, want inside */
       spouto("*** Window not in right image."); XBell(idispl,50);
       }
 

    else 
       {   /* Want to average this location */
       spoutfile(TRUE);
       sprintf(outstr,"Right window: %d  (%d,%d)",back_win_now,ixulw,iyulw);
       spout(outstr);
       spoutfile(FALSE);

       /* Leave permanent box at this location */ 
#ifndef WEB_TRUE    
       xorbox(iwin,    icontxor, TRUE, ixs, iys, nsamw, nroww);
#endif
       xorbox(imagsav, icontxor, TRUE, ixs, iys, nsamw, nroww);   

       /* Find average within window */
       rcaver(filedatar, nsamr, nrowr, nsamw, nroww,
              ixulw, iyulw,  &aver);

       /* Save info in doc file */ 
       dlist[0] = back_win_now;
       dlist[1] = aver;
       dlist[2] = ixulw * iredu;
       dlist[3] = iyulw * iredu;
       dlist[4] = nsamw;
       dlist[5] = nroww;       
       dlist[6] = 1.0;  
       if (openitr)      
          {
          fpdoc5 = savdnc(dfil5, datexc, &fpdoc5,
                           dlist, 0, &openitr, TRUE, TRUE, strwin2);
          fpdoc5 = savdnc(dfil5, datexc, &fpdoc5,
                           dlist, 0, &openitr, TRUE, FALSE,strwin);
          }
       fpdoc5 = savdn1(dfil5, datexc, &fpdoc5,
                       dlist, 7, &openitr, TRUE, FALSE);
      
       /*  Remove button message */
       showbutx("","","",TRUE);

       /* Open a button message window with following strings */
       showbutx("Select left background window.", 
                "Show background window menu.", 
                "Reselect right window.", FALSE);

       left     = TRUE;
       gotright = TRUE;
       back_win_now++;

       // Update widgit for back_win_now
       pickbackmen();

       /* Warp cursor to last position of untilted side */
       movecur(ixp-ixs,iyp-iys);

       /* Record undo location */
       ixp  = ixs;
       iyp  = iys;

       /* Draw box at previous location on left side */  
       xorbox(iwin,    icontxor, TRUE, ixp, iyp, nsamw, nroww);
#ifndef WEB_TRUE    
       xorbox(imagsav, icontxor, TRUE, ixp, iyp, nsamw, nroww);
#endif 
       }
    }

 /***************************************************** Middle button */ 

 else if (!(strcmp(*params, "2")))
    {     /* Show menu --       Button 2 pushed */
    pickbackmen();
    }

 /****************************************************** Right button */ 

 else if (!left && !(strcmp(*params, "3")))

    {     /*  In right image -- Button 3 pushed */
    getloc(event,'B',&ixs,&iys);

    /* Warp cursor back to left image location */
    spout("Moving cursor back to left");
    movecur(ixp-ixs, iyp-iys);
 
    /* Draw box at previous location on  other side  */ 
    xorbox(iwin,    icontxor, FALSE, ixp, iyp, nsamw, nroww);
#ifndef WEB_TRUE    
    xorbox(imagsav, icontxor, FALSE, ixp, iyp, nsamw, nroww); 
#endif 

    back_win_now--;

    /* Update text box for window key number */
    pickbackmen();

    left = TRUE;
    ixp = ixs; iyp = iys;
    }

 else if (!(strcmp(*params, "3")))
    {                          /*  In left image -- button 3 pushed */
    /* Warp cursor back to previous right position */
    spout("Moving cursor back to right");

    if (gotright) 
       {
       getloc(event,'B',&ixs,&iys);
       left = FALSE;

       movecur(ixp-ixs, iyp-iys);

       /* Draw box at previous location on  other side */ 
       xorbox(iwin,    icontxor, FALSE, ixp, iyp, nsamw, nroww);
#ifndef WEB_TRUE    
       xorbox(imagsav, icontxor, FALSE, ixp, iyp, nsamw, nroww); 
#endif 
       ixp  = ixs; iyp = iys;
       }
    }             
 }
@


1.14
log
@GPL
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickback.c,v 1.13 1996/05/13 14:39:56 leith Exp $*/
d11 1
a11 1
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
a33 1
 *
d36 1
a36 1
 * PURPOSE:     Interactive tilt-pair background selecting      
d48 2
a49 2
 /* internal functions */
 void           pickback_pop (Widget, XEvent *, String *, Cardinal *);
d51 2
a52 1
 /* externally defined file global variables */
d55 1
a55 2
 extern int         ixull,iyull,ixulr,iyulr;
 extern char        dfil4[12], dfil5[12];
d57 3
a59 3
 extern int         ixulw,iyulw,nsamw,nroww;
 extern int         iredu;          /* image reduction factor  */
 extern int         fitted, lbnum;
d61 2
a62 2
 extern FILEDATA*   filedatal;
 extern FILEDATA*   filedatar;
d65 1
a65 1
 extern             int maxpart;
d67 1
a67 2
 /* internal file scope  variables */
 static int         gotright = FALSE;
a68 2
 static int         maxbox = 0;     /* max. box  in doc file   */
 static int         left  = TRUE;   /* start with left image   */
d70 2
d73 4
a76 3
 /* global variables */
 int                numb;           /* current window number   */
 FILE    *          fpdoc4, *fpdoc5;
d83 2
a84 2
 openitl = firstrun;
 openitr = firstrun;
d87 1
a87 1
 /* find displayed size of both images */
d96 1
a96 1
 /* open a message window with the following strings  */
d98 1
a98 1
          "Menu.", 
d101 1
a101 2

 /* set the actions for right, left, and center buttons */
d108 1
a108 1
               Cardinal *num_params)
d110 2
a113 2
 char          outstr[60];
 float         dlist[8];
d116 6
d123 2
a124 1
   {  /****************************************** mouse movement only */
d129 1
a129 1
       {    /* cursor outside of displayed left image */
d136 1
a136 1
       {    /* cursor outside displayed right image */
d142 1
a142 1
    /* draw xor box */
d144 3
a146 1
    xorbox(imagsav, icontxor, FALSE, ixs, iys, nsamw, nroww); 
d149 1
a149 1
 /********************************************************left button */ 
d152 1
a152 1
   {   /*  in left image -- button 1 pushed */
d155 1
a155 1
    /* find location inside whole left image */
d161 2
a162 2
       {       /* cursor is outside displayed left image, want inside */
       spouto("*** Not in left image.");
d166 1
a166 2
       {   /* want to record left background window location */
       numb++;
d168 1
a168 1
       sprintf(outstr,"Left window: %d (%d,%d)",numb,ixulw,iyulw);
d172 4
a175 2
       /* leave permanent box at this location  */
       xorbox(iwin,    icontxor, TRUE, ixs, iys, nsamw, nroww); 
d178 1
a178 1
       /* find average within window */
d182 2
a183 2
       /* save info in doc file */        
       dlist[0] = numb;
d190 9
a198 2
       fpdoc4   = savdn1(dfil4, datexc, &fpdoc4,
                         dlist, 7, &openitl, TRUE, TRUE);
d200 1
a200 1
       /* find predicted location in right image */
d203 1
a203 1
          /* transform the values */
d207 1
a207 1
          /* use angles to get predicted location in tilted image */
d215 2
a216 2
             {    /* predicted  loc. is outside of right image, */
             sprintf(outstr,"*** Tilted not in right image: (%d,%d)",
d221 1
a221 1
             {   /* warp cursor to predicted location on tilted side */
d227 1
a227 1
             /* draw box at this location */
d229 1
d231 1
d235 3
a237 2
          { /* no tilt angle available yet */
          /* warp cursor to center of tilted side */
d243 1
a243 1
          /* draw box at this location  */
d245 1
d247 1
a251 1
       if (numb > maxbox) maxbox = numb;
d253 1
a253 1
       /*  remove message */
d256 1
a256 1
       /* open a message window with the following strings  */
d258 1
a258 1
                "Menu.", 
d261 1
a261 1
       /* record undo location */
d268 1
a268 1
    {                          /*  in right image -- button 1 pushed */
d271 1
a271 1
    /* find location inside whole right image */
d277 2
a278 2
       {    /* cursor outside of displayed right image, want inside */
       spouto("*** Not in right image.");
d280 1
d283 1
a283 1
       {   /* want to record this location */
d285 1
a285 1
       sprintf(outstr,"Right window:%d  (%d,%d)",numb,ixulw,iyulw);
d289 2
a290 1
       /* leave permanent box at this location 
d292 2
a293 1
       xorbox(imagsav, icontxor, TRUE, ixs, iys, nsamw, nroww);  */
d295 1
a295 1
       /* find average within window */
d299 2
a300 3

       /* save info in doc file */ 
       dlist[0] = numb;
d306 12
a317 5
       dlist[6] = 1.0;       
       fpdoc5   = savdn1(dfil5, datexc, &fpdoc5,
                         dlist, 7, &openitr, TRUE, TRUE);

       /*  remove message */
d320 1
a320 1
       /* open a message window with the following strings  */
d322 1
a322 1
                "Menu.", 
d327 4
a330 1
       if (numb > maxbox) maxbox = numb;
d332 2
a333 2
       /* warp cursor to last position of untilted side */
        movecur(ixp-ixs,iyp-iys);
d335 1
a335 1
       /* record undo location */
d339 1
a339 1
       /* draw box at previous location on left side */  
d341 3
a343 1
       xorbox(imagsav, icontxor, TRUE, ixp, iyp, nsamw, nroww); 
d347 1
a347 1
 /***************************************************** middle button */ 
d350 1
a350 4
    {                          /* show menu --       button 2 pushed */
    lbnum = numb;
    fitsav(maxpart);

d354 1
a354 1
 /****************************************************** right button */ 
d358 1
a358 1
    {                          /*  in right image -- button 3 pushed */
d361 1
a361 1
    /* warp cursor back to left image location */
d365 1
a365 1
    /* draw box at previous location on  other side  */ 
d367 1
d369 3
d373 4
a376 2
    numb--;
   left = TRUE;
d381 2
a382 2
    {                          /*  in left image -- button 3 pushed */
    /* warp cursor back to previous right position */
d391 2
a392 1
       /* draw box at previous location on  other side */ 
d394 1
d396 1
@


1.13
log
@used spouts
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickback.c,v 1.12 1996/05/01 16:13:46 leith Exp leith $*/
d10 23
a32 6
 * COPYRIGHT (C)1992, WADSWORTH CENTER FOR LABORATORIES AND
 * RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.  
 * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     
 * LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  
 * USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF 
 * THE CENTER FOR LABORATORIES AND RESEARCH 			  
@


1.12
log
@altered savdn1 call
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickback.c,v 1.11 1996/04/16 14:26:09 leith Exp leith $*/
d108 1
a108 1
       spout("*** Not in left image.$");
d115 1
a115 1
       spout("*** Not in right image.$");
d118 1
a118 1
       spout("                        $");
d138 1
a138 1
       spout("*** Not in left image.$");
d242 1
a242 1
       spout("*** Not in right image.$");
@


1.11
log
@altered fitsav parameter to maxpart
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickback.c,v 1.10 1996/04/05 16:48:50 leith Exp leith $*/
d166 1
a166 1
                         dlist, 7, &openitl, TRUE);
d270 1
a270 1
                         dlist, 7, &openitr, TRUE);
@


1.10
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickback.c,v 1.9 1995/09/06 16:19:46 mladjadj Exp leith $*/
d22 1
a22 3
 * PARAMETERS:	Widget 		iw_temp		pushbutton (not used)
 *		caddr_t		data		label text string
 *		caddr_t		call_data	not used 
d49 1
d210 2
a211 2
          xorbox(imagsav, icontxor, TRUE, ixt, iyt, nsamw, nroww); /*false*/
          }
d292 1
a292 1
/*false*/       xorbox(iwin,    icontxor, TRUE, ixp, iyp, nsamw, nroww);
a293 1

d302 1
a302 1
    fitsav();
@


1.9
log
@remove XtUninstallTranslations
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/pickback.c,v 1.8 1994/08/24 20:56:59 odesanya Exp $*/
d304 1
a304 1
    fitsav(TRUE);
@


1.8
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/pickback.c,v 1.6 1994/07/05 16:11:18 odesanya Exp $*/
a85 2
 /* remove all translations from iw_win */
 XtUninstallTranslations(iw_win);
@


1.7
log
@*** empty log message ***
@
text
@d158 1
a158 1
              ixulw, iyulw, ixull, &aver);
d261 1
a261 1
              ixulw, iyulw, ixulr, &aver);
@


1.6
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/pickback.c,v 1.5 1994/06/08 12:38:33 odesanya Exp odesanya $*/
d158 1
a158 1
              ixulw, iyulw, &aver);
d261 1
a261 1
              ixulw, iyulw, &aver);
@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web/src/RCS/pickback.c,v 1.3 94/04/18 11:09:07 leith Exp $*/
d46 1
a46 1
 extern float       phif, thetaf, gammaf;
d179 1
a179 1
          witran(&fx, &fy,  &xt, &yt, 1, gammaf, thetaf, phif);
@


1.4
log
@*** empty log message ***
@
text
@d125 1
a125 1
    xorbox(imagsav, icontxor, FALSE, ixs, iys, nsamw, nroww);
d152 3
a154 3
       /* leave permanent box at this location */
       xorbox(iwin,    icontxor, TRUE, ixs, iys, nsamw, nroww);
       xorbox(imagsav, icontxor, TRUE, ixs, iys, nsamw, nroww);
d192 1
a192 1
             {   /* warp box to predicted location on tilted side */
d196 2
d205 1
a205 1
          /* warp box to center of tilted side */
d209 2
d212 2
a213 2
          xorbox(iwin,    icontxor, FALSE, ixt, iyt, nsamw, nroww);
          xorbox(imagsav, icontxor, FALSE, ixt, iyt, nsamw, nroww);
d255 1
a255 1
       /* leave permanent box at this location */
d257 1
a257 1
       xorbox(imagsav, icontxor, TRUE, ixs, iys, nsamw, nroww);
d287 3
d294 4
a297 3
       /* warp box to previous location on  other side */ 
       xorbox(iwin,    icontxor, FALSE, ixp, iyp, nsamw, nroww);
       xorbox(imagsav, icontxor, FALSE, ixp, iyp, nsamw, nroww);
d320 3
a322 2

    /* warp box to previous location on  other side  */ 
d327 1
a327 1
    left = TRUE;
d341 2
a342 1
       /* warp box to previous location on  other side */ 
@


1.3
log
@lekan's bug fixes
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/pickback.c,v 1.1 94/04/12 14:26:47 leith Exp Locker: leith $*/
d45 1
a45 1
 extern int         fitted;
d160 1
a160 1
       /* save info in doc file */ 
d297 3
@


1.2
log
@*** empty log message ***
@
text
@d50 1
a61 1
 GC                 icontxor;
a88 3
 /* create an xor graphics context */
 icontxor = setxor(icontx);

d121 1
a121 1
       spout("                       $");
d152 4
d158 1
a158 1
              ixulw * iredu, iyulw * iredu, &aver);
d167 1
a167 1
       dlist[6] = 0.0;       
a170 4
       /* leave permanent box at this location */
       xorbox(iwin,    icontxor, TRUE, ixs, iys, nsamw, nroww);
       xorbox(imagsav, icontxor, TRUE, ixs, iys, nsamw, nroww);

d198 1
a198 1
             xorbox(imagsav, icontxor, FALSE, ixr, iyr, nsamw, nroww);
d207 1
a207 1
          /* draw box at this location */
d251 4
d257 1
a257 1
              ixulw * iredu, iyulw * iredu, &aver);
d267 1
a267 1
       dlist[6] = 0.0;       
a270 4
       /* leave permanent box at this location */
       xorbox(iwin,    icontxor, TRUE, ixs, iys, nsamw, nroww);
       xorbox(imagsav, icontxor, TRUE, ixs, iys, nsamw, nroww);

d275 1
a275 1
       showbutx("Select left particle.", 
d277 1
a277 1
                "Reselect right particle.", FALSE);
d287 1
a287 1
       /* warp box to previous location on  other sider */
d309 2
a310 2
    
    /* warp box to previous location on  other sider */
d312 1
a312 1
    xorbox(imagsav, icontxor, FALSE, ixp, iyp, nsamw, nroww);
d329 1
a329 1
       /* warp box to previous location on  other sider */
d331 1
a331 1
       xorbox(imagsav, icontxor, FALSE, ixp, iyp, nsamw, nroww);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/pickp.c,v 1.7 94/04/07 13:45:51 leith Exp $*/
d36 1
a36 2

           
d49 1
a52 1
 static FILE    *   fpdoc4, *fpdoc5;
d60 2
d70 1
d73 4
a76 4
  nsamsl = nsam2l - nsam1l + 1;
  nsamsr = nsam2r - nsam1r + 1;
  nrowsl = nrow2l - nrow1l + 1;
  nrowsr = nrow2r - nrow1r + 1;
d78 2
a79 2
  gotright = FALSE;
  left     = TRUE;
d89 3
d123 2
d127 2
a128 2
    xorbox(iwin,    icontx, FALSE, ixs, iys, nsamw, nroww);
    xorbox(imagsav, icontx, FALSE, ixs, iys, nsamw, nroww);
d171 2
a172 2
       xorbox(iwin,    icontx, TRUE, ixs, iys, nsamw, nroww);
       xorbox(imagsav, icontx, TRUE, ixs, iys, nsamw, nroww);
d200 2
a201 2
             xorbox(iwin,    icontx, FALSE, ixr, iyr, nsamw, nroww);
             xorbox(imagsav, icontx, FALSE, ixr, iyr, nsamw, nroww);
d211 2
a212 2
          xorbox(iwin,    icontx, FALSE, ixt, iyt, nsamw, nroww);
          xorbox(imagsav, icontx, FALSE, ixt, iyt, nsamw, nroww);
d271 2
a272 2
       xorbox(iwin,    icontx, TRUE, ixs, iys, nsamw, nroww);
       xorbox(imagsav, icontx, TRUE, ixs, iys, nsamw, nroww);
d291 2
a292 2
       xorbox(iwin,    icontx, FALSE, ixp, iyp, nsamw, nroww);
       xorbox(imagsav, icontx, FALSE, ixp, iyp, nsamw, nroww);
d314 2
a315 2
    xorbox(iwin,    icontx, FALSE, ixp, iyp, nsamw, nroww);
    xorbox(imagsav, icontx, FALSE, ixp, iyp, nsamw, nroww);
d333 2
a334 2
       xorbox(iwin,    icontx, FALSE, ixp, iyp, nsamw, nroww);
       xorbox(imagsav, icontx, FALSE, ixp, iyp, nsamw, nroww);
@
