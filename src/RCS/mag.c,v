head	1.7;
access;
symbols
	pre-tilt-improve:1.7
	pre_surf_fromtop:1.7
	pre_neednewmap:1.5
	pre_apppluss_remove:1.5
	pre_tiltpair_chng:1.5
	pre_GPL:1.4;
locks;
comment	@ * @;


1.7
date	2011.09.23.12.46.54;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.21.13.31.12;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.18.17.00.00;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.09.06.16.18.55;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.03.30.15.55.04;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.02.14.12.14.10;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.10.10.11.51;	author leith;	state Exp;
branches;
next	;


desc
@@


1.7
log
@up key stops mag in truecolor
@
text
@
/*$Header: /usr8/web/src/RCS/mag.c,v 1.6 2011/09/21 13:31:12 leith Exp leith $*/
/*
C++*************************************************************************
C
C mag.c -- Created                            July 92
C          Rewrite                            Nov  92                                                                    
C **********************************************************************
C *  AUTHOR: YANHONG LI                                                      *
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
C **********************************************************************
C
C    mag(...)
C
C    PARAMETERS:   iw_temp, data, call_data (usual callback data)
C
C    PURPOSE: MAGNIFICATION
C
C    CALLED BY:    web_com
C
C--********************************************************************
*/


 /* Common variables */
#include "common.h"
#include "routines.h"

 /* Internal function  prototypes */
 void 	      mag_pop(Widget, XEvent *, String *, Cardinal *);
 extern void  glass  (Window , Window , int , int ,
                      int , int , int *, int *, int );

 /* Internal file variables */
 static GC     icontxx;
 static int    first=1, erase=0;
 static int    lasx=0, lasy=0;
 static int    lasmagx=0, lasmagy=0;
 static int    ix3=0, iy3=0;
 static Pixmap iglassav=0;

/*****************************  mag  *********************************/

 void mag(Widget iw_temp, caddr_t data, caddr_t call_data)

 {
 /* Make a xor graphics context (icontxx)	*/
 icontxx = setxor(icontx);

 /* Open a message window with the following strings	*/
 showbutx( "Set temporary glass location.",
           "Set permanent glass location.",
	   "Stop this routine.", FALSE);

 /* Set the action from right, left, and center buttons */
 actions(iw_win, "mag_pop", mag_pop, "M123L");
	
 /* Turn on Xor writing in icontxx	*/
 icontxx = setxor( icontx );
 }


/***********************  mag_pop  **************************/

static int       ix1, iy1;        /* Mouse position */
static int       ix2, iy2;
static Boolean   leftdown = FALSE;

void mag_pop(Widget iw_t, XEvent *event, String *params,
             Cardinal *num_params)
    {

    /* Get mouse position ix1,iy1. */
    getloc( event, 'M', &ix1, &iy1 );
	
	
    if ( !(strcmp(*params,"M")) && !leftdown )
        /* Cursor moved. Erase and draw a new box */
        {
        xorbox(iwin, icontxx, FALSE, ix1, iy1, magsizx, magsizy);    
        }
	
    else if (!(strcmp(*params, "1")))
        /* Left button pushed. 	*/
        /* Erase the old box first, draw a new one */
        {
    	xorbox(iwin, icontxx, 1, ix1, iy1,magsizx, magsizy);
    	if (erase)
      	    XCopyArea(idispl, imagsav, iwin, icontx, ix3,iy3,
		     lasmagx, lasmagy, ix3, iy3);

	/* Show magnified area	*/
    	glass(iwin, iwin, ix1, iy1, FALSE, FALSE, &ix2, &iy2, TRUE);

        leftdown = TRUE;

        }
    else if (!(strcmp(*params,"L")))    /* Left button up */
        {
	/* Redraw the box	*/
    	xorbox(iwin, icontxx, 1, ix1, iy1, magsizx, magsizy);
#ifndef WEB_TRUE
    	xorbox(iwin, icontxx, 1, ix1, iy1, magsizx, magsizy);
#endif

  	/* Remember the last magnification varibles */
    	erase    = 1;
    	first    = 0;
    	lasmagx  = magsizx * magfac;
    	lasmagy  = magsizy * magfac;
    	ix3      = ix2;
    	iy3      = iy2;

        leftdown = FALSE;
        }

    else if (!(strcmp(*params, "2")))
        /* Center button pushed	*/
        /* Make permanent magnification	*/
        {
    	xorbox(iwin, icontxx, 1, ix1, iy1, magsizx, magsizy);
    	if (erase)
      	    XCopyArea(idispl, imagsav, iwin, icontx, ix3,iy3,
                      lasmagx, lasmagy, ix3, iy3);

	/* Show magnified area	*/
    	glass(iwin, iwin, ix1, iy1, 1, FALSE, &ix2, &iy2, TRUE);

	/* Redraw the box	*/
   	xorbox(iwin, icontxx, 1, ix1, iy1,magsizx, magsizy);
    	xorbox(iwin, icontxx, 1, ix1, iy1,magsizx, magsizy);

	/* Remember the last magnification varibles	*/
    	erase    = 0;
    	first    = FALSE;
        leftdown = FALSE;
        }
	
	
    else if (!(strcmp(*params, "3")))
        /* Right button pushed	        */
        /* Stop this function call	*/
        {
    	if (erase)
	    /* Replace the last temporary magnified area	*/
      	    XCopyArea(idispl, imagsav, iwin, icontx, ix3,iy3,
			lasmagx, lasmagy,ix3, iy3);

    	if (!first)
	    /* Erase old box	*/
      	    xorbox(iwin, icontxx, 1, ix1, iy1, magsizx, magsizy );
	
        neednewmap = TRUE;
        leftdown   = FALSE;

    	XFlush( idispl );
    	XtUninstallTranslations(iw_win);
   	glass(iwin, iwin, ix1, iy1, TRUE, 1, &ix2, &iy2, TRUE);

	/* Release GC	*/
    	XFreeGC(idispl, icontxx );
	
    	showbutx(NULL, NULL, NULL, 1);
    	}
    } 

/***********************  glass  **************************/

void glass(Window iwsrc, Window iwdest, int ixuls, int iyuls,
	    int perm, int finished, int *ixuld, int *iyuld, int finddest)
   {
    unsigned int 	ixsiz, iysiz;
    int	 		depth;
    int			i, j;
    int			ix, iy, ixn, iyn;
    int			lmagx, lmagy;

    if (finished )
        {
      	if (iglassav > 0 )
      	    XFreePixmap( idispl, iglassav );
      	iglassav =0;
      	return;
        }

    /* Find the size of magnified image	*/
    ixsiz = magsizx * magfac;
    lmagx = magsizx;
    if (ixsiz > iwidex)
        {
	ixsiz = iwidex;
	lmagx = ixsiz/magfac;
        }

    iysiz = magsizy * magfac;
    lmagy = magsizy;
    if (iysiz > ihighx)
        {
	iysiz = ihighx;
	lmagy = iysiz/magfac;
        }

    if ((ixsiz != lasx || iysiz != lasy) && iglassav != 0 )
        {
 	/* Mag glass has changed, set flag to create new mag pixmap	*/
    	XFreePixmap( idispl, iglassav );
    	iglassav = 0;
        }

    if (iglassav < 1 )
        {
	/* Need to create offscreen pixmap for mag glass	*/
	/* Create an offscreen backing store for the mag. Glass	*/
    	iglassav = XCreatePixmap(idispl,iwdest,ixsiz,iysiz,idepth);

	/* Remember destination window ( magnified ) size	*/
    	lasx = ixsiz;
    	lasy = iysiz;
        }

    if(finddest)
        {  /* Find upper left corner of destination area	*/
        *ixuld = ixuls - ( ixsiz - lmagx )/2;
        if ( *ixuld < 0 )
    	    *ixuld = 0;
        if (( *ixuld + ixsiz - 1 ) >iwidex )
    	    *ixuld = iwidex - ixsiz;

        *iyuld = iyuls - ( iysiz - lmagy )/2;
        if ( *iyuld < 0 )
            *iyuld = 0;
        if (( *iyuld + iysiz - 1 ) >iwidex )
    	*iyuld = iwidex - iysiz;
        }

    /* Copy columns from backing store with magfac duplication	*/
    for ( i=0; i<lmagy; i++ )
            {
    	for ( j=0; j<magfac; j++ )
    	   {
           iy = iyuls + i;
           iyn = i*magfac + j;
           XCopyArea(idispl,iwsrc,iglassav,icontx, ixuls,iy,
		lmagx,1,0,iyn);
    	   }
       }

    /* Copy top rows from glass into glass for magfac duplication*/
    ixn = ixsiz;
    for ( i=lmagx; i>0; i-- )
       {
    	for ( j=0; j<magfac; j++ )
           {
           ix = i-1;
           ixn = ixn - 1;
           XCopyArea(idispl,iglassav,iglassav,icontx, 
		ix,0,1,iysiz,ixn,0 );
           }
       }	
	
    XFlush(idispl);

    /* Copy the glass into the on_screen window	*/
    XCopyArea(idispl,iglassav,iwdest,icontx,0,0, 
		ixsiz,iysiz,*ixuld,*iyuld );
    neednewmap = TRUE;

    if ( perm )
       {
       /* Copy the glass into the off_screen window	*/
       XCopyArea(idispl,iglassav,imagsav,icontx,0,0,
		ixsiz,iysiz,*ixuld,*iyuld );
       neednewmap = TRUE;

       }
    return;
}

@


1.6
log
@neednewmap
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/mag.c,v 1.5 2005/10/18 17:00:00 leith Exp leith $*/
d6 2
a7 2
C MAGNIFY -- CREATED July 92
C mag.c          Nov  92                                                                    
d35 1
a35 1
C    IMAGNIFICATION
d47 1
a47 1
 /* common variables */
d51 4
a54 4
 /* internal function  prototypes */
 void 	mag_pop	(Widget, XEvent *, String *, Cardinal *);
extern void  glass          (Window , Window , int , int ,
	                    int , int , int *, int *, int );
d56 1
a56 1
 /* internal file variables */
d67 1
d69 2
a70 3

 /* make a xor graphics context (icontxx)	*/
 icontxx = setxor( icontx );
d78 1
a78 1
 actions(iw_win, "mag_pop", mag_pop, "M123");
a81 1
	
d84 1
d87 4
d92 2
a93 4
		Cardinal *num_params)
{
    int		ix1, iy1;	/* mouse position	*/
    int 	ix2, iy2;
d99 5
a103 5
    if(!(strcmp(*params,"M")))
       /* cursor moved. Erase and draw a new box	*/
       {
       xorbox(iwin, icontxx, FALSE, ix1, iy1, magsizx, magsizy);    
       }
d107 1
a107 1
        /* Erase the old box first, drawing a new one	*/
d116 6
a121 1
 
d124 1
d126 9
d136 1
a136 7
  	/* Remember the last magnification varibles	*/
    	erase = 1;
    	first = 0;
    	lasmagx = magsizx * magfac;
    	lasmagy = magsizy * magfac;
    	ix3 = ix2;
    	iy3 = iy2;
d140 3
a142 3
       /* Center button pushed	*/
       /* Make permanent magnification	*/
       {
d146 1
a146 1
			lasmagx, lasmagy, ix3, iy3);
d156 4
a159 3
    	erase = 0;
    	first = FALSE;
       }
d163 1
a163 1
        /* Right button pushed	*/
d176 1
@


1.5
log
@GPL
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/mag.c,v 1.4 1995/09/06 16:18:55 mladjadj Exp $*/
a46 3
#include "x.h"
#include "std.h"

d163 2
d275 1
d282 2
@


1.4
log
@remove XtUninstallTranslations
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/mag.c,v 1.3 1995/03/30 15:55:04 mladjadj Exp $*/
d8 1
a8 1
C **************************************************************************
d10 24
a33 7
C *  COPYRIGHT (C)1992, WADSWORTH CENTER FOR LABORATORIES AND              *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH	        		   *
C **************************************************************************
@


1.3
log
@added another argument to glass to use it with movie
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/mag.c,v 1.2 94/02/14 12:14:10 leith Exp $*/
a61 3

 /* Remove all translation from iw_win	*/
 XtUninstallTranslations( iw_win );
@


1.2
log
@inconsistant null use
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/mag.c,v 1.1 93/11/10 10:11:51 leith Exp Locker: leith $*/
d22 1
a22 1
C    PURPOSE: MIGNIFICATION
d35 1
a36 9
 /* external function  prototypes */
 extern GC       setxor     (GC);
 extern void     showbutx   (char *, char *, char *, int);
 extern void     actions    (Widget, char *, void (*)(), char *);
 extern void     getloc     (XEvent *, char, int *, int *);
 extern void     barmen     (Widget, caddr_t, caddr_t);
 extern void	 xorbox	    (Window, GC, int, int, int, int, int);
 extern void 	 wicolor    (GC, int);

d39 2
a40 1
 void 	glass	(Window, Window, int, int, int, int, int *, int *);
d102 1
a102 1
    	glass(iwin, iwin, ix1, iy1, FALSE, FALSE, &ix2, &iy2);
d127 1
a127 1
    	glass(iwin, iwin, ix1, iy1, 1, FALSE, &ix2, &iy2);
d154 1
a154 1
   	glass(iwin, iwin, ix1, iy1, TRUE, 1, &ix2, &iy2 );
d166 1
a166 1
	    int perm, int finished, int *ixuld, int *iyuld)
d217 12
a228 11
    /* Find upper left corner of destination area	*/
    *ixuld = ixuls - ( ixsiz - lmagx )/2;
    if ( *ixuld < 0 )
    	*ixuld = 0;
    if (( *ixuld + ixsiz - 1 ) >iwidex )
    	*ixuld = iwidex - ixsiz;

    *iyuld = iyuls - ( iysiz - lmagy )/2;
    if ( *iyuld < 0 )
    	*iyuld = 0;
    if (( *iyuld + iysiz - 1 ) >iwidex )
d230 1
d234 1
a234 1
        {
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*$Header$*/
d47 1
a47 2
 void 	glass	(Window iwsrc, Window iwdest, int ixuls, int iyuls,
	    	 int perm, int finished, int *ixuld, int *iyuld);
d51 5
a55 6
 static int	first=1, erase=0;
 static int	lasx=0, lasy=0;
 static int	lasmagx=0, lasmagy=0;
 static int  	ix3=0, iy3=0;
 static Pixmap	iglassav=0;
/***********************  mag  **************************/
d57 2
d60 1
a60 1
{
d62 2
a63 2
    /* make a xor graphics context (icontxx)	*/
    icontxx = setxor( icontx );
d65 4
a68 4
    /* Open a message window with the following strings	*/
    showbutx( "Set temporary glass location.",
	    "Set permanent glass location.",
	    "Stop this routine.", FALSE);
d70 2
a71 2
    /* Remove all translation from iw_win	*/
    XtUninstallTranslations( iw_win );
d73 2
a74 2
    /* Set the action from right, left, and center buttons */
    actions(iw_win, "mag_pop", mag_pop, "M123");
d76 4
a79 3
    /* Turn on Xor writing in icontxx	*/
    icontxx = setxor( icontx );	
}
d82 1
d94 4
a97 5
    /* cursor moved. Erase and draw a new box	*/
    {
     	xorbox(iwin, icontxx, NULL, ix1, iy1, magsizx, magsizy);    
    }

d99 4
a102 4
    else if(!(strcmp(*params, "1")))
    /* Left button pushed. 	*/
    /* Erase the old box first, drawing a new one	*/
    {
d104 1
a104 1
    	if(erase)
d109 1
a109 1
    	glass(iwin, iwin, ix1, iy1,NULL, NULL, &ix2, &iy2);
d112 2
a113 2
    	xorbox(iwin, icontxx, 1, ix1, iy1,magsizx, magsizy);
    	xorbox(iwin, icontxx, 1, ix1, iy1,magsizx, magsizy);
d122 1
a122 1
    }
d124 6
a129 6
    else if(!(strcmp(*params, "2")))
    /* Center button pushed	*/
    /* Make permanent magnification	*/
    {
    	xorbox(iwin, icontxx, 1, ix1, iy1,magsizx, magsizy);
    	if(erase)
d134 1
a134 1
    	glass(iwin, iwin, ix1, iy1, 1, NULL, &ix2, &iy2);
d142 2
a143 2
    	first = NULL;
    }
d146 5
a150 5
    else if(!(strcmp(*params, "3")))
    /* Right button pushed	*/
    /* Stop this function call	*/
    {
    	if(erase)
d155 1
a155 1
    	if(!first)
d161 1
a161 1
   	 glass( iwin, iwin, ix1, iy1,NULL, 1, &ix2, &iy2 );
d164 1
a164 1
    	XFreeGC( idispl, icontxx );
d166 1
a166 1
    	showbutx( NULL, NULL, NULL, 1);
d169 1
d171 4
a174 3
void glass(Window iwsrc,Window iwdest,int ixuls,int iyuls,
	    int perm,int finished,int *ixuld,int *iyuld)
{
d181 3
a183 3
    if( finished )
    {
      	if( iglassav > 0 )
d187 1
a187 1
    }
d192 2
a193 2
    if(ixsiz > iwidex)
    {
d196 1
a196 1
    }
d200 2
a201 2
    if(iysiz > ihighx)
    {
d204 1
a204 1
    }
d206 3
a208 3
    if((ixsiz != lasx || iysiz != lasy) && iglassav != 0 )
    {
	/* Mag glass has changed, set flag to create new mag pixmap	*/
d211 1
a211 1
    }
d213 2
a214 2
    if( iglassav < 1 )
    {
d222 1
a222 1
    }
d226 1
a226 1
    if( *ixuld < 0 )
d228 1
a228 1
    if(( *ixuld + ixsiz - 1 ) >iwidex )
d232 1
a232 1
    if( *iyuld < 0 )
d234 1
a234 1
    if(( *iyuld + iysiz - 1 ) >iwidex )
d238 7
a244 7
    for( i=0; i<lmagy; i++ )
    {
    	for( j=0; j<magfac; j++ )
    	{
      	iy = iyuls + i;
      	iyn = i*magfac + j;
      	XCopyArea(idispl,iwsrc,iglassav,icontx, ixuls,iy,
d246 2
a247 2
    	}
    }
d251 7
a257 7
    for( i=lmagx; i>0; i-- )
    {
    	for( j=0; j<magfac; j++ )
     	{
      	ix = i-1;
      	ixn = ixn - 1;
       	XCopyArea(idispl,iglassav,iglassav,icontx, 
d259 2
a260 2
     	}
    }	
d262 1
a262 1
    XFlush( idispl );
d268 4
a271 4
    if( perm )
    {
    /* Copy the glass into the off_screen window	*/
        XCopyArea(idispl,iglassav,imagsav,icontx,0,0,
d273 1
a273 1
    }
@
