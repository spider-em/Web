head	1.35;
access;
symbols
	pre-tilt-improve:1.32
	pre_surf_fromtop:1.31
	pre_neednewmap:1.31
	pre_apppluss_remove:1.31
	pre_tiltpair_chng:1.31
	pre_GPL:1.30;
locks;
comment	@ * @;


1.35
date	2015.09.22.14.21.53;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2015.09.18.16.14.36;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2015.09.01.17.52.51;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2015.06.11.13.30.23;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2005.10.18.16.59.47;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	96.08.13.19.20.55;	author mladjadj;	state Exp;
branches;
next	1.29;

1.29
date	96.05.13.14.39.32;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	96.05.07.14.16.33;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	96.05.06.16.22.42;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	96.04.16.14.23.30;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	96.04.12.16.58.22;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	96.04.05.16.48.55;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	96.03.25.14.43.15;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	96.03.21.19.40.00;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	96.03.21.17.15.46;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	96.03.21.16.48.14;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	95.08.16.18.11.15;	author mladjadj;	state Exp;
branches;
next	1.18;

1.18
date	95.08.14.16.49.53;	author mladjadj;	state Exp;
branches;
next	1.17;

1.17
date	95.08.10.15.44.26;	author mladjadj;	state Exp;
branches;
next	1.16;

1.16
date	95.08.08.15.33.46;	author mladjadj;	state Exp;
branches;
next	1.15;

1.15
date	95.02.07.21.43.30;	author liy;	state Exp;
branches;
next	1.14;

1.14
date	95.01.19.19.19.01;	author liy;	state Exp;
branches;
next	1.13;

1.13
date	94.12.30.10.16.56;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	94.07.05.16.10.54;	author odesanya;	state Exp;
branches;
next	1.11;

1.11
date	94.06.06.11.27.43;	author odesanya;	state Exp;
branches;
next	1.10;

1.10
date	94.04.12.15.46.15;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	94.03.28.12.22.53;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	94.03.21.12.22.19;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	94.03.18.10.43.17;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	94.03.17.12.07.49;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	93.11.26.12.29.11;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	93.11.24.15.47.27;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	93.11.24.11.27.08;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	93.11.22.16.38.22;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.16.14.13.03;	author leith;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Parameters added for saving location doc file
@
text
@
/*$Header: /usr8/web/src/RCS/fitdoc.c,v 1.34 2015/09/18 16:14:36 leith Exp $*/

/*
 C**********************************************************************
 C
 C  fitdoc.c
 C           Improved                            Jun 2015 ArDean Leith  
 C           Added fitdoc_addpart                Aug 2015 ArDean Leith  
 C           If (maxpart1 <= 0 ) paranoia        Sep 2015 ArDean Leith   
 C           Parameters changed                  Sep 2015 ArDean Leith   
 C
 C**********************************************************************
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2015  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
 C**********************************************************************
 C
 C  fitdoc
 C
 C  PURPOSE:    Input untilted point locations from doc file dfil1
 C              Input   tilted point locations from doc file dfil2
 C              Input tilt parameters from doc file dfil3 (if present)
 C
 C  VARIABLES:  xim       Image  number             dfil1 + 2
 C              xu0,yu0   Untilted picked points    dfil1
 C              xs,ys     Tilted picked points      dfil2
 C              xs2,ys2   Tilted predicted points   dfil6
 C 
 C              dfil1  = Untilted locations
 C              dfil2  = Tilted   locations
 C              dfil3  = Tilt parameters
 C              dfil4  = Untilted backgrounds       (pickback)
 C              dfil4  = Tilted   backgrounds       (pickback)
 C              dfil6  = Tilted predicted points 
 C
 C  RETURNS:    0 If all OK
 C             -1 If no untilted doc file
 C             -2 If no   tilted doc file
 C              1 If unrecoverable error reading or allocating
 C                or some other disaster
 C
 C  CALLED BY:  
 C
 C**********************************************************************
*/

#include "std.h"
#include "x.h"
#include "routines.h"

 // Internal function prototypes 
 int           fitdoc_addpart(int n,  int iwhich, int xu, int yu, int xt, int yt);

 /* External global variables */
 extern char   dfil1[12], dfil2[12], dfil3[12], dfil4[12], dfil5[12];
 extern int    numm, back_win_now, iredu;
 extern int    fitted;
 extern float  phif, thetaf, gammaff;
 extern float  xu0t, yu0t, xs0t, ys0t;
 extern char   datexc[4];                 /* File extension  */

 /* Global variables used elsewhere */
 int           limfit, ifit;
 int           maxtilts, maxpart;
 float       * xu0 = 0, * yu0 = 0, * xs  = 0, * ys = 0;
 float       * xs2 = 0, * ys2 = 0, * xim = 0;
     
 /* Variables used here */
 static int    sizepartarray = 0;

 /********************   fitdoc   ****************************/

 int fitdoc(Boolean want_nofile_msg, 
            Boolean get_loc_doc, 
            Boolean get_tilt_doc, 
            Boolean get_win_doc)

 { 
 int      i,k, iredut, maxpart1,maxpart2;
 int      maxwin1,maxwin2;
 int      back_wins1,back_wins2;
 float  * ptr;
 float  * dbuf    = NULL;
 int      maxreg  = 6+1;   /* Set size for array pointed to by dbuf */
 int      maxkeys = 9999;  /* Set size for array pointed to by dbuf */
 int      isok    = FALSE;

 if (get_loc_doc) 
    {
    /* Retrieve data from dfil1 for untilted points ---------------------------------- */
    isok = getdoc_f( (FILE *) NULL, dfil1, datexc,maxkeys, maxreg, &dbuf, &maxpart1, FALSE);

    if ( maxpart1 <= 0 ) maxpart1 = 0;   // Error recovery

    if ( xim == NULL || maxpart1 > sizepartarray || maxpart1 == 0 )
       {           /* Create initial or larger particle location arrays */
       sizepartarray = maxpart1 + 300;

       if (((xim = (float *) realloc((void *) xim, sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((xu0 = (float *) realloc((void *) xu0, sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((yu0 = (float *) realloc((void *) yu0, sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((xs =  (float *) realloc((void *) xs,  sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((ys =  (float *) realloc((void *) ys,  sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((xs2 = (float *) realloc((void *) xs2, sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((ys2 = (float *) realloc((void *) ys2, sizepartarray * sizeof(float))) == (float *) NULL))
           { spout("*** Unable to reallocate memory in fitdoc."); return 1; }
       }

    if (isok != 0) 
       {         /* Problem retrieving doc file. Assume it does not exist */
       if (dbuf) free(dbuf); dbuf = NULL;
       if ( want_nofile_msg )
          {spouts("*** Unable to read untilted doc file: "); spouti(isok); spout(dfil1);} 
       maxpart = 0;
       return   -1;
       }

    /* Fill xim, xu0, yu0 arrays */
    ptr = dbuf;
    for (k=0; k<maxpart1 ; k++)
       {
       xim[k]  = *(ptr+1);  
       xu0[k]  = *(ptr+4);
       yu0[k]  = *(ptr+5);  
       ptr    += maxreg; 
       }

    /* Free dbuf here*/
    if (dbuf) free(dbuf); dbuf = NULL;

    /* Retrieve data from dfil2 for tilted points -------------------------------- */
    if (getdoc_f((FILE *) NULL, dfil2, datexc,maxkeys, maxreg, &dbuf, &maxpart2, FALSE) > 0) 
       {   /* Problem retrieving doc file, assume it does not exist */
       if (dbuf) free(dbuf); dbuf = NULL;
       if ( want_nofile_msg )
          {spouts("*** Unable to read tilted doc file: "); spout(dfil2);} 
       maxpart = 0;
       return   -2;
       }

    if (  maxpart2 > sizepartarray )
       {           /* Create initial or larger particle location arrays */
       sizepartarray = maxpart2 + 300;

       if (((xim = (float *) realloc((void *) xim, sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((xu0 = (float *) realloc((void *) xu0, sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((yu0 = (float *) realloc((void *) yu0, sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((xs =  (float *) realloc((void *) xs,  sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((ys =  (float *) realloc((void *) ys,  sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((xs2 = (float *) realloc((void *) xs2, sizepartarray * sizeof(float))) == (float *) NULL) ||
           ((ys2 = (float *) realloc((void *) ys2, sizepartarray * sizeof(float))) == (float *) NULL))
           { spout("*** Unable to reallocate memory in fitdoc."); return 1; }
       }

    /* Fill xs, ys arrays */
    ptr = dbuf;
    for (k=0; k < maxpart2 ; k++)
       { 
       xs[k]  = *(ptr+4); 
       ys[k]  = *(ptr+5);  
       ptr   += maxreg;
       }

    /* Free dbuf here*/
    if (dbuf) free(dbuf); dbuf = NULL;

    if (maxpart2 < maxpart1)
       {
       /* Tilted file has more points than first! */  
       spout("*** Tilted doc file has fewer particles than untilted.");
       maxpart = 0;
       return 1;
       }

    if (maxpart2 > maxpart1)
       {
       /* Tilted file has more points than first! */  
       spout("*** Tilted doc file has more particles than untilted.");
       maxpart = 0;
       return 1;
       }
 
    maxpart = maxpart1;
    }  // End of: if (get_loc_doc)
 
 if (get_tilt_doc) 
    {
    /* Retrieve data from dfil3 for tilt parameters (if any) ------------------------------- */
    /* Parametes: Coordinates of origin and tilt angles: theta, phi ,gamma */
 
    maxkeys = 125;      /* Set size for array pointed to by dbuf */
    if (getdoc_f((FILE *) NULL, dfil3, datexc, maxkeys, maxreg, &dbuf, &maxtilts, FALSE) > 1) 
       {   /* Problem retrieving doc file. Assume it does not exist */
       if (dbuf) free(dbuf); dbuf = NULL;
       if ( want_nofile_msg)
          {spouts("*** Tilt angle doc file not available yet: "); spout(dfil3);} 
       return 0;
       }

    if (maxtilts < 124)
       {
       spout(" Tilt angle doc. file lacks necessary info.");
       if (dbuf) free(dbuf); dbuf = NULL;
       return 1;
       }

    /* Get last particle number */
    ptr    = dbuf + ((121-1) * maxreg);
    limfit = *(ptr+5);        /* Number of locations used in fitting */

    /* Get fitted flag  */
    ptr    = dbuf + ((122-1) * maxreg);
    fitted = *(ptr+1);

    /* Get origin */
    ptr    = dbuf + ((123-1) * maxreg);
    xu0t   = *(ptr+1);
    yu0t   = *(ptr+2);
    xs0t   = *(ptr+3);
    ys0t   = *(ptr+4);
    iredut = *(ptr+5);

    if (iredut != iredu)
       {
       spouts("Inconsistent image size reduction factor: "); spouti(iredut) ;
       if (dbuf) free(dbuf); dbuf = NULL;
       return 1;
       }

    /* Get tilt angles */
    ptr     = dbuf + ((124-1) * maxreg);
    thetaf  = *(ptr+1);
    gammaff = *(ptr+2);
    phif    = *(ptr+3);
	      
    /* Free dbuf here */
    if (dbuf) free(dbuf); dbuf = NULL;
    }  // End of: if (get_tilt_doc)


 if (get_win_doc)
    {
    /* Retrieve data from dfil4 & dfil5 for # of background windows (if any) --------------- */
 
    back_win_now = 1;        /* Used for pickback */

    maxkeys = 9999;          /* Set size for array pointed to by dbuf */

    if (getdoc_f((FILE *) NULL, dfil4, datexc, maxkeys, maxreg, &dbuf, &maxwin1, FALSE) > 1) 
       {   /* Problem retrieving doc file. Assume it does not exist */
       if (dbuf) free(dbuf); dbuf = NULL;
       //{spouts("*** Background window doc file not available yet: "); spout(dfil4);} 
       return 0;
       }

    back_wins1 = 0;
    ptr        = dbuf;
    for (i= 0; i < maxwin1; i++)
       {
       //if (i < 20) printf("at ptr:   %f %f \n",*ptr,*(ptr+1));
       if (*ptr > 0 && i < 998) back_wins1 = i + 1; 
       ptr += maxreg;
       }

    /* Free dbuf here */
    if (dbuf) free(dbuf); dbuf = NULL;


    if (getdoc_f((FILE *) NULL, dfil5, datexc, maxkeys, maxreg, &dbuf, &maxwin2, FALSE) > 1) 
       {   /* Problem retrieving doc file. Assume it does not exist */
       if (dbuf) free(dbuf); dbuf = NULL;
       // {spouts("*** Background window doc file not available yet: "); spout(dfil5);} 
       return 0;
       }

    back_wins2 = 0;
    ptr        = dbuf;
    for (i= 0; i < maxwin1; i++)
       {
       if (*ptr > 0 && i < 998) back_wins2 = i + 1; 
       ptr += maxreg;
       }

    /* Free dbuf here */
    if (dbuf) free(dbuf); dbuf = NULL;

    if (back_wins1 != back_wins2) 
       {
       spouts("*** Number of Untilted and tilted background windows not same in: "); 
       spouts(dfil4);  spouts(" & ");  spout(dfil5); 
       }

    /* Used for pickback */
    back_win_now    = back_wins1;         
    if (back_wins2 > back_win_now) 
       back_win_now = back_wins2;        
    back_win_now++;         
    }  // End of: if (get_win_doc)

 return 0;
 }


 /********************   fitdoc_addpart   ****************************/

 int fitdoc_addpart(int n, int iwhich, int xu, int yu, int xt, int yt )
 {

 if ( (xu0 == NULL) || (n > (sizepartarray -1)) )
    {        /* Reallocate space for  arrays */

    sizepartarray += 100;

    if (((xim = (float *) realloc((void *) xim, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((xu0 = (float *) realloc((void *) xu0, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((yu0 = (float *) realloc((void *) yu0, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((xs =  (float *) realloc((void *) xs,  sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((ys =  (float *) realloc((void *) ys,  sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((xs2 = (float *) realloc((void *) xs2, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((ys2 = (float *) realloc((void *) ys2, sizepartarray * sizeof(float))) == (float *) NULL))
        { spout("*** Unable to reallocate memory in fitdoc_addpart."); return 1; }
    }

 /* Put particle data in arrays */
 if (iwhich == 0  || iwhich == 1) 
    {
    xim[n] = n;  
    xu0[n] = xu;
    yu0[n] = yu;  
    }

 if (iwhich == 0 || iwhich == 2) 
    {
    xim[n] = n;  
    xs[n]  = xt;
    ys[n]  = yt;  
    }

 return 0;
 }

@


1.34
log
@Parameters changed to select which files affected
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/fitdoc.c,v 1.33 2015/09/01 17:52:51 leith Exp $*/
d94 4
a97 1
 int fitdoc(Boolean want_nofile_msg, Boolean get_tilt_doc, Boolean get_win_doc)
d109 4
a112 2
 /* Retrieve data from dfil1 for untilted points ---------------------------------- */
 isok = getdoc_f( (FILE *) NULL, dfil1, datexc,maxkeys, maxreg, &dbuf, &maxpart1, FALSE);
d114 1
a114 1
 if ( maxpart1 <= 0 ) maxpart1 = 0;   // Error recovery
d116 13
a128 3
 if ( xim == NULL || maxpart1 > sizepartarray || maxpart1 == 0 )
    {           /* Create initial or larger particle location arrays */
    sizepartarray = maxpart1 + 300;
d130 18
a147 9
    if (((xim = (float *) realloc((void *) xim, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((xu0 = (float *) realloc((void *) xu0, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((yu0 = (float *) realloc((void *) yu0, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((xs =  (float *) realloc((void *) xs,  sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((ys =  (float *) realloc((void *) ys,  sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((xs2 = (float *) realloc((void *) xs2, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((ys2 = (float *) realloc((void *) ys2, sizepartarray * sizeof(float))) == (float *) NULL))
        { spout("*** Unable to reallocate xim memory in fitdoc."); return 1; }
    }
d149 1
a149 2
 if (isok != 0) 
    {         /* Problem retrieving doc file. Assume it does not exist */
a150 5
    if ( want_nofile_msg )
       {spouts("*** Unable to read untilted doc file: "); spouti(isok); spout(dfil1);} 
    maxpart = 0;
    return   -1;
    }
d152 9
a160 9
 /* Fill xim, xu0, yu0 arrays */
 ptr = dbuf;
 for (k=0; k<maxpart1 ; k++)
    {
    xim[k]  = *(ptr+1);  
    xu0[k]  = *(ptr+4);
    yu0[k]  = *(ptr+5);  
    ptr    += maxreg; 
    }
d162 13
a174 2
 /* Free dbuf here*/
 if (dbuf) free(dbuf); dbuf = NULL;
d176 8
d185 1
a185 3
 /* Retrieve data from dfil2 for tilted points -------------------------------- */
 if (getdoc_f((FILE *) NULL, dfil2, datexc,maxkeys, maxreg, &dbuf, &maxpart2, FALSE) > 0) 
    {   /* Problem retrieving doc file, assume it does not exist */
a186 5
    if ( want_nofile_msg )
       {spouts("*** Unable to read tilted doc file: "); spout(dfil2);} 
    maxpart = 0;
    return   -2;
    }
d188 7
a194 3
 if (  maxpart2 > sizepartarray )
    {           /* Create initial or larger particle location arrays */
    sizepartarray = maxpart2 + 300;
d196 7
a202 37
    if (((xim = (float *) realloc((void *) xim, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((xu0 = (float *) realloc((void *) xu0, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((yu0 = (float *) realloc((void *) yu0, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((xs =  (float *) realloc((void *) xs,  sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((ys =  (float *) realloc((void *) ys,  sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((xs2 = (float *) realloc((void *) xs2, sizepartarray * sizeof(float))) == (float *) NULL) ||
        ((ys2 = (float *) realloc((void *) ys2, sizepartarray * sizeof(float))) == (float *) NULL))
        { spout("*** Unable to reallocate xim memory in fitdoc."); return 1; }
    }

 /* Fill xs, ys arrays */
 ptr = dbuf;
 for (k=0; k < maxpart2 ; k++)
    { 
    xs[k]  = *(ptr+4); 
    ys[k]  = *(ptr+5);  
    ptr   += maxreg;
    }

 /* Free dbuf here*/
 if (dbuf) free(dbuf); dbuf = NULL;

 if (maxpart2 < maxpart1)
    {
    /* Tilted file has more points than first! */  
    spout("*** Tilted doc file has fewer particles than untilted.");
    maxpart = 0;
    return 1;
    }

 if (maxpart2 > maxpart1)
    {
    /* Tilted file has more points than first! */  
    spout("*** Tilted doc file has more particles than untilted.");
    maxpart = 0;
    return 1;
    }
d204 2
a205 1
 maxpart = maxpart1;
d229 2
a230 2
    ptr     = dbuf + ((121-1) * maxreg);
    limfit  = *(ptr+5);        /* Number of locations used in fitting */
d233 2
a234 2
    ptr     = dbuf + ((122-1) * maxreg);
    fitted  = *(ptr+1);
d237 6
a242 6
    ptr     = dbuf + ((123-1) * maxreg);
    xu0t    = *(ptr+1);
    yu0t    = *(ptr+2);
    xs0t    = *(ptr+3);
    ys0t    = *(ptr+4);
    iredut  = *(ptr+5);
d259 1
a259 1
    }
d319 1
a319 2
    }

@


1.33
log
@$2
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/fitdoc.c,v 1.32 2015/06/11 13:30:23 leith Exp $*/
d10 2
d94 1
a94 1
 int fitdoc(int nofile_msg)
d97 1
a97 1
 int      i,k, maxpart1,maxpart2;
d106 1
a106 1
 /* Retrieve data from dfil1 for untilted points */
d109 3
a111 1
 if ( (xim == NULL) || (maxpart1 > sizepartarray) )
d128 1
a128 1
    if ( !(nofile_msg) )
d148 1
a148 1
 /* Retrieve data from dfil2 for tilted points */
d152 1
a152 1
    if ( !(nofile_msg) )
d202 4
a205 2
 /* Retrieve data from dfil3 for tilt parameters (if any) */
 /* (x,y) coordinates of origin and tilt angles delta, phi ,gamma */
d207 46
a252 4
 /* Read the maxpart from dcb*** file */
 maxkeys = 125;      /* Set size for array pointed to by dbuf */
 if (getdoc_f((FILE *) NULL, dfil3, datexc, maxkeys, maxreg, &dbuf, &maxtilts, FALSE) > 1) 
    {   /* Problem retrieving doc file. Assume it does not exist */
a253 3
    if ( !(nofile_msg))
       {spouts("*** Tilt angle doc file not available yet: "); spout(dfil3);} 
    return 0;
d256 2
a257 1
 if (maxtilts < 124)
d259 3
a261 30
    spout(" Tilt angle doc. file lacks necessary info.");
    if (dbuf) free(dbuf); dbuf = NULL;
    return 1;
    }

 /* Get last particle number */
 ptr          = dbuf + ((121-1) * maxreg);
 limfit       = *(ptr+5);        /* Number of markers used in fitting */

 /* Get fitted flag  */
 ptr      = dbuf + ((122-1) * maxreg);
 fitted   = *(ptr+1);

 /* Get origin */
 ptr      = dbuf + ((123-1) * maxreg);
 xu0t     = *(ptr+1);
 yu0t     = *(ptr+2);
 xs0t     = *(ptr+3);
 ys0t     = *(ptr+4);
 iredu    = *(ptr+5);

 /* Get tilt angles */
 ptr      = dbuf + ((124-1) * maxreg);
 thetaf   = *(ptr+1);
 gammaff  = *(ptr+2);
 phif     = *(ptr+3);
	      
 /* Free dbuf here */
 if (dbuf) free(dbuf); dbuf = NULL;

d263 1
a263 3
 /* Retrieve data from dfil4 & dfil5 for # of background windows (if any) */
 
 back_win_now = 0;        /* Used for pickback */
d265 15
a279 1
 maxkeys = 9999;          /* Set size for array pointed to by dbuf */
d281 1
a281 2
 if (getdoc_f((FILE *) NULL, dfil4, datexc, maxkeys, maxreg, &dbuf, &maxwin1, FALSE) > 1) 
    {   /* Problem retrieving doc file. Assume it does not exist */
a282 15
    if ( !(nofile_msg))
       {spouts("*** Backround window doc file not available yet: "); spout(dfil4);} 
    return 0;
    }
 //printf("maxwin1: %d \n",maxwin1);

 back_wins1 = 0;
 ptr        = dbuf;
 for (i= 0; i < maxwin1; i++)
    {
    //if (i < 20) printf("at ptr:   %f %f \n",*ptr,*(ptr+1));
    if (*ptr > 0 && i < 998) back_wins1 = i + 1; 
    ptr += maxreg;
    }
 //printf("back_wins1:   %d   \n",back_wins1);
a283 2
 /* Free dbuf here */
 if (dbuf) free(dbuf); dbuf = NULL;
d285 14
d300 1
a300 2
 if (getdoc_f((FILE *) NULL, dfil5, datexc, maxkeys, maxreg, &dbuf, &maxwin2, FALSE) > 1) 
    {   /* Problem retrieving doc file. Assume it does not exist */
a301 15
    if ( !(nofile_msg))
       {spouts("*** Backround window doc file not available yet: "); spout(dfil5);} 
    return 0;
    }

 back_wins2 = 0;
 ptr        = dbuf;
 for (i= 0; i < maxwin1; i++)
    {
    if (*ptr > 0 && i < 998) back_wins2 = i + 1; 
    ptr += maxreg;
    }

 /* Free dbuf here */
 if (dbuf) free(dbuf); dbuf = NULL;
d303 11
a313 4
 if (back_wins1 != back_wins2) 
    {
    spouts("*** Number of Untilted and tilted backround windows not same in: "); 
    spouts(dfil4);  spouts(" & ");  spout(dfil5); 
a315 5
 /* Used for pickback */
 back_win_now    = back_wins1;         
 if (back_wins2 > back_win_now) 
    back_win_now = back_wins2;        
 back_win_now++;         
d358 1
@


1.32
log
@getdoc_f,  cosmetic,  error msg
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/fitdoc.c,v 1.31 2005/10/18 16:59:47 leith Exp $*/
d5 7
a11 6
C++*************************************************************************
C
C    fitdoc
C                       Improved                 Jun 2015 ArDean Leith  
C
C **********************************************************************
d13 1
a13 1
 C=* Copyright (C) 1992-20q5  Health Research Inc.                     *
d35 29
a63 29
C **********************************************************************
C
C    fitdoc
C
C    PURPOSE:    input untilted point locations from doc file dfil1
C                input   tilted point locations from doc file dfil2
C                input tilt parameters from doc file dfil3 (if present)
C
C    VARIABLES:  xim       image  number             dfil1 + 2
C                xu0,yu0   untilted picked points    dfil1
C                xs,ys     tilted picked points      dfil2
C                xs2,ys2   tilted predicted points   dfil6
C 
C                dfil1  = untilted
C                dfil2  = tilted points
C                dfil3  = tilt parameters
C                dfil4  = background               (pickback)
C                dfil4  = background               (pickback)
C                dfil6  = tilted predicted points 
C
C    RETURNS:    0 if all OK
C               -1 if no untilted doc file
C               -2 if no   tilted doc file
C                1 if unrecoverable error reading or allocating
C                  or some other disaster
C
C    CALLED BY:  
C
C **********************************************************************
d70 6
a75 3
 /* external global variables */
 extern char   dfil1[12], dfil2[12], dfil3[12];
 extern int    numm, numb, iredu;
d79 10
a88 1
 extern char   datexc[4];         /* File extension  */
a89 5
 /* Variables used elsewhere also */
 int           limfit, lbnum, ifit, maxtilts, maxpart;
 float        * xu0  = 0, * yu0  = 0, * xs   = 0, * ys   = 0;
 float        * xs2  = 0, * ys2  = 0, * xim  = 0;
      
d92 1
a92 1
 int fitdoc(int first)
d95 8
a102 6
 int      k, maxreg, maxkeys, maxpartt;
 static   nptsnow = 0;
 float  * dbuf = NULL, * ptr;
 
 /* Set size for array pointed to by dbuf */
 maxreg = 6+1;   maxkeys = 9999;
d105 18
a122 4
 
 if (getdoc_f((FILE *) NULL, dfil1, datexc,maxkeys, maxreg, 
           &dbuf, &maxpart, FALSE) > 0) 
    {   /* Problem retrieving doc file, assume it does not exist */
d124 2
a125 2
    if ( !(first))
       {spouts("*** Unable to read untilted doc. file: "); spout(dfil1);} 
d127 1
a127 1
    return -1;
d130 3
a132 1
 if ((xim == NULL) || (maxpart > nptsnow))
d134 4
a137 16
    /* Allocate space for  arrays */
   if (((xim = (float *) realloc((void *) xim, maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((xu0 = (float *) realloc((void *) xu0, maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((yu0 = (float *) realloc((void *) yu0, maxpart * sizeof(float))) ==  
               (float *) NULL) ||
       ((xs =  (float *) realloc((void *) xs,  maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((ys =  (float *) realloc((void *) ys,  maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((xs2 = (float *) realloc((void *) xs2, maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((ys2 = (float *) realloc((void *) ys2, maxpart * sizeof(float))) == 
               (float *) NULL))
      { spout("*** Unable to reallocate memory in fitdoc."); return 1; }
a138 1
 nptsnow = maxpart;
d140 3
a142 6
 ptr = dbuf;
 for (k=0; k<maxpart ; k++)
    {
    xim[k]  = *(ptr+1);  xu0[k]  = *(ptr+4);
    yu0[k]  = *(ptr+5);  ptr  += maxreg; 
    }
d145 1
a145 2
  if (getdoc_f((FILE *) NULL, dfil2, datexc,maxkeys, maxreg, 
           &dbuf, &maxpartt, FALSE) > 0) 
d148 2
a149 2
    if ( !(first))
       {spouts("*** Unable to read tilted doc. file: ");spout(dfil2);} 
d151 24
a174 1
    return -2;
d177 4
a180 1
 if (maxpartt < maxpart)
d183 1
a183 2
    if (dbuf) free(dbuf); dbuf = NULL;
    spout("*** Tilted file has fewer particles than untilted.");
d188 1
a188 1
 if (maxpartt > maxpart)
d191 1
a191 2
    if (dbuf) free(dbuf); dbuf = NULL;
    spout("*** Tilted file has more particles than untilted.");
d196 21
a216 3
 ptr = dbuf;
 for (k=0; k < maxpart ; k++)
    { xs[k]  = *(ptr+4); ys[k]  = *(ptr+5);  ptr  += maxreg; }
d218 23
a240 1
 /* Free dbuf here*/
d244 1
a244 2
 /* Retrieve data from dfil3 for tilt parameters (if any) */
 /* (x,y) coordinates of origin and tilt angles delta, phi ,gamma */
d246 29
a274 6
 maxreg  = 6+1;  maxkeys = 125;
     
  /* Read the maxpart from dcb*** file */
  if (getdoc_f((FILE *) NULL, dfil3, datexc, maxkeys, maxreg, 
           &dbuf, &maxtilts, FALSE) > 1) 
    {   /* Problem retrieving doc file, assume it does not exist */
d276 2
a277 2
    if ( !(first))
       {spouts("*** Tilt angle doc. file not available yet: "); spout(dfil3);} 
d281 22
a302 33
  if (maxtilts < 124)
     {
     spout(" Tilt angle doc. file lacks necessary info.");
     if (dbuf) free(dbuf); dbuf = NULL;
     return 1;
     }

  /* Get last particle number */
  ptr    = dbuf + ((121-1) * maxreg);
  limfit = *(ptr+5);   /* number of markers used in fitting */
  lbnum  = *(ptr+6);   /* used for pickback */
  numb = lbnum;        /* used for pickback */

  /* Get fitted flag  */
  ptr    = dbuf + ((122-1) * maxreg);
  fitted = *(ptr+1);

  /* Get origin */
  ptr    = dbuf + ((123-1) * maxreg);
  xu0t   = *(ptr+1);
  yu0t   = *(ptr+2);
  xs0t   = *(ptr+3);
  ys0t   = *(ptr+4);
  iredu  = *(ptr+5);

  /* Get tilt angles */
  ptr      = dbuf + ((124-1) * maxreg);
  thetaf   = *(ptr+1);
  gammaff  = *(ptr+2);
  phif     = *(ptr+3);
	      
  /* Free dbuf here */
  if (dbuf) free(dbuf);  dbuf = NULL;
d308 37
@


1.31
log
@GPL
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.30 1996/08/13 19:20:55 mladjadj Exp $*/
d8 1
d12 1
a12 1
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
d75 1
a75 1
 extern char   datexc[4];         /* file extension  */
d77 1
a77 1
 /* variables used elsewhere also */
d84 1
a84 1
 int fitdoc(int unused)
d91 2
a92 2
 /* set size for array pointed to by dbuf */
 maxreg    = 6+1; maxkeys   = 9999;
d94 1
a94 1
 /* retrieve data from dfil1 for untilted points */
d96 3
a98 3
 if (getdoc((FILE *) NULL, dfil1, datexc,maxkeys, maxreg, 
           &dbuf, &maxpart) > 0) 
    {   /* problem retrieving doc file, assume it does not exist */
d100 2
a101 1
    spouts("*** Unable to read untilted doc. file: "); spout(dfil1); 
d108 1
a108 1
    /* allocate space for  arrays */
d134 4
a137 4
 /* retrieve data from dfil2 for tilted points */
  if (getdoc((FILE *) NULL, dfil2, datexc,maxkeys, maxreg, 
           &dbuf, &maxpartt) > 0) 
    {   /* problem retrieving doc file, assume it does not exist */
d139 2
a140 1
    spouts("*** Unable to read tilted doc. file: ");spout(dfil2); 
d167 1
a167 1
 /* free dbuf here*/
d171 1
a171 1
 /* retrieve data from dfil3 for tilt parameters (if any) */
d176 4
a179 4
  /* read the maxpart from dcb*** file */
  if (getdoc((FILE *) NULL, dfil3, datexc, maxkeys, maxreg, 
           &dbuf, &maxtilts) > 1) 
    {   /* problem retrieving doc file, assume it does not exist */
d181 2
a182 1
    spouts("*** Tilt angle doc. file not available yet: "); spout(dfil3);
d193 1
a193 1
  /*get last particle number */
d199 1
a199 1
  /* get fitted flag  */
d203 1
a203 1
  /* get origin */
d211 1
a211 1
  /* get tilt angles */
d217 1
a217 1
  /* free dbuf here */
@


1.30
log
@better msg
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.29 1996/05/13 14:39:32 leith Exp $*/
d9 25
a33 8
C **************************************************************************
C *  COPYRIGHT (C)1993, WADSWORTH CENTER FOR LABORATORIES AND              *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d61 1
a61 1
C **************************************************************************
@


1.29
log
@used spouts
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.28 1996/05/07 14:16:33 leith Exp leith $*/
d161 1
a161 1
    spouts("*** Tilt angle doc. file not available yet: ."); spout(dfil3);
@


1.28
log
@added output to file not found message
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.27 1996/05/06 16:22:42 leith Exp leith $*/
d82 1
a82 1
    spout("*** Unable to read untilted doc. file: $"); spout(dfil1); 
d120 1
a120 1
    spout("*** Unable to read tilted doc. file: $");spout(dfil2); 
d161 1
a161 1
    spout("*** Tilt angle doc. file not available yet: $."); spout(dfil3);
@


1.27
log
@used getdoc instead of unsdal, removed alloc for aval,bval,xsfm,ysfm
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.26 1996/04/16 14:23:30 leith Exp $*/
a57 1
 extern int    firstback;
d82 1
a82 1
    spout("*** Unable to read untilted doc. file."); 
d120 1
a120 1
    spout("*** Unable to read untilted doc. file."); 
d161 1
a161 1
    spout("*** Tilt angle doc. file not available."); 
@


1.26
log
@allocation changed
maxpart no longer read from tilt angle file
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.25 1996/04/12 16:58:22 leith Exp leith $*/
d24 4
a27 4
C * VARIABLES:   xim       image  number             dfil1 + 2
C *              xu0,yu0   untilted picked points    dfil1
C *              xs,ys     tilted picked points      dfil2
C *              xs2,ys2   tilted predicted points   dfil6
d29 6
a34 6
C    dfil1  = untilted
C    dfil2  = tilted points
C    dfil3  = tilt parameters
C    dfil4  = background               (pickback)
C    dfil4  = background               (pickback)
C    dfil6  = tilted predicted points 
a41 1
C
d63 1
a63 3
 float        * xs2  = 0, * ys2  = 0;
 float        * aval = 0, * bval = 0;
 float        * xsmf = 0, * ysmf = 0, * xim  = 0;
d67 1
a67 1
 int fitdoc(int saypts)
d70 1
a70 2
 int      k, maxreg, maxkeys, lerr, maxpartt;
 int      doc_readu, doc_readt, doc_reada;
a71 1
 float    plist[8];
a72 3
 char     outstr[80];
 char     docname[81];
 FILE     *ptrdoc;
a76 5
 /* tell it to open the doc files each time */
 doc_readu = TRUE;
 doc_readt = TRUE;
 doc_reada = TRUE;

a77 12
 strcpy(docname,dfil1);
 strcat(strcat(docname,"."),datexc);

 /* see if there is an existing document file to append to, */
 /* if not start particle picking into new set of doc files */
 if ((ptrdoc = fopen(docname,"r")) == NULL )
    {  /* no doc files, initiate buffer for pick particle */
    spout("  No existing untilted doc. file."); 
    maxpart = 0;  
    return -1;
    }
 fclose(ptrdoc); 
d79 2
a80 2
 if (unsdal(dfil1, &doc_readu, 0, plist, 5, &dbuf, &maxpart,
           maxkeys, maxreg) > 0) 
d85 1
a85 1
    return 1;
a96 4
       ((aval= (float *) realloc((void *) aval, maxpart * 4 * sizeof(float))) 
            == (float *) NULL) || 
       ((bval= (float *) realloc((void *) bval, maxpart * 4 * sizeof(float))) 
            == (float *) NULL) || 
a100 6

       ((xsmf =(float *) realloc((void *) xsmf,maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((ysmf =(float *) realloc((void *) ysmf,maxpart * sizeof(float))) == 
               (float *) NULL) ||

d116 7
a122 11
 /* free first dbuf here*/
 if (dbuf) free(dbuf); dbuf = NULL;


 /* see if there is an existing tilted document file to append to, */
 strcpy(docname,dfil2);
 strcat(strcat(docname,"."),datexc);

 if ((ptrdoc = fopen(docname,"r")) == NULL )
    {  /* no doc files, initiate buffer for pick particle */
    spout("  No existing tilted doc. file."); 
a124 10
  fclose(ptrdoc); 

 /* retrieve data from dfil2 for tilted points */
 if (unsdal(dfil2, &doc_readt, 0, plist, 5, &dbuf, &maxpartt,
            maxkeys, maxreg) > 0) 
       { /* error reading tilted coordinates */
       if (dbuf) free(dbuf); dbuf = NULL;
       spout("*** Tilted doc. file not readable."); 
       return 1;
       }
a150 11
 if (saypts) 
    {
    spout(" INPUT LOCATIONS:");
    for (k = 0; k < maxpart; k++)
       {
       sprintf(outstr,"Key: %d %9.4f %9.4f %9.4f %9.4f",
                       k+1, xu0[k],yu0[k], xs[k],ys[k]);
       spout(outstr);
       }
    }

d154 1
a154 10
 strcpy(docname,dfil3);  strcat(strcat(docname,"."),datexc);

 /* see if there is such a document file */
 if ((ptrdoc = fopen(docname,"r")) == NULL )
    {  /* no doc files, initiate buffer for pick particle */
    spout("No fit angles doc. file yet.");
    return 0;
    }
 fclose(ptrdoc); 

d158 7
a164 7
  if (unsdal(dfil3, &doc_reada, 121, plist, 6, &dbuf,
                &maxtilts, maxkeys, maxreg) > 0) 
     { /* error reading tilted coordinates */
     if (dbuf) free(dbuf); dbuf = NULL;
     spout("*** Tilt angle doc. file not readable."); 
     return 1;
     }
d169 1
a199 6
  if (saypts) 
     {
     sprintf(outstr,
     "Fitted Gamma: %5.2f  Phi:%5.2f Theta:%5.2f  Origin: (%7.2f,%7.2f)",
         gammaff,phif,thetaf,xs0t,ys0t);  spout(outstr);
     }
@


1.25
log
@changed aval
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.24 1996/04/05 16:48:55 leith Exp leith $*/
d24 1
a24 1
C * VARIABLES:   xim       imaged number             dfil1 + 2
a34 1
C    CALLED BY:  fitdocmen, others 
d36 9
d62 1
a62 1
 int           lnum, lim, lbnum, ifit, igflag, maxtilts, maxpart;
d67 1
a67 2
 
         
d70 1
a70 1
 void fitdoc(int saypts, int pickpnow)
d73 1
a73 1
 int      k, maxreg, maxkeys, lerr;
d83 1
a83 1
 maxreg    = 6+1; maxkeys   = 1000;
d98 3
a100 5
    maxpart = 0;
    
    /* pick particle if necessary */
    if (pickpnow) pickp(TRUE);
    return;
d102 1
a102 1
 else   { fclose(ptrdoc); }
d108 1
d110 1
a110 3
    /* start particle picking now (if new set of doc files) */
    if (pickpnow) {pickp(TRUE); }
    return;
d140 1
a140 1
      { spout("*** Unable to reallocate memory in fitdoc."); return; }
d154 12
d167 1
a167 1
 if (unsdal(dfil2, &doc_readt, 0, plist, 5, &dbuf, &maxpart,
d171 2
a172 2
       maxpart = 0;
       return;
d175 10
a184 1
 if (maxpart > nptsnow)
d186 5
a190 25
    /* reallocate space for  arrays, (2nd file has more than first!)*/
   if (((xim = (float *) realloc((void *) xim, maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((xu0 = (float *) realloc((void *) xu0, maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((yu0 = (float *) realloc((void *) yu0, maxpart * sizeof(float))) ==  
               (float *) NULL) ||
       ((aval= (float *) realloc((void *) aval, maxpart * 4 * sizeof(float))) 
            == (float *) NULL) ||
       ((bval= (float *) realloc((void *) bval, maxpart * 4 * sizeof(float))) 
            == (float *) NULL) || 
       ((xs =  (float *) realloc((void *) xs, maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((ys =  (float *) realloc((void *) ys,  maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((xsmf =(float *) realloc((void *) xsmf,maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((ysmf =(float *) realloc((void *) ysmf,maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((xs2 = (float *) realloc((void *) xs2, maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((ys2 = (float *) realloc((void *) ys2, maxpart * sizeof(float))) == 
               (float *) NULL))
      { spout("*** Unable to reallocate memory in fitdoc."); return; }
    nptsnow = maxpart;
d195 1
a195 1
    {  xs[k]  = *(ptr+4); ys[k]  = *(ptr+5);  ptr  += maxreg; }
d202 1
a202 2
    spout(" *FIT* INPUT COORDINATES:");

d204 2
a205 2
         {
         sprintf(outstr,"Key: %d %9.4f %9.4f %9.4f %9.4f",
d207 2
a208 2
         spout(outstr);
         }
d217 19
a235 1
 if ((ptrdoc = fopen(docname,"r")) != NULL)
d237 27
a263 48
     fclose(ptrdoc);
     maxreg  = 6+1;  maxkeys = 125;
     
     /* read the maxpart from dcb*** file */
     if (unsdal(dfil3, &doc_reada, 121, plist, 6, &dbuf,
                &maxtilts, maxkeys, maxreg) <= 0) 
	{
        maxpart = *(plist+4); /* why ? */

/********* for debugging *********/
if (maxpart > nptsnow)
   {
   printf(" Maxpart (%d) > npstsnow (%d) in fitdoc, tell Dean!!!\n",
           maxpart,nptsnow);
   }
if (maxtilts < 124)
   {
   printf(" Maxtilts (%d) < 124 in fitdoc, tell Dean!!!\n",
           maxtilts);
   }


/***********************/
        /*get last particle number */
        ptr    = dbuf + ((121-1) * maxreg);
        lnum   = *(ptr+4);
        lim    = *(ptr+5);
        lbnum  = *(ptr+6);
        numb = lbnum;

        /* get fitted flags? */
        ptr    = dbuf + ((122-1) * maxreg);
        ifit   = *(ptr+1);
        igflag = *(ptr+2);

        /* get origin */
        ptr    = dbuf + ((123-1) * maxreg);
        xu0t   = *(ptr+1);
        yu0t   = *(ptr+2);
        xs0t   = *(ptr+3);
        ys0t   = *(ptr+4);
        iredu  = *(ptr+5);

        /* get tilt angles */
        ptr      = dbuf + ((124-1) * maxreg);
        thetaf   = *(ptr+1);
        gammaff  = *(ptr+2);
        phif     = *(ptr+3);
d265 8
a272 14
        if( gammaff != 0.0 )
          {
          if (saypts) 
            {
            sprintf(outstr,
            "Fitted Gamma: %5.2f  Phi:%5.2f Theta:%5.2f  Origin: (%7.2f,%7.2f)",
               gammaff,phif,thetaf,xs0t,ys0t);  spout(outstr);
            }
          fitted = TRUE;
          }
       
        /* free dbuf here */
        if (dbuf) free(dbuf);  dbuf = NULL;
	}
d274 2
a275 2
 else
     spout("No fitted angles yet !!!");
a276 5
 if (pickpnow) 
    {   /* start particle picking now */
    pickp(TRUE);
    firstback = TRUE;
    }
a277 1
 }
@


1.24
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.23 1996/03/25 14:43:15 leith Exp leith $*/
a27 2
C *              aval
C *              bval
d56 2
a57 1
 float        * xs2  = 0, * ys2  = 0, * aval = 0, * bval = 0;
@


1.23
log
@minor
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.22 1996/03/21 19:40:00 leith Exp leith $*/
d20 3
a22 2
C    PURPOSE:    input point locations from doc files for fitting
C                tilt angles
d27 1
a27 1
C *              xs2,ys2   tilted predicted points   
d34 3
a36 3
C    dfil4  = background        (pickback)
C    dfil4  = background        (pickback)
C
d231 7
d285 2
a286 1
    pickp(TRUE);   firstback = TRUE;
@


1.22
log
@bad sprintf format
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.21 1996/03/21 17:15:46 leith Exp leith $*/
d29 7
d54 1
a54 1
 /* internal file scope variables */
d56 3
a58 3
 float        * xu0 = 0, * yu0 = 0, * xs   = 0, * ys   = 0;
 float        * xs2 = 0, * ys2 = 0, * aval = 0, * bval = 0;
 float        * xsmf = 0, * ysmf = 0, * xim = 0;
d104 2
a105 4
    if (pickpnow) 
       {   /* start particle picking now (new set of doc files) */
       pickp(TRUE);
       }
d150 1
a150 1
 /* retrieve data from dfil1 for tilted points */
@


1.21
log
@bug in speellong
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.20 1996/03/21 16:48:14 leith Exp leith $*/
d257 1
a257 1
            "Fitted Gamma: %5.2f  Phi:%5.2f Theta:%5.2f  Origin: (7.2f,%7.2f)",
@


1.20
log
@added debug message
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.19 1995/08/16 18:11:15 mladjadj Exp leith $*/
d223 1
a223 1
           maxpart,npstnow);
@


1.19
log
@clean up
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.15 1995/02/07 21:43:30 liy Exp $*/
d219 7
@


1.18
log
@initialize maxpart=0 when no document
@
text
@d41 1
a41 1
 extern int    fitted, theta_ok;
a243 1
        theta_ok = *(ptr+4);
@


1.17
log
@disable theta_ok for now
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.16 1995/08/08 15:33:46 mladjadj Exp mladjadj $*/
d23 6
d40 2
a41 4
 extern float  * xim, * xu0, * yu0, * xs,  * ys, * xs2, * ys2, 
               * aval, * bval, * xsmf, * ysmf; 
 extern int    numm, numb, maxpart, iredu;
 extern int    fitted; /* disaable for now ,theta_ok; */
d48 5
a52 1
 int           lnum, lim, lbnum, ifit, igflag, maxtilts;
d96 1
d150 1
a243 1
/* disable for now
d245 1
a245 1
*/	      
@


1.16
log
@clean printf
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.15 1995/02/07 21:43:30 liy Exp $*/
d37 1
a37 1
 extern int    fitted, theta_ok;
d234 1
d236 1
a236 1
	      
@


1.15
log
@modified (int)structure for Onyx
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/fitdoc.c,v 1.14 1995/01/19 19:19:01 liy Exp liy $*/
d37 1
a37 1
 extern int    fitted;
d59 1
a59 1

d61 1
a61 2
 maxreg    = 5+1;
 maxkeys   = 1000;
d69 2
a70 2
  strcpy(docname,dfil1);
  strcat(strcat(docname,"."),datexc);
d72 4
a75 5
  /* see if there is existing document file to append to, */
  /* if not start particle picking into new set of doc files */
  if ((ptrdoc = fopen(docname,"r")) == NULL )
    {  /* no existing doc files */
    /* initiate the buffer for pick particle */
d82 1
a82 1
  else   { fclose(ptrdoc); }
d129 2
a130 4
    xim[k]  = *(ptr+1);
    xu0[k]  = *(ptr+4);
    yu0[k]  = *(ptr+5);
    ptr  += maxreg; 
d172 1
a172 1

d175 1
a175 5
    {
    xs[k]  = *(ptr+4);
    ys[k]  = *(ptr+5);
    ptr  += maxreg; 
    }
d194 2
a195 3

  strcpy(docname,dfil3);
  strcat(strcat(docname,"."),datexc);
d197 2
a198 2
  /* see if there is such a document file */
  if ((ptrdoc = fopen(docname,"r")) != NULL)
d201 2
a202 1

d204 33
a236 39
     if (unsdal(dfil3, &doc_reada, 121, plist, 6, &dbuf, &maxtilts, 
            maxkeys, maxreg) <= 0) 
	maxpart = *(plist+4);

     maxreg  = 6+1;
     maxkeys = 125;
     /* open the document file */
     if (unsdal(dfil3, &doc_reada, 0, plist, 6, &dbuf, &maxtilts, 
            maxkeys, maxreg) <= 0) 
       {
       /*get last particle number */
       ptr    = dbuf + (120 * maxreg);
       lnum   = *(ptr+4);
       lim    = *(ptr+5);
       lbnum  = *(ptr+6);
       numb = lbnum;

       /* get fitted flags? */
       ptr    = dbuf + (121 * maxreg);
       ifit   = *(ptr+1);
       igflag = *(ptr+2);

       /* get origin */
       ptr    = dbuf + (122 * maxreg);
       xu0t   = *(ptr+1);
       yu0t   = *(ptr+2);
       xs0t   = *(ptr+3);
       ys0t   = *(ptr+4);
       iredu  = *(ptr+5);

       /* get tilt angles */
       ptr    = dbuf + (123 * maxreg);
       thetaf = *(ptr+1);
       gammaff = *(ptr+2);
       phif   = *(ptr+3);

      if( gammaff != 0.0 )
       {
       if (saypts) 
d238 7
a244 4
          sprintf(outstr,
          "Fitted Gamma: %5.2f  Phi:%5.2f Theta:%5.2f  Origin: (7.2f,%7.2f)",
               gammaff,phif,thetaf,xs0t,ys0t);
          spout(outstr);
d246 7
a252 5
       fitted = TRUE;
       }

       /* free dbuf here */
       if (dbuf) free(dbuf);  dbuf = NULL;
a253 3
       }
    } 

d256 1
a256 2
    pickp(TRUE);
    firstback = TRUE;
a259 1

@


1.14
log
@fixed picking particles problem
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/fitdoc.c,v 1.13 94/12/30 10:16:56 leith Exp $*/
d97 1
a97 1
 if (((int) xim <= 0) || (maxpart > nptsnow))
@


1.13
log
@removed excess output
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/fitdoc.c,v 1.12 94/07/05 16:10:54 odesanya Exp Locker: leith $*/
d77 4
d210 6
@


1.12
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/fitdoc.c,v 1.11 1994/06/06 11:27:43 odesanya Exp odesanya $*/
d240 7
a246 4
       sprintf(outstr,
       "Fitted Gamma: %5.2f  Phi:%5.2f Theta:%5.2f  Origin: (7.2f,%7.2f)",
        gammaff,phif,thetaf,xs0t,ys0t);
       spout(outstr);
@


1.11
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/fitdoc.c,v 1.10 94/04/12 15:46:15 leith Exp $*/
d38 1
a38 1
 extern float  phif, thetaf, gammaf;
d235 1
a235 1
       gammaf = *(ptr+2);
d238 1
a238 1
      if( gammaf != 0.0 )
d242 1
a242 1
        gammaf,phif,thetaf,xs0t,ys0t);
@


1.10
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/fitdoc.c,v 1.9 94/03/28 12:22:53 leith Exp Locker: leith $*/
d36 1
a36 1
 extern int    numm, maxpart, iredu;
d217 1
d238 2
d244 2
a249 1
       fitted = TRUE;
@


1.9
log
@removed overlut use
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/fitdoc.c,v 1.8 94/03/21 12:22:19 leith Exp Locker: leith $*/
d41 1
d252 1
@


1.8
log
@changes for vax
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/fitdoc.c,v 1.6 94/03/17 12:07:49 leith Exp $*/
d30 1
d32 1
a32 8
 /* function prototypes */
 extern int unsdal (char *, int *, int, float *,
                   int, float **, int *,
                   int, int);
 extern void  pickp(int);
 extern void  spout(char *);

 /* external variables */
d42 1
a42 1

@


1.7
log
@improved
@
text
@d56 1
a56 1
 int      k, maxreg, maxkeys,lerr;
d66 1
a66 1
 maxreg    = 6+1;
d79 2
a80 2
  /* if not start prticle picking into new set of doc files */
  if ((ptrdoc = fopen(docname,"r")) == NULL)
d85 1
a88 1

a97 1

d107 4
a110 4
       ((aval= (float *) realloc((void *) aval, maxpart * 4 * sizeof(float))) ==  
               (float *) NULL) ||
       ((bval= (float *) realloc((void *) bval, maxpart * 4 * sizeof(float))) ==  
               (float *) NULL) || 
d143 1
a143 1
            maxkeys, maxreg) != 0) 
d158 4
a161 4
       ((aval= (float *) realloc((void *) aval, maxpart * 4 * sizeof(float))) ==  
               (float *) NULL) ||
       ((bval= (float *) realloc((void *) bval, maxpart * 4 * sizeof(float))) ==  
               (float *) NULL) || 
d252 1
a252 2
    }
 
a259 1

@


1.6
log
@removed errorneous unable to open doc file message on first use
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/fitdoc.c,v 1.5 93/11/26 12:29:11 leith Exp Locker: leith $*/
d66 1
a66 1
 maxreg    = 5+1;
@


1.5
log
@improved
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/fitdoc.c,v 1.4 93/11/24 15:47:27 leith Exp Locker: leith $*/
d75 11
d89 1
a89 1
    {   /* problem retrieving doc file or no file made yet */
d92 1
a92 1
       {   /* start particle picking now (new set of doc files */
@


1.4
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/fitdoc.c,v 1.3 93/11/24 11:27:08 leith Exp $*/
d63 1
a63 1
 FILE        *ptrdoc;
d66 1
a66 1
 maxreg    = 6;
d135 1
a135 1
       if ((int) dbuf != 0) free(dbuf); dbuf = NULL;
d197 1
a197 1
  /* open the document file */
d201 4
a204 2

     if (unsdal(dfil3, &doc_reada, 0, plist, 7, &dbuf, &maxtilts, 
d232 5
d238 3
a240 1
       if (dbuf) free(dbuf); dbuf = NULL;
d244 1
@


1.3
log
@close --> fclose
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/fitdoc.c,v 1.2 93/11/22 16:38:22 leith Exp Locker: leith $*/
d75 1
a75 1
 if (unsdal(dfil1, &doc_readu, 1, plist, 5, &dbuf, &maxpart,
d132 1
a132 1
 if (unsdal(dfil2, &doc_readt, 1, plist, 5, &dbuf, &maxpart,
d202 1
a202 1
     if (unsdal(dfil3, &doc_reada, 1, plist, 7, &dbuf, &maxtilts, 
@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/fitdoc.c,v 1.1 93/11/16 14:13:03 leith Exp Locker: leith $*/
d200 1
a200 1
     close(ptrdoc);
@


1.1
log
@Initial revision
@
text
@a0 1
/*$Header$*/
d2 2
d41 1
a41 1
               * aval, * bval; 
d46 1
d48 1
d62 2
d88 1
a88 1
 if ((int) xim <= 0) 
a90 23
   if (((xim = (float *) malloc(maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((xu0 = (float *) malloc(maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((yu0 = (float *) malloc(maxpart * sizeof(float))) ==  
               (float *) NULL) ||
       ((aval= (float *) calloc(4 * maxpart, sizeof(float))) ==  
               (float *) NULL) ||
       ((bval= (float *) calloc(4 * maxpart, sizeof(float))) ==  
               (float *) NULL) || 
       ((xs =  (float *) malloc(maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((ys =  (float *) malloc(maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((xs2 = (float *) malloc(maxpart * sizeof(float))) == 
               (float *) NULL) ||
       ((ys2 = (float *) malloc(maxpart * sizeof(float))) == 
               (float *) NULL))
      { spout("*** Unable to allocate memory in fitdoc."); return; }
    }
 else if (maxpart > nptsnow)
    {
    /* reallocate space for  arrays */
d101 1
a101 1
       ((xs =  (float *) realloc((void *) xs, maxpart * sizeof(float))) == 
d105 6
d156 4
d185 1
a185 1
         sprintf(outstr,"Key: %d %12.4f %12.4f %12.4f %12.4f",
d193 10
a202 1
 if (unsdal(dfil3, &doc_reada, 1, plist, 7, &dbuf, &maxtilts, 
d204 6
a209 6
    {
    /*get last particle number */
    ptr    = dbuf + (120 * maxreg);
    lnum   = *(ptr+4);
    lim    = *(ptr+5);
    lbnum  = *(ptr+6);
d211 4
a214 4
    /* get fitted flags? */
    ptr    = dbuf + (121 * maxreg);
    ifit   = *(ptr+1);
    igflag = *(ptr+2);
d216 7
a222 7
    /* get origin */
    ptr    = dbuf + (122 * maxreg);
    xu0t   = *(ptr+1);
    yu0t   = *(ptr+2);
    xs0t   = *(ptr+3);
    ys0t   = *(ptr+4);
    iredu  = *(ptr+5);
d224 5
a228 5
    /* get tilt angles */
    ptr    = dbuf + (123 * maxreg);
    thetaf = *(ptr+1);
    gammaf = *(ptr+2);
    phif   = *(ptr+3);
d230 3
a232 2
    /* free dbuf here */
    if (dbuf) free(dbuf); dbuf = NULL;
a233 2
 else
    fitted = FALSE;
@
