head	1.12;
access;
symbols
	pre-tilt-improve:1.12
	pre_surf_fromtop:1.12
	pre_neednewmap:1.8
	pre_apppluss_remove:1.6
	pre_tiltpair_chng:1.6
	pre_GPL:1.3;
locks;
comment	@ * @;


1.12
date	2011.09.27.13.39.56;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.23.11.54.57;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.21.15.05.21;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.21.14.20.13;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.15.16.35.46;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.14.15.50.19;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.05.12.05.27;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2011.02.28.15.23.18;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.18.16.59.24;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	98.02.24.14.50.40;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.02.14.12.44.00;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.10.10.11.10;	author leith;	state Exp;
branches;
next	;


desc
@@


1.12
log
@extern for ngo,nend
@
text
@
/*
 * expos_cb.c
 *                 backclear added              Feb 2011 ArDean Leith  *
 *                 True color                   Sep 2011 ArDean Leith  *
 ***********************************************************************
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
 ***********************************************************************
 *
 * expos_cb(iw_temp, data, call_data)
 * 
 * PURPOSE:     Handles exposures on draw window 
 *
 * RETURNS:     void
 * 
 * PARAMETERS:        
 *
 ***********************************************************************
*/

#include "x.h"
#include "std.h"

 // Functions used here
 void         spout(char *);
 extern void  backclear(Pixmap imagesavn, 
                        unsigned int iwidex, 
                        unsigned int highx);

 // External common variables
 extern Display        *idispl;
 extern Drawable       iwin, imagsav;
 extern unsigned int   iwidex, ihighx;
 extern int            ixulx,iyulx;
 extern GC             icontx, icontxb;
 extern int            drawing;

 extern int            icolorxb; 
 extern int            mapgo,mapend;       // Start & end in colormap 
 extern int            ngo,nend;           // Image start & end in colormap 

 // Internally defined common variables
 int                   vmap[256];          // Virtual colormap
 unsigned int          iwidexb    = 0;
 unsigned int          ihighxb    = 0;
 Boolean               neednewmap = TRUE;  // Flag to create vimage
 Boolean               usecmap    = FALSE; // Future Flag for cmap

/**********************  expos_cb **********************************/

#ifdef WEB_TRUE
// WEB_TRUE -----------------------------------------------------------

 XImage        *vimage = NULL;    // Virtual image
 Pixmap        imapsav = (Pixmap)NULL;    // Image backing store

 void expos_cb(Widget iw_temp, XtPointer data, XtPointer call_data)

 { 
 int           i,j,k;
 Window        iroot;
 unsigned int  iwidext,ihighxt,iborder,idepth,ixd,iyd;
 Pixmap        imagsavn;
 unsigned long ip_mask;            // For image ramp
 unsigned char cvalueold,cvaluenew;
 int           ipad;

 if (XGetGeometry(idispl,iwin,&iroot,&ixulx,&iyulx,&iwidext,&ihighxt,
                  &iborder,&idepth) == 0) 
     spout("*** Error getting geometry in expos_cb");

 if (iwidext > iwidexb || ihighxt > ihighxb)
    {
    /* Need to enlarge backing store for images */

    imagsavn = XCreatePixmap(idispl,iroot,iwidext,ihighxt,idepth);
    if ((int) imagsavn <= 0)  
      { spout("*** Can not create new backing store!"); return; } 

    if (imapsav != (Pixmap) NULL) XFreePixmap(idispl,imapsav);
    imapsav = XCreatePixmap(idispl,iroot,iwidext,ihighxt,idepth);
    if ((int) imagsavn <= 0)  
      { spout("*** Can not create new map backing store!"); return; } 

    // Clear background of new Pixmap   al 2011
    backclear(imagsavn,iwidext,ihighxt);
    backclear(imapsav,iwidext,ihighxt);
    
    /* Copy old backing store to new backing store */
    ixd = MYMIN(iwidexb,iwidext);
    iyd = MYMIN(ihighxb,ihighxt);

    XCopyArea(idispl,imagsav,imagsavn,icontx,0,0,ixd,iyd,0,0);
    XFreePixmap(idispl,imagsav);
    imagsav = imagsavn;

    iwidexb = iwidext;
    ihighxb = ihighxt;

    //printf(" Resized backing store: %d x %d \n",iwidexb,ihighxb);

    if (vimage != NULL) XDestroyImage(vimage);
    vimage = NULL;
    }

 if (iwidext != iwidex || ihighxt != ihighx)
    {  /* Size of window changed but not larger than backing store */
    /* Remember size of current image window */
    iwidex = iwidext;
    ihighx = ihighxt;
    //printf(" Size changed: %d x %d \n",iwidex,ihighx);

    if (vimage != NULL) XDestroyImage(vimage);
    vimage = NULL;
    }

 //printf("mapgo: %d, mapend: %d  \n",        mapgo,    mapend);

 if (ngo == 0 && nend == 255)
    {
    /* Just copy un-mapped backing store to image window */
    XCopyArea(idispl,imagsav,iwin,icontx,0,0,iwidex,ihighx,0,0);
    //printf(" Using normal map: %d x %d \n",iwidex,ihighx);
    }

 else
    { // Must use vmap on imagsav backing store 

    //printf(" Using vmap: %d x %d \n",iwidex,ihighx);

    if (vimage == NULL || neednewmap) 
       {  // Create new colormapped backing store (size changed or imagesav changed)

       if (vimage != NULL) XDestroyImage(vimage);
       //printf("New colormapped backing store: %d %d \n",neednewmap,vimage);

       // Get image from standard backing store.
       ip_mask = -1;                     
       vimage  = XGetImage(idispl, imagsav, 0,0, iwidex,ihighx,
                          ip_mask, ZPixmap);
       //printf(" vimage: bpp=%d x %d %d \n",
       //     vimage->bits_per_pixel, vimage->width, vimage->height);
       if (vimage == (XImage *) NULL) 
          { spout("*** Virtual colormap image formation failed"); return; }

       // Apply virtual colormap to image
       k = 0;
       for (i=1; i <= iwidex; i++)
          {
          for (j=0; j < ihighx*4; j++)   // Why 4? al 9/2011
             {
             cvalueold       = (unsigned char) vimage->data[k];
             cvaluenew       = vmap[cvalueold];
             vimage->data[k] = cvaluenew;
             k++;
             }  // End of: for (j=0; j... 
          }     // End of: for (i=1; i... 

       // Put virtual colormapped image in cmap backing store: imapsav
       XPutImage(idispl,imapsav, icontx,vimage,0,0, 0,0, iwidex, ihighx); 

       }        // End of: if (vimage == NULL...

    // Copy colormapped backing store to display
    XCopyArea(idispl,imapsav,iwin,icontx,0,0,iwidex,ihighx,0,0);

    neednewmap = FALSE;
    }
  
 XFlush(idispl);

 drawing = FALSE;

 return;
 }


#ifdef NEVER
          ivalueold       = (int) vimage->data[k]; 
          ivaluenew       = vmap[ivalueold];
          if (ivalueold > 0)
            {  printf("vimage:[%d,%d]= %d %d \n", i,j, ivalueold,ivaluenew); }
 

    /* Copy backing store to image window */
    // XCopyArea(idispl,imagsav,iwin,icontx,0,0,iwidex,ihighx,0,0);
    //if (imagsavmap > 0) 
    //     XFreePixmap(imagsavmap); // Virtual cmap image backing store      
    //imagsavmap = 0;                              // Virtual cmap image backing store      

    if (imagsavmap <= 0)
       {  // Create new pixmap for virtual cmap image
       imagsavmap = XCreatePixmap(idispl,iroot, iwidex,ihighx,idepth);

       Bpp = (int) pow(2, (DefaultDepthOfScreen(iscreen) / 8) - 1);

       // vimage = XCreateImage(idispl,visual,DefaultDepthOfScreen(iscreen),
       //      ZPixmap, 0,  vbuf,    iwidex, ihighx, Bpp*4, iwidex*Bpp);
       }
#endif



#else
// WEB_24 -----------------------------------------------------------

/**********************  expos_cb **********************************/

void expos_cb(Widget iw_temp, XtPointer data, XtPointer call_data)

 { 

 Window       iroot;
 unsigned int iwidext,ihighxt,iborder,idepth,ixd,iyd;
 Pixmap       imagsavn;


 if (XGetGeometry(idispl,iwin,&iroot,&ixulx,&iyulx,&iwidext,&ihighxt,
                  &iborder,&idepth) == 0) 
     spout("*** Error getting geometry in expos_cb");

 if (iwidext > iwidexb || ihighxt > ihighxb)
    {
    /* Need to enlarge backing store for images */

    imagsavn = XCreatePixmap(idispl,iroot,iwidext,ihighxt,idepth);
    if ((int) imagsavn <= 0)  
      { spout("*** Can not create new backing store!"); return; } 

    // Clear background of new Pixmap   al 2011
    backclear(imagsavn,iwidext,ihighxt);
    
    /* Copy old backing store to new backing store */
    ixd = MYMIN(iwidexb,iwidext);
    iyd = MYMIN(ihighxb,ihighxt);
    XCopyArea(idispl,imagsav,imagsavn,icontx,0,0,ixd,iyd,0,0);
    XFreePixmap(idispl,imagsav);
    imagsav = imagsavn;

    iwidexb = iwidext;
    ihighxb = ihighxt;
    }

 if (iwidext != iwidex || ihighxt != ihighx)
       {  /* Size of window changed but not larger than backing store */
       /* Remember size of current image window */
       iwidex = iwidext;
       ihighx = ihighxt;
       }

 /* Copy backing store to image window */
 XCopyArea(idispl,imagsav,iwin,icontx,0,0,iwidex,ihighx,0,0); 
 XFlush(idispl);

 drawing = FALSE;

 return;
 }

#endif


 /*****************  backclear  ******************************/

 void backclear(Pixmap imagsavn, unsigned int iwidex, unsigned int ihighx)
 {

 XGCValues    gcval;

 if (icontxb <= (GC)0)
   { /* Need to create a new graphics context for blanking */
   icontxb = XCreateGC(idispl,iwin,0,&gcval);
   XCopyGC(idispl,icontx,0,icontxb);
   }

 if (icolorxb < 1)
     icolorxb = 0;

 XGetGCValues(idispl, icontx, GCForeground, &gcval); //??? al
 
 XSetForeground(idispl,icontx,icolorxb);    // Set clearing  color

 XFillRectangle(idispl,imagsavn,icontx,0,0,iwidex,ihighx);

 XFlush(idispl);

 XSetForeground(idispl, icontx, gcval.foreground);  // Restore color

 return;
 }
@


1.11
log
@*** empty log message ***
@
text
@d4 3
a6 3
 *                 backclear added                Feb 2011 ArDean Leith
 *
 **********************************************************************
d38 1
a38 1
 * PARAMETERS:     
d47 4
a50 4
 void   spout(char *);
 extern void backclear(Pixmap imagesavn, 
                       unsigned int iwidex, 
                       unsigned int highx);
d60 3
a62 2
 extern int            icolorxb; // al
 extern int            mapgo,mapend;      // Image start & end in colormap 
d65 1
a67 1
 int                   vmap[256];          // Virtual colormap
d141 1
a141 1
 if (mapgo == 0 && mapend == 255)
d145 1
d181 1
a181 1
       // Put colormapped image in cmap backing store: imapsav
@


1.10
log
@imapsav
@
text
@d46 1
d52 1
d63 1
d66 3
a68 3
 int                   mapgo_old  = 0;
 int                   mapend_old = 255;
 int                   vmap[256];         // Virtual colormap
d73 1
a75 1
 Boolean       neednewmap;        // Flag to create vimage
a137 1
 //printf("mapgo_old: %d, mapend_old: %d  \n",mapgo_old,mapend_old);
a139 22
 if (mapgo != mapgo_old || mapend != mapend_old)
    { // Must create new virtual map
    
    //printf("new vmap: \n");
    
    for (i=0; i < 256; i++)
       {
       if (i < mapgo)
           vmap[i] = 0;
       else if (i <= mapend)
           {
           vmap[i] = (i - mapgo) * 255 / (mapend - mapgo);
           //printf("vmap: [%d]: %d %d %d \n",i,vmap[i]);
           }
       else
           vmap[i] = 255;
       }

    mapgo_old  = mapgo;
    mapend_old = mapend;
    }

d142 1
a142 1
    /* Just copy backing store to image window */
d147 1
a147 1
    { // Must use vmap on imagsav backing store. 
d152 1
a152 1
       {  // Must create new vimage (size changed or imagesav changed)
d155 1
d157 4
a160 11
   //printf("New map: %d ... %d  %d %d \n",mapgo,mapend,neednewmap,vimage);

       // Get image from backing store.
       //ipad = iwidex % 4;              // Bitmap pad for Ximage
       //if (ipad > 0) ipad = 4 - ipad;

       //ip_mask = pow(2,16); - 1;       // For image ramp (gives magenta)
       ip_mask   = -1;                     // For image ramp
       vimage    = XGetImage(idispl, imagsav, 0,0, iwidex,ihighx,
                            ip_mask, ZPixmap);

a162 1

d176 2
a177 3
             }  // End of: for (j=0; j 
          // k = k + ipad;
          }     // End of: for (i=1; i 
d179 1
a179 1
       // Copy colormapped image to cmap backing store
d182 1
a182 3

       }        // End of: if (vimage == NULL

d197 1
d225 1
a225 1

d229 1
a229 1
 void expos_cb(Widget iw_temp, caddr_t data, caddr_t call_data)
@


1.9
log
@neednewmap changes
@
text
@d73 1
d98 5
d105 1
d176 1
a176 1
   printf("New map: %d ... %d  %d %l4 \n",mapgo,mapend,vimage,neednewmap);
d206 5
d213 3
a215 2
    // Copy colormapped image to display
    XPutImage(idispl,iwin, icontx,vimage,0,0, 0,0, iwidex, ihighx); 
@


1.8
log
@*** empty log message ***
@
text
@d71 3
a83 1
 XImage        *vimage = NULL;
d111 4
a114 1
//printf(" resized backing store: %d x %d \n",iwidexb,ihighxb);
d122 4
a125 1
//printf(" size chagned: %d x %d \n",iwidex,ihighx);
d160 3
a162 1
    { // Must use vmap on backing store. Get image from backing store.
d164 2
a165 1
    //printf(" using vmap: %d x %d \n",iwidex,ihighx);
d167 1
a167 2
    //ipad = iwidex % 4;                  // Bitmap pad for Ximage
    //if (ipad > 0) ipad = 4 - ipad;
d169 1
a169 4
    //ip_mask = pow(2,16); - 1;            // For image ramp (gives magenta)
    ip_mask = -1;                      // For image ramp
    vimage = XGetImage(idispl, imagsav, 0,0, iwidex,ihighx,
                         ip_mask, ZPixmap);
d171 3
a173 2
    //printf(" vimage: bpp=%d x %d %d \n",
    //     vimage->bits_per_pixel, vimage->width, vimage->height);
d175 4
a178 2
    if (vimage == (XImage *) NULL) 
       { spout("*** Virtual colormap image formation failed");  return; }
d180 9
a188 5
    // Apply virtual colormap to image
    k = 0;
    for (i=1; i <= iwidex; i++)
       {
       for (j=0; j < ihighx*4; j++)   // Why 4? al 9/2011
d190 10
a199 7
          cvalueold       = (unsigned char) vimage->data[k];
          cvaluenew       = vmap[cvalueold];
          vimage->data[k] = cvaluenew;
          k++;
          }
       // k = k + ipad;
       }
d204 1
a204 2
    XDestroyImage(vimage);
    vimage = NULL;
d206 1
a206 1
 
@


1.7
log
@WEB_TRUE modifications
@
text
@a279 30

 /*****************  backclear  ******************************/

 void backclear(Pixmap imagsavn, unsigned int iwidex, unsigned int ihighx)
 {

 XGCValues    gcval;

 if (icontxb <= (GC)0)
   { /* Need to create a new graphics context for blanking */
   icontxb = XCreateGC(idispl,iwin,0,&gcval);
   XCopyGC(idispl,icontx,0,icontxb);
   }

 if (icolorxb < 1)
     icolorxb = 0;

 XGetGCValues(idispl, icontx, GCForeground, &gcval); //??? al
 
 XSetForeground(idispl,icontx,icolorxb);    // Set clearing  color

 XFillRectangle(idispl,imagsavn,icontx,0,0,iwidex,ihighx);

 XFlush(idispl);

 XSetForeground(idispl, icontx, gcval.foreground);  // Restore color

 return;
 }

@


1.6
log
@-cmap_changes_etc
@
text
@d4 1
a4 1
 *                 backclear added                Feb 2022 ArDean Leith
d32 1
a32 1
 * expos_cb(
d46 4
a49 1
 extern void backclear(Pixmap imagesavn, unsigned int iwidex, unsigned int highx);
d59 31
d91 134
a224 2
 unsigned int          iwidexb = 0;
 unsigned int          ihighxb = 0;
a225 1
 void   spout(char *);
d279 32
@


1.5
log
@clear backgound upon expose
@
text
@d132 1
a132 1
 XGetGCValues(idispl, icontx, GCForeground, &gcval);
@


1.4
log
@GPL
@
text
@a1 1
/*$Header: /net/ithaca/usr1/web/src/RCS/expos_cb.c,v 1.2 1994/02/14 12:44:00 leith Exp $*/
d4 1
d6 1
a6 1
 ***********************************************************************
d34 1
a34 1
 * PURPOSE:     handles exposures on draw window 
d46 2
d55 4
a58 2
 unsigned int iwidexb = 0;
 unsigned int ihighxb = 0;
d79 1
a79 1
    /* need to enlarge backing store for images */
d83 4
a86 4
      { 
      spout("*** Can not create new backing store!");
      return;
      } 
d88 1
a88 1
    /* copy old backing store to new backing store */
d100 2
a101 2
       {  /* size of window changed but not larger than backing store */
       /* remember size of current image window */
d106 1
a106 1
 /* copy backing store to image window */
d116 12
d129 2
a130 1
#ifdef NEVER
d132 3
a134 11
    if ((int)icontxb <= 0)
      { /* need to create a new graphics context for blanking */
      icontxb = XCreateGC(idispl,iwin,0,&gcval);
      XCopyGC(idispl,icontx,0,icontxb);
      }
    /*********************
    XSetForeground(idispl,icontx,icolorxb);
    wifillr(imagsavn,icontb,0,0,iwidext,ihighxt) *************/
       /********** reset scroll bar position
       XtSetArg(args[0], XmNx,  iwidex-17);
       XtSetValues(iw_vers,args,1);  ***************/
d136 8
a143 1
#endif
@


1.3
log
@NT specific changes
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/expos_cb.c,v 1.2 94/02/14 12:44:00 leith Exp $*/
d7 23
a29 6
 * COPYRIGHT (C)1992, WADSWORTH CENTER FOR LABORATORIES AND
 * RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      
 * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     
 * LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  
 * USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF 
 * THE CENTER FOR LABORATORIES AND RESEARCH 			  
a71 4

	#ifdef SP_NT
		iyulx-=27;
	#endif
@


1.2
log
@replaced MIN,MAX with MYMIN,MYMAX
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/expos_cb.c,v 1.1 93/11/10 10:11:10 leith Exp Locker: leith $*/
d55 4
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*$Header$*/
d68 2
a69 2
    ixd = MIN(iwidexb,iwidext);
    iyd = MIN(ihighxb,ihighxt);
@
