head	1.8;
access;
symbols
	pre-tilt-improve:1.8
	pre_surf_fromtop:1.8
	pre_neednewmap:1.8
	pre_apppluss_remove:1.8
	pre_tiltpair_chng:1.8
	pre_GPL:1.7;
locks;
comment	@ * @;


1.8
date	2005.10.18.16.59.44;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	95.03.15.15.31.26;	author liy;	state Exp;
branches;
next	1.6;

1.6
date	94.09.28.12.16.10;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	94.09.27.16.51.52;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	94.03.01.15.20.35;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	94.02.16.12.49.59;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.02.14.12.44.51;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.12.20.11.57.32;	author leith;	state Exp;
branches;
next	;


desc
@new routine for erosion
@


1.8
log
@GPL
@
text
@
/*$Header: /net/ithaca/usr1/web/src/RCS/filtere.c,v 1.7 1995/03/15 15:31:26 liy Exp $*/

/***********************************************************************
 *
 * filtere.c
 *
 ***********************************************************************
 * author : ArDean Leith
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
 ***********************************************************************
 *
 * filtere()
 * 
 * PURPOSE:    convolves an floating point image with a kernal 
 *             performing an erosion or dilation at specified
 *             connectivity and threshold.
 *
 * RETURNS:    true or false
 *
 * PARAMETERS: 
 *
 ***********************************************************************
*/

#include "std.h"
#ifndef VMS
#include "float.h"
#endif

 /******************************  filtere **************************/

 int filtere(float * oldimage, int nsamt, int nrowt, 
             int erode, int coeff, float threshold, 
             float * newimage, float * fmint, float * fmaxt)
 {
 int     ix, iy,   nrowkd2, nsamkd2, it;
 float   oldval;
 int     icon3, icon4;
 int     ip, hit;
 float * endimage;
 float   fmino,fmaxo;

 nrowkd2 = 1;
 nsamkd2 = 1;
 fmino   = *fmint;
 fmaxo   = *fmaxt;

 *fmint = FLT_MAX;
 *fmaxt = FLT_MIN;

 /* convolve over all positions in the new image except border */

 for (iy = 1; iy < nrowt - 1; iy++)
    {
    icon3 = iy * nsamt;

    for (ix = 1; ix < nsamt - 1; ix++)
       {
       icon4 = icon3 + ix;
       oldval = oldimage[icon4];

       if (erode  && (oldval < threshold)) 
          {
          newimage[icon4] = fmino;
          *fmaxt          = MYMAX(*fmaxt,fmino);
          *fmint          = MYMIN(*fmint,fmino);
          }
  
       else if (!erode && (oldval >= threshold))
          {
          newimage[icon4] = oldval;
          *fmaxt          = MYMAX(*fmaxt,oldval);
          *fmint          = MYMIN(*fmint,oldval);
          }

       else
          {
          hit   = 0;
          /* convolve over all positions in the kernal */
          if (oldimage[icon4 - 1        ] >= threshold) hit++;
          if (oldimage[icon4 - nsamt - 1] >= threshold) hit++;
          if (oldimage[icon4 - nsamt    ] >= threshold) hit++;
          if (oldimage[icon4 - nsamt + 1] >= threshold) hit++;
          if (oldimage[icon4 + 1        ] >= threshold) hit++;
          if (oldimage[icon4 + nsamt + 1] >= threshold) hit++;
          if (oldimage[icon4 + nsamt    ] >= threshold) hit++;
          if (oldimage[icon4 + nsamt - 1] >= threshold) hit++;

          if (erode  && (hit > coeff))
             {
             newimage[icon4] = oldval;
             *fmaxt          = MYMAX(*fmaxt,oldval);
             *fmint          = MYMIN(*fmint,oldval);
             }
          else if (!erode && (hit > coeff))
             {
             newimage[icon4] = fmaxo;
             *fmaxt          = MYMAX(*fmaxt,fmaxo);
             *fmint          = MYMIN(*fmint,fmaxo);
             }
          else
             {
             newimage[icon4] = fmino;
             *fmaxt          = MYMAX(*fmaxt,fmino);
             *fmint          = MYMIN(*fmint,fmino);
             }

          }
        }
     }

  /* fill in border with minimum value */

  endimage = newimage + nsamt * nrowt - 1;

  /* fill top and bottem borders */
  for(ip = 0; ip < nsamt * nrowkd2; ip++)
     {
     *(newimage + ip) = fmino;
     *(endimage - ip) = fmino;
     }

  /* fill left and right borders */
   for(it = 0; it < nsamkd2; it++)
     {    
     for(ip = it; ip < nsamt*nrowt; ip=ip+nsamt)
        {
        *(newimage + ip) = fmino; 
        *(endimage - ip) = fmino;
        }
     }

  return TRUE;
}


@


1.7
log
@fixed bugs in convolve functions
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/filtere.c,v 1.6 1994/09/28 12:16:10 leith Exp liy $*/
d10 23
a32 6
 * COPYRIGHT (C)1993, WADSWORTH CENTER FOR LABORATORIES AND
 * RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      
 * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     
 * LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  
 * USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF 
 * THE CENTER FOR LABORATORIES AND RESEARCH 			  
@


1.6
log
@fixed dilate
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/filtere.c,v 1.5 94/09/27 16:51:52 leith Exp Locker: leith $*/
d61 1
a61 1
    icon3 = iy * nrowt;
@


1.5
log
@changed 
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/filtere.c,v 1.4 94/03/01 15:20:35 leith Exp Locker: leith $*/
d101 1
a101 1
          else if (!erode && (hit <= coeff))
d103 3
a105 3
             newimage[icon4] = fmino;
             *fmaxt          = MYMAX(*fmaxt,fmino);
             *fmint          = MYMIN(*fmint,fmino);
@


1.4
log
@ifndef VMS for float.h
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/filtere.c,v 1.3 94/02/16 12:49:59 leith Exp Locker: leith $*/
d47 1
d51 2
d70 3
a72 3
          newimage[icon4] = 0.0;
          *fmaxt          = MYMAX(*fmaxt,0.0);
          *fmint          = MYMIN(*fmint,0.0);
d75 1
a75 1
       else if (!erode && (oldval > threshold))
d95 1
a95 2
          if ((erode  && (hit >= coeff)) ||
              (!erode && (hit >= coeff)))
d101 6
d109 3
a111 3
             newimage[icon4] = 0.0;
             *fmaxt          = MYMAX(*fmaxt,0.0);
             *fmint          = MYMIN(*fmint,0.0);
d113 1
d125 2
a126 2
     *(newimage + ip) = *fmint;
     *(endimage - ip) = *fmint;
d134 2
a135 2
        *(newimage + ip) = *fmint; 
        *(endimage - ip) = *fmint;
@


1.3
log
@added float.h
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/filtere.c,v 1.2 94/02/14 12:44:51 leith Exp Locker: leith $*/
d32 1
d34 1
@


1.2
log
@replaced MIN,MAX with MYMIN,MYMAX
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/filtere.c,v 1.1 93/12/20 11:57:32 leith Exp Locker: leith $*/
d32 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/filter.c,v 1.1 93/12/09 10:58:22 leith Exp $*/
d65 2
a66 2
          *fmaxt          = MAX(*fmaxt,0.0);
          *fmint          = MIN(*fmint,0.0);
d72 2
a73 2
          *fmaxt          = MAX(*fmaxt,oldval);
          *fmint          = MIN(*fmint,oldval);
d93 2
a94 2
             *fmaxt          = MAX(*fmaxt,oldval);
             *fmint          = MIN(*fmint,oldval);
d99 2
a100 2
             *fmaxt          = MAX(*fmaxt,0.0);
             *fmint          = MIN(*fmint,0.0);
@
