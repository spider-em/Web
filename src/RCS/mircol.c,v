head	1.5;
access;
symbols
	pre-tilt-improve:1.5
	pre_surf_fromtop:1.5
	pre_neednewmap:1.5
	pre_apppluss_remove:1.5
	pre_tiltpair_chng:1.5
	pre_GPL:1.5;
locks;
comment	@ * @;


1.5
date	95.08.21.15.51.59;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	93.11.22.16.38.27;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	93.11.22.13.13.02;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	93.11.19.14.40.19;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.16.14.13.38;	author leith;	state Exp;
branches;
next	;


desc
@@


1.5
log
@correct wurz argument
@
text
@/*$Header: /net/ithaca/usr1/web/src/RCS/mircol.c,v 1.4 1993/11/22 16:38:27 leith Exp mladjadj $*/
/*************************************************************************
*									 *
* Transfered from mircol.for by Jing Su 8/30/93	
*
* WARNING: THIS is not suitable for general matrix inversion due to
*          assignment of array dimension 4x5 in parameters!!!!!!!!!!!
*									 *
*************************************************************************/

#include "std.h"

/*** willsq.c: if ((ier = mircol(4,1,5,sqa,eps,r)) != NULL ) call!! */

/******************************** mircol ******************************/

int mircol(int n, int m, int mm, float a[4][5], float eps, float x[])
{
int   i,ii,iii,j,jjj,k,kkk;
int   wurz[6];
float epsq,s;

epsq = eps * eps;

for (i = 1; i <= n; i++)
    {
    wurz[i-1] = TRUE;
    s = a[i-1][i-1];
    if (i != 1)
       {
       iii = i -1;
       for (j = 1; j <= iii; j++)
           {
           if (!wurz[j-1])
	      s = s + a[j-1][i-1] * a[j-1][i-1];
	   else
	      s = s - a[j-1][i-1] * a[j-1][i-1];
           }
       }
     if (s <= 0)
        {
        s = -s;
	wurz[i-1] = FALSE;
        }
     if (s < epsq)
     	return -1;
     
     a[i-1][i-1] = sqrt(s);
     iii         = i+1;

     for (k = iii; k <= mm; k++)
         { 
	 s   = a[i-1][k-1];
	 jjj = i-1;

	 if (jjj >= 1)
	       {
	       for (j = 1; j <= jjj; j++)
	           {
		   if (!wurz[j-1])
		      s = (s + a[j-1][i-1] * a[j-1][k-1]);
		   else
		      s = (s - a[j-1][i-1] * a[j-1][k-1]);
	           }
	       }

	 if (!wurz[i-1])
	    s = -s;

	 a[i-1][k-1] = s / a[i-1][i-1];
         } 
    }

for (k = 1; k <= m; k++)
    { 
    for ( ii = 1; ii <= n; ii++)
        {
	i   = n - ii + 1;
	s   = a[i-1][n+k-1];
	kkk = i+1;
	if ( kkk <= n)
	   {
	   for (j = kkk; j <= n; j++)
		s = s - x[j-1] * a[i-1][j-1];   
	   }
	x[i-1] = s / a[i-1][i-1];
        } 
    }
return 0;
}
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/mircol.c,v 1.3 93/11/22 13:13:02 leith Exp Locker: leith $*/
d43 1
a43 1
	wurz[i] = FALSE;
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/mircol.c,v 1.2 93/11/19 14:40:19 leith Exp Locker: leith $*/
d5 3
a14 1

d17 1
a17 1
int mircol(int n, int m, int mm, float a[4][5], float eps, float x[5])
@


1.2
log
@    tiltang.c
    willsq.c
    witran.c
,
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/mircol.c,v 1.1 93/11/16 14:13:38 leith Exp Locker: leith $*/
d4 1
a4 1
*	Transfered from mircol.c by Jing Su 8/30/93			 *
a9 2
/******************************** mircol ********************************/

d12 3
a19 1
float * ai;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*$Header$*/
d12 3
a14 1
int mircol(int n, int m, int mm, float a[4][5], float eps, float x[4])
d18 1
a18 1
float eps1,s;
d21 3
a23 1
for (i = 0; i < n; i++)
d25 3
a27 3
    wurz[i] = TRUE;
    s = a[i][i];
    if (i != 0)
d29 2
a30 3
/**       iii = i - 1; **/
	  iii = i;
       for (j = 0; j < iii; j++)
d32 2
a33 2
           if (!wurz[j])
	      s = s + a[j][i] * a[j][i];
d35 1
a35 1
	      s = s - a[j][i] * a[j][i];
d43 1
a43 1
     if (s < eps1)
d46 4
a49 3
     a[i][i] = sqrt(s);
     iii = i+1;
     for (k = iii; k < mm; k++)
d51 1
a51 1
	 s = a[i][k];
d53 2
a54 1
	 if (jjj >= 0)
d56 1
a56 1
	       for (j = 0; j < jjj; j++)
d58 2
a59 2
		   if (!wurz[j])
		      s = (s + a[j][i] * a[j][k]);
d61 1
a61 1
		      s = (s - a[j][i] * a[j][k]);
d64 2
a65 1
	 if (!wurz[i])
d67 2
a68 1
	 a[i][k] = s / a[i][i];
d71 3
a73 3
/**
for (k = 0; k < m; k++)
    { **/
d76 2
a77 2
	i = n - ii;
	s = a[i][n];
d79 1
a79 1
	if ( kkk < n)
d81 2
a82 2
	   for (j = kkk; j < n; j++)
		s = s - x[j] * a[i][j];   
d84 2
a85 2
	x[i] = s /a[i][i];
/**        } **/
@
