head	1.7;
access;
symbols
	pre-bollinger:1.6
	pre-tilt-improve:1.6
	pre_surf_fromtop:1.6
	pre_neednewmap:1.6
	pre_apppluss_remove:1.6
	pre_tiltpair_chng:1.6
	pre_GPL:1.5;
locks;
comment	@ * @;


1.7
date	2018.12.07.17.03.30;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.18.17.00.04;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.17.16.42.31;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	96.04.01.17.23.19;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	94.09.12.15.35.30;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.02.14.12.45.28;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.30.08.53.13;	author leith;	state Exp;
branches;
next	;


desc
@@


1.7
log
@bollingers_email_and_cosmetic
@
text
@
/*$Header: /usr8/web/src/RCS/annote.c,v 1.6 2005/10/18 17:00:04 leith Exp $*/

/***********************************************************************
 * annote.c
 *
 * Ported WID_ANNOTE.FOR (VAX) to Unix.
 *
 ***********************************************************************
 * author : Mahieddine Ladjadj
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
 ***********************************************************************
 *
 * annote(* filnam)
 * 
 * PURPOSE:    places labels from a doc file on top of an image display.
 *
 * RETURNS:    true or false.
 *
 * PARAMETERS: filnam      filename of doc file         :input
 *
 ***********************************************************************
*/

#include "common.h"
#include "routines.h"
#include "annote.h"


/* external common variables */
  

/***********************  annote *************************************/

int annote(char *filnam)
{
  register int k;
  int      icall, first, firstl, ix, iy, nlist, maxkey, pkey, maxreg;
  int      numcor, numtot, nchar, hikey;
  float    *dbuf, plist[8], x, y;
  int      labno;
  float    *ptr;
  float    scale;   /* dgm adds scale and the following lines */
  char outstr[81];
  
  if ( iskip < 1 ) {
     scale = -iskip ;
   } else if ( iskip > 1 ) {
     scale = 1. / (float) iskip;
   } else {
     scale = 1;
   }


  /*    recover all of doc file contents and store in dbuf.
  **    key "ikey" is stored in dbuf[ikey][] row.
  **    dbuf[ikey][0] = number of registers for that key
  **    following columns are registers values for each reg.
  */

  icall  = TRUE;
  nlist  = MYMAX (MYMAX(ix_reg, iy_reg), lab_reg);
  maxkey = MYMAX (tkey1,tkey2);             
  maxreg = MYMAX (MYMAX(ix_reg, iy_reg), lab_reg) + 1;
  
  /* plist not needed here, assigned plist[1] */
  pkey = 0;
  if (unsdal(filnam,&icall,pkey,plist,nlist,&dbuf,&hikey,maxkey,maxreg) > 0) 
       return FALSE;

  first  = TRUE;
  firstl = FALSE;
  numcor = numtot = 0;

  ptr    = dbuf;
  
  for (k = tkey1; k <= hikey; k++)
      {
      if      (*ptr < ix_reg)
          {
          /* no register for ix*/
          sprintf(outstr,"*** Key: %d lacks X reg:%d", k,ix_reg);
          spout(outstr);
          }

      else if (*ptr < iy_reg)
          {
          /* no register for iy */
          sprintf(outstr,"*** Key: %d lacks Y reg:%d", k,iy_reg);
          spout(outstr);
          }
      else if (*ptr < lab_reg)
          {
          /* no register for label */
          sprintf(outstr,"*** Key: %d lacks label reg: %d", k,lab_reg);
          spout(outstr);
          }
      else
          {
          x = *(ptr + ix_reg);
          y = *(ptr + iy_reg);

          /*  is location within an image */
          if (x > 0 && x <= nsam  &&  y > 0 && y <= nrow)
              {
              /* find screen position (dgm adds scale factor) */
              ix = ixul + x * scale - 1;
              iy = iyul + y * scale - 1;

              /* draw a permanent circle at this position */
              xorc(iwin,    icontx, TRUE, ix, iy, iarad);
              xorc(imagsav, icontx, TRUE, ix, iy, iarad);

              /* find label number */
              if (lab_reg > 0)
                 labno = *(ptr+lab_reg);
              else
                 labno = k;

              nchar = numdig(labno, 1);
              if (nchar <= 4) 
                 {
                 /* write marker at this position */
                 sprintf(outstr,"%d",labno);
                 witext(icontx,outstr,ix,iy,0,0,-9,2,FALSE);
                 }
              else if (firstl)
                 {
                 /* write a warning one time */
                 spout("*** Label number > 4 digits");
                 firstl = FALSE;
	         }
              numcor++;
              }
          else if (first)
              {
              /* write a warning one time */
              spout("*** Labels(s) outside of image!");
              first =  FALSE;
              }
          numtot++;
          }     /* else ends */
      ptr  += maxreg; 

      }  /* end of for loop */

  sprintf(outstr,"Labels: %d  -- Labels within image extent: %d",
                   numtot,numcor);
  spout(outstr);
  return TRUE;
}
@


1.6
log
@GPL
@
text
@d2 1
a2 1
/*$Header: /net/bali/usr1/web/src/RCS/annote.c,v 1.5 2004/05/17 16:42:31 leith Exp $*/
d7 1
a7 1
 * ported WID_ANNOTE.FOR (VAX) to unix.
a12 4
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
d45 1
a48 2
  extern  int ix_reg, iy_reg, lab_reg, tkey1, tkey2, iarad;
  extern  char outstr[80];
a49 1
  extern int iskip;    /* dgm addition so non-1:1 images anontate properly*/
a60 1
  
d62 1
@


1.5
log
@s size reduced/increased for display bix from: David Gene Morgan
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/annote.c,v 1.4 1996/04/01 17:23:19 leith Exp $*/
d11 23
a33 6
 * COPYRIGHT (C)1992, WADSWORTH CENTER FOR LABORATORIES AND
 * RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      
 * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     
 * LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  
 * USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF 
 * THE CENTER FOR LABORATORIES AND RESEARCH 			  
@


1.4
log
@plist dimension too small!!
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/annote.c,v 1.3 1994/09/12 15:35:30 leith Exp leith $*/
d37 2
d50 10
d61 1
d83 1
a83 1

d113 3
a115 3
              /* find screen position */
              ix = ixul + x - 1;
              iy = iyul + y - 1;
@


1.3
log
@bad return after unsdal
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/annote.c,v 1.2 94/02/14 12:45:28 leith Exp Locker: leith $*/
d31 1
a32 9
/* external function prototypes */
  extern void     spout       (char *);
  extern int      unsdal      (char *, int *, int, float *,
                                int, float **, int *,
                                int, int);
  extern void     witext      (GC, char *, int, int,int, int,
                                int, int, int);
  extern void     xorc        (Window, GC, int, int, int, int);
  extern int      numdig      (int, int);
d36 2
a37 1
 
a42 1
  char     outstr[80];
d45 1
a45 1
  float    *dbuf, plist[1], x, y;
@


1.2
log
@replaced MIN,MAX with MYMIN,MYMAX
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/annote.c,v 1.1 93/11/30 08:53:13 leith Exp Locker: leith $*/
d71 1
a71 1
       return;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*$Header$*/
d64 3
a66 3
  nlist  = MAX (MAX(ix_reg, iy_reg), lab_reg);
  maxkey = MAX (tkey1,tkey2);             
  maxreg = MAX (MAX(ix_reg, iy_reg), lab_reg) + 1;
@
