head	1.12;
access;
symbols
	pre-tilt-improve:1.12
	pre_surf_fromtop:1.9
	pre_neednewmap:1.9
	pre_apppluss_remove:1.9
	pre_tiltpair_chng:1.9
	pre_GPL:1.8;
locks;
comment	@ * @;


1.12
date	2015.06.16.16.25.58;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2015.06.16.15.35.43;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2012.04.17.18.27.02;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.18.16.59.41;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.28.19.26.09;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.08.13.51.00;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.10.04.14.41.03;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.09.29.17.31.53;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.02.18.13.20.24;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	98.02.09.19.53.05;	author liy;	state Exp;
branches;
next	1.2;

1.2
date	98.02.05.22.18.29;	author liy;	state Exp;
branches;
next	1.1;

1.1
date	98.02.05.21.00.17;	author liy;	state Exp;
branches;
next	;


desc
@Create for stack files.
@


1.12
log
@removed the menu non-removal
@
text
@/*
 C++*********************************************************************
 C
 C STACKMEN -- CREATED                            Jan 1998 Yanhong Li
 C             Keep up menu widgets               Jun 2015 ArDean Leith                                                                    
 C
 C **********************************************************************
 C *  AUTHOR:  ArDean Leith                                             *
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2015  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
 C **********************************************************************
 C
 C STACKMEN
 C
 C PURPOSE:   DISPLAY MENU FOR STACK FILES
 C
 C VARIABLES:       
 C
 C CALLED BY:       
 C
 C***********************************************************************
*/

#include <Xm/Scale.h>
#include <Xm/Text.h>
#include <Xm/ToggleBG.h>

#include "common.h"
#include "routines.h"

/* Internal function prototypes */
 void          stackmen_buta(Widget, XtPointer, XtPointer);
 void          stackmen_butc(Widget, XtPointer, XtPointer);
 void          stackmen_toga(Widget, XtPointer, XtPointer);
 void          stackmen_togb(Widget, XtPointer, XtPointer);
 void          stackmen_togc(Widget, XtPointer, XtPointer);

 /* File variables */
 static Widget   iw_all, iw_single, iw_section;
 static Widget   iw_rowcol1, iw_rowcol2;
 static Widget   iw_single1, iw_stkgo, iw_stkend;
 static Widget   iw_stackmen = (Widget)0, iw_pushc, iw_pusha;

 /* Externally used variables */
 int             stkgo;            /* Used in stack display */
 int             stkend;           /* Used in stack display */
 static int      all=TRUE, single=FALSE, section=FALSE;    

 extern int      montaverage;      /* Want montage average */

 /************************************************************/

 void stackmen(FILEDATA* filedata)

 { 
 Widget iw_rowcol;
 Widget iw_dums;
 char   cval[6],cval1[6];

 if (iw_stackmen == (Widget)0)
    {   /* Create a menu widget first */
    stkgo  = 1;
    stkend = filedata->maxim;

    iw_stackmen = wid_dialog(iw_win, 0, "stack display options", -1, -1);
    iw_rowcol   = wid_rowcol(iw_stackmen, 'v', -1, -1);

    /* Create a toggle box for image selection ------------------ all */
    iw_all = wid_toggleg(iw_rowcol,iw_all,"Display All Images",
	    all,stackmen_toga, NULL, -1,-1);

    /* Create a toggle box for image selection --------------- single */
    iw_single = wid_toggleg(iw_rowcol,iw_single,
	    "Display Single Image",single,stackmen_togb,NULL, -1,-1);

    /* Create text box for single image number  */
    iw_rowcol1   = wid_rowcol(iw_rowcol, 'h', -1, -1);

    sprintf(cval,"%6d",stkgo);
    iw_single1 = wid_textboxb(iw_rowcol1, iw_single1, 
                        "     Image Number: ", cval,6);
    if (!single) 
        {XtUnmanageChild(iw_rowcol1); }

    /* Create a toggle box for image selection -------------- subset */
    iw_section = wid_toggleg(iw_rowcol,iw_section,
	    "Display Subset From Stack",section,
		stackmen_togc, NULL,-1,-1);

    /* Create text boxes for stkgo & stkend  */
    iw_rowcol2   = wid_rowcol(iw_rowcol, 'h', -1, -1);

    sprintf(cval, "%6d",stkgo);
    iw_stkgo  = wid_textboxb(iw_rowcol2,0,"Start",cval,6);
    sprintf(cval,"%6d",stkend);
    iw_stkend = wid_textboxb(iw_rowcol2,0,"End ", cval,6);

    if (!section) 
        { XtUnmanageChild(iw_rowcol2); }

    /* Create box for apply ----------------------------------- apply */
    wid_stdbut(iw_rowcol, iw_stackmen, &iw_dums, &iw_pushc, 
                        &iw_pusha,  "CA",
                        fin_cb, stackmen_butc ,stackmen_buta, NULL);
    }

 else
    {   /* Stack menu widget already exists, update it */
    /* update text boxes for stkgo & stkend ----------------- section */

    if (!samefile || (!single && !section))
       {
       stkgo  = 1;
       stkend = filedata->maxim;
       }

    if (single)
       {
       sprintf(cval,"%6d",stkgo);
       iw_single1 = wid_textboxb(iw_rowcol,iw_single1,
                                 "Image Number:",cval,6);
       }
    else if (section)
       {
       sprintf(cval, "%6d",stkgo);
       iw_stkgo  = wid_textboxb(iw_rowcol2,iw_stkgo,"Start",cval,6);

       sprintf(cval,"%6d",stkend);
       iw_stkend = wid_textboxb(iw_rowcol2,iw_stkend,"End ", cval,6);
       }
    }
 XtManageChild(iw_stackmen);
 }


 /***********  stackmen_toga  (toga  button callback) ********/

 void stackmen_toga(Widget iw_temp, XtPointer data, XtPointer call_data)
     {
     XmToggleButtonGadgetSetState(iw_all,    TRUE,   FALSE);
     XmToggleButtonGadgetSetState(iw_single, FALSE,  FALSE);
     XmToggleButtonGadgetSetState(iw_section, FALSE, FALSE);

     XtUnmanageChild(iw_rowcol1);
     XtUnmanageChild(iw_rowcol2);
     }

 /***********  stackmen_togb  (togb  button callback) ********/

 void stackmen_togb(Widget iw_temp, XtPointer data, XtPointer call_data)
     {
     XmToggleButtonGadgetSetState(iw_all,     FALSE,  FALSE);
     XmToggleButtonGadgetSetState(iw_single,  TRUE,   FALSE);
     XmToggleButtonGadgetSetState(iw_section, FALSE,  FALSE);

     XtManageChild(iw_rowcol1);
     XtUnmanageChild(iw_rowcol2);
     }

 /***********  stackmen_togc  (togc  button callback) ********/

 void stackmen_togc(Widget iw_temp, XtPointer data, XtPointer call_data)
     {
     XmToggleButtonGadgetSetState(iw_all, FALSE,  FALSE);
     XmToggleButtonGadgetSetState(iw_single, FALSE,  FALSE);
     XmToggleButtonGadgetSetState(iw_section, TRUE,  FALSE);

     XtUnmanageChild(iw_rowcol1);
     XtManageChild(iw_rowcol2);
     }

 /***********  stackmen_buta  (accept button callback) ********/

 void stackmen_buta(Widget iw_temp, XtPointer data, XtPointer call_data)
 {
 char *string = NULL;
 int  vval;

 /* Get the state of toggle */
 all     = XmToggleButtonGadgetGetState(iw_all);
 single  = XmToggleButtonGadgetGetState(iw_single);
 section = XmToggleButtonGadgetGetState(iw_section);

 /* No question for this in this menu, so default it to FALSE */
 montaverage = FALSE;

 /* Get the num for stkgo and stkend */
 if (single)
    {
    string = XmTextGetString(iw_single1);
     
    /* Find file numbers wanted */
    if (sscanf(string,"%d",&vval) <= 0 || vval < 0)
       {   /* Can not interpret the image number */
       spout("*** Can not parse image number! ");
       if (string) XtFree (string); return;
       }
    stkgo  = vval;
    stkend = vval;
    }
 else if (section) 
    {
    /* Get stkgo */
    string = XmTextGetString(iw_stkgo);

    if (sscanf(string,"%d",&vval) <= 0 || vval < 0)
        {   /* Can not interpret vval */
        spout("*** Can not parse starting image number! ");
        if (string) XtFree (string); return;
        }
    else 
	stkgo = vval;

    /* Get stkend */
    string = XmTextGetString(iw_stkend);
    if (sscanf(string,"%d",&vval) <= 0 || vval < 0)
       {   /* Can not interpret vval */
       spout("*** Can not parse ending image number ending! ");
       if (string) XtFree (string); return;
       }
    else 
       stkend = vval;

    if (string) XtFree (string);
    }

 /*  Remove the stack menu */
 XtUnmanageChild(iw_stackmen); 
 expos_cb(NULL,NULL,NULL);

 /*  Display the montage, imagego set in imagemen */
 stackdis(imagego,imageend);
 }

 /***********  stackmen_butc  (Cancel button callback) ********/

 void stackmen_butc(Widget iw_temp, XtPointer data, XtPointer call_data)
    {
    XtUnmanageChild(iw_stackmen);
    closefile(filedata);
    filedata = NULL;
    }

@


1.11
log
@Keep up menu widget
@
text
@d249 1
a249 1
 //XtUnmanageChild(iw_stackmen);  removed Jun 2015 al
@


1.10
log
@cosmetic
@
text
@d2 7
a8 6
C++*********************************************************************
C
C STACKMEN -- CREATED Jan 1998 Yanhong Li
C
C **********************************************************************
C *  AUTHOR:  ArDean Leith                                             *
d10 1
a10 1
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
d32 11
a42 11
C **********************************************************************
C
C STACKMEN
C
C PURPOSE:   DISPLAY MENU FOR STACK FILES
C
C VARIABLES:       
C
C CALLED BY:       
C
C***********************************************************************
d249 1
a249 1
 XtUnmanageChild(iw_stackmen);
@


1.9
log
@GPL
@
text
@d2 1
a2 1
C++************************************************************************
d7 1
a7 1
C *  AUTHOR:  ArDean Leith                                                 *
d35 1
a35 1
C PURPOSE:         DISPLAY MENU FOR STACK FILES
a37 2
C                  
C                  
d41 1
a41 1
C**************************************************************************
d51 1
a51 1
/* internal function prototypes */
d58 1
a58 1
 /* file variables */
d64 3
a66 3
 /* externally used variables */
 int             stkgo;           /* used in stack display */
 int             stkend;           /* used in stack display */
d69 1
a69 1
 extern int      montaverage;      /* want montage average */
d81 1
a81 1
    {   /* create a menu widget first */
d88 1
a88 1
    /* create a toggle box for image selection ------------------ all */
d92 1
a92 1
    /* create a toggle box for image selection --------------- single */
d96 1
a96 1
    /* create text box for single image number  */
d105 1
a105 1
    /* create a toggle box for image selection -------------- subset */
d110 1
a110 1
    /* create text boxes for stkgo & stkend  */
d121 1
a121 1
    /* create box for apply ----------------------------------- apply */
d128 1
a128 1
    {   /* stack menu widget already exists, update it */
d199 1
a199 1
 /* get the state of toggle */
d204 1
a204 1
 /* no question for this in this menu, so default it to FALSE */
d207 1
a207 1
 /* get the num for stkgo and stkend */
d212 1
a212 1
    /* find file numbers wanted */
d214 1
a214 1
       {   /* can not interpret the image number */
d223 1
a223 1
    /* get stkgo */
d227 1
a227 1
        {   /* can not interpret vval */
d234 1
a234 1
    /* get stkend */
d237 1
a237 1
       {   /* can not interpret vval */
d247 1
a247 1
 /* remove the stack menu */
d251 1
a251 1
 /* display the montage, imagego set in imagemen */
d255 1
a255 1
 /***********  stackmen_butc  (cancel button callback) ********/
@


1.8
log
@widgets removed if not active
@
text
@d6 1
a6 1
C **************************************************************************
d8 24
a31 7
C *  COPYRIGHT (C)1991, WADSWORTH CENTER FOR LABORATORIES AND              *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH			           *
C **************************************************************************
@


1.7
log
@stack support improved
@
text
@d18 1
a18 1
C PURPOSE:         DISPLAY THE MENU FOR STACK FILES
d37 2
a38 2
 void          stackmen_buta(Widget iw_temp, XtPointer, XtPointer);
 void          stackmen_butc(Widget iw_temp, XtPointer, XtPointer);
d83 1
d97 1
d115 7
d132 1
a135 5
    else
       {
       stkgo  = 1;
       stkend = filedata->maxim;
       }
d145 1
a145 1
     XmToggleButtonGadgetSetState(iw_all, TRUE,  FALSE);
d147 2
d150 1
a150 2
     XmToggleButtonGadgetSetState(iw_section, FALSE,  FALSE);
     XtUnmanageChild(iw_stkgo);
d156 5
a160 3
    {
     XmToggleButtonGadgetSetState(iw_all, FALSE,  FALSE);
     XmToggleButtonGadgetSetState(iw_single, TRUE,  FALSE);
a161 1
     XmToggleButtonGadgetSetState(iw_section, FALSE,  FALSE);
d163 1
a163 1
    }
d168 1
a168 1
    {
d171 2
a173 1
     XmToggleButtonGadgetSetState(iw_section, TRUE,  FALSE);
d175 1
a175 1
    }
d203 1
a203 1
    stkgo = vval;
d210 1
@


1.6
log
@stack support
@
text
@d54 2
d181 3
a233 1

@


1.5
log
@improved
@
text
@d56 1
a56 1
 void stackmen(void)
d66 1
a66 1
    stkend = maxim;
d124 5
d180 1
a180 6
 if (all)
    {
    stkgo = 1;
    stkend = maxim;
    }
 else if (single)
d197 1
a197 5
    if (!strcmp(string,  "*"))
        {
	stkgo = 1;
        }
    else if (sscanf(string,"%d",&vval) <= 0 || vval < 0)
d199 1
a199 1
        spout("*** Can not parse start image number! ");
d207 1
a207 4
    if (!strcmp(string,  "*"))
        { stkend = maxim;  }

    else if (sscanf(string,"%d",&vval) <= 0 || vval < 0)
d213 1
a213 1
	stkend = vval;
a216 4
 else
     {
     spout("*** Can not interpret the operation! ");   return;  
     }
@


1.4
log
@spelling
@
text
@a52 1
 static int	 keepstknum = FALSE;       
d61 1
a61 1
 char   cval[4];
d65 2
a66 1
    stkgo = stkend =1;
d71 2
a72 2
    /* create a toggle box for image selection ---------------------- all */
    iw_all = wid_toggleg(iw_rowcol,iw_all,"DISPLAY ALL THE IMAGES",
d75 1
a75 1
    /* create a toggle box for image selection ---------------------- single */
d77 1
a77 1
	    "DISPLAY ONE IMAGE IN STACK",single,stackmen_togb,NULL, -1,-1);
d79 1
a79 1
    /* create text box for single image number --------------- single */
d81 5
a85 13
    if (keepstknum) {
	sprintf(cval,"%4d",stkgo);
	iw_single1 = wid_textboxb(iw_rowcol1, iw_single1, "INPUT THE IMAGE # :", 	
                            cval,4);
    }
    else {
	iw_single1 = wid_textboxb(iw_rowcol1, iw_single1, "INPUT THE IMAGE # :", 
                            "*",4);
    }
    
    if (!single) {
	XtUnmanageChild(iw_rowcol1);
    }
d87 1
a87 1
    /* create a toggle box for image selection ---------------- section */
d89 1
a89 1
	    "DISPLAY STACKED IMAGES",section,
d92 1
a92 1
    /* create text boxes for stkgo &stkend -------------------- section*/
d94 7
a100 18
    if (keepstknum) 
       { /* do not want to reset stkgo & stkend */
       sprintf(cval,"%4d",stkgo);
       iw_stkgo = wid_textboxb(iw_rowcol2,0,"Start",cval,4);
       sprintf(cval,"%4d",stkend);
       iw_stkend = wid_textboxb(iw_rowcol2,0,"End ",cval,4);
       }
    else
       {
       iw_stkgo = wid_textboxb(iw_rowcol2,0,"Start","*",4);
       iw_stkend = wid_textboxb(iw_rowcol2,0,"End ","*",4);
       keepstknum = TRUE;
       }
    if (!section) {
/*	XtUnmanageChild(iw_stkgo);
	XtUnmanageChild(iw_stkend);
*/	XtUnmanageChild(iw_rowcol2);
    }
a105 1
    keepstknum = TRUE;
d110 6
a115 4
    /* update text boxes for stkgo & stkend -------------------- section */
    if (single) {
       sprintf(cval,"%4d",stkgo);
       iw_single1 = wid_textboxb(iw_rowcol,iw_single1,"INPUT THE IMAGE #:",cval,4);
d117 7
a123 16
    else if (section) {
	if (keepstknum) 
	   { /* do not want to reset stkgo & stkend */
	   sprintf(cval,"%4d",stkgo);
	   iw_stkgo = wid_textboxb(iw_rowcol,iw_stkgo,"START",cval,4);
	   sprintf(cval,"%4d",stkend);
	   iw_stkend = wid_textboxb(iw_rowcol,iw_stkend,"END ",cval,4);
	   }
	else
	   {
	   sprintf(cval,"%4d",1);
	   iw_stkgo = wid_textboxb(iw_rowcol,iw_stkgo,"START",cval,4);
	   sprintf(cval,"%4d",maxim);
	   iw_stkend = wid_textboxb(iw_rowcol,iw_stkend,"END ",cval,4);
	   }
        }
d129 1
a130 2
 /***********  stackmen_toga  (tog  button callback) ********/

d132 7
a138 10
 {
  XmToggleButtonGadgetSetState(iw_all, TRUE,  FALSE);
  XmToggleButtonGadgetSetState(iw_single, FALSE,  FALSE);
/*  XtUnmanageChild(iw_single1);*/
  XtUnmanageChild(iw_rowcol1);
  XmToggleButtonGadgetSetState(iw_section, FALSE,  FALSE);
/*  XtUnmanageChild(iw_stkgo);
  XtUnmanageChild(iw_stkgo);
*/  XtUnmanageChild(iw_rowcol2);
 }
d140 1
a140 1
 /***********  stackmen_togb  (tog  button callback) ********/
d143 7
a149 7
 {
  XmToggleButtonGadgetSetState(iw_all, FALSE,  FALSE);
  XmToggleButtonGadgetSetState(iw_single, TRUE,  FALSE);
  XtManageChild(iw_rowcol1);
  XmToggleButtonGadgetSetState(iw_section, FALSE,  FALSE);
  XtUnmanageChild(iw_rowcol2);
 }
d151 1
a151 1
 /***********  stackmen_togc  (tog  button callback) ********/
d154 7
a160 7
 {
  XmToggleButtonGadgetSetState(iw_all, FALSE,  FALSE);
  XmToggleButtonGadgetSetState(iw_single, FALSE,  FALSE);
  XtUnmanageChild(iw_rowcol1);
  XmToggleButtonGadgetSetState(iw_section, TRUE,  FALSE);
  XtManageChild(iw_rowcol2);
 }
d170 2
a171 2
 all = XmToggleButtonGadgetGetState(iw_all);
 single = XmToggleButtonGadgetGetState(iw_single);
d175 2
a176 1
 if (all) {
d180 2
a181 1
 else if (single) {
d187 1
a187 1
       spout("*** Can not interpret number of the image in stack! ");
d193 2
a194 1
 else if (section) {
d197 2
a198 1
    if (!strcmp(string,  "*")) {
d200 1
a200 1
    }
d202 4
a205 4
       {   /* can not interpret vval */
       spout("*** Can not interpret number of the start image in stack! ");
       if (string) XtFree (string); return;
       }
d211 3
a213 3
    if (!strcmp(string,  "*")) {
	stkend = maxim;
    }
d216 1
a216 1
       spout("*** Can not interpret number of the ending image in stack! ");
d223 5
a227 4
 }
 else {
       spout("*** Can not interpret the operation! ");   return;  
 }
d229 1
a229 1
 /* remove the montage menu */
d241 5
a245 5
 {
 XtUnmanageChild(iw_stackmen);
 closefile(filedata);
 filedata = NULL;
 }
@


1.3
log
@made stack menu to take * and ending #
@
text
@d95 1
a95 1
    /* create a toggle box for image selection ---------------------- section */
d97 1
a97 1
	    "DISPLAY A SET IAMGES IN STACK",section,
@


1.2
log
@corrected the errors in file saving.
@
text
@d225 4
a228 1
    if (sscanf(string,"%d",&vval) <= 0 || vval < 0)
d233 2
a234 1
    stkgo = vval;
d238 4
a241 1
    if (sscanf(string,"%d",&vval) <= 0 || vval < 0)
d246 2
a247 1
    stkend = vval;
a262 1

a271 3



@


1.1
log
@Initial revision
@
text
@d254 15
a268 1
                                                                                                                                                                                                                            @
