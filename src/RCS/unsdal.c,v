head	1.13;
access;
symbols
	pre-tilt-improve:1.13
	pre_surf_fromtop:1.13
	pre_neednewmap:1.13
	pre_apppluss_remove:1.13
	pre_tiltpair_chng:1.13
	pre_GPL:1.11;
locks;
comment	@ * @;


1.13
date	2007.11.21.15.07.03;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.18.16.59.47;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.03.15.20.20;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.23.19.22.17;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.04.23.17.54.40;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	96.03.21.19.52.43;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	94.05.05.15.53.12;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	94.03.18.10.42.44;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	94.03.17.11.30.09;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	94.02.14.12.45.22;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	93.11.26.12.29.27;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	93.11.16.13.59.53;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.12.08.57.52;	author leith;	state Exp;
branches;
next	;


desc
@new routine
@


1.13
log
@Increased relin length[D[D[D[D
@
text
@/*$Header: /net/bali/usr1/web/src/RCS/unsdal.c,v 1.12 2005/10/18 16:59:47 leith Exp $*/
/*
*****************************************************************************
**    UNSDAL2.FOR (VAX) converted to C.
**    unsdal.c      7/1993 Mahieddine Ladjadj
**                  Removed continuation & increased regs   8/2000 al
**                  New doc. file format                 Feb. 2004 al
**                  Increased relin length               Nov. 2007 al
**
C **********************************************************************
** *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2007  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
C **********************************************************************
**
**
**    PURPOSE:  RECOVERS ARRAY OF REGISTERS FROM DOCUMENT FILES.  IF IKEY
**              IS <0 RECOVERS THE LINE OF REGISTERS FROM THE COMMENT
**              LINE HAVING THAT COMMENT KEY ONLY.  UP TO 2 DOC FILES
**
**
**    PARAMETERS:
**         DOCNAM        DOC. FILE NAME                       (SENT)
**         UNUSED        UNUSED                               (SENT&RET)
**         IKEY          KEY FOR LINE OF REGISTERS FOR PLIST  (SENT)
**         NLIST         NUMBER OF REGISTERS TO BE READ IN PLIST (SENT)
**         PLIST         ONE ROW OF DBUF POINTED TO BY IKEY   (RETURNED)
**         DBUF          BUFFER OF RETRIEVAL FROM DOC. FILE   (RETURNED)
**         DBUF[IKEY][0] NUMBER OF REGISTERS FOR KEY "IKEY"   (RETURNED)
**         KEY_TOT       NUMBER OF HIGHEST KEY FOUND IN FILE  (RETURNED)
**         MAXKEY        NUMBER OF ROWS IN DBUF               (SENT)
**         MAXREG        NUMBER OF COLUMNS IN DBUF            (SENT)
**
**    RETURNS:
**
**         LERR          ERROR FLAG (  0 is normal)           
**
**                       -47  blank or bad regular line
**                       -10  fewer registers than wanted for this key (incore)
**                       -9   fewer registers than wanted for this key (new read)
**                       -5   > registers than maxreg for >= one key
**                       -4   key > maxkey for >= one key

**                        1   memory allocation failed
**                        2   requested key > maxkey
**                        3   new doc file can not be opened
**                        4   error reading doc file line
**                        7   requested key not in docfile

**                       10   requested key > maxkey
**                       11   requested key not in docfile
**                       12   requested impossible key
**                       13   empty buffer for data
**                       49   error reading a register line

**
**    TYPICAL DOC FILE LINE:
**    COL: 123456789 123456789 123456789 123456789 123456789 1234565789
**           1 4   20.070000   17.379999   17.379999   17.379999
**         KEY #REGS/LINE    VALUES ........
**
**    WHEN RETRIEVED THIS LINE IS PLACED IN LINE 1 (KEY) OF DBUF AND
**    THE FIRST VALUE ON LINE ONE IS THE KEY: 1 AND THE SECOND VALUE
**    OF LINE ONE IN DBUF IS: 20.07
**
**    THE LINE OF DBUF CORRESPONDING TO IKEY IS RETURNED IN PLIST
**    IF IKEY IS NOT FOUND AN ERROR MESSAGE IS PRINTED BUT DBUF
**    IS RETURNED OK.
**
**   NOTE:
**
**   We want to allocate memory at run time for arrays.
**   The document file is read, and stored in a 1 D array.
**   the array DBUF is created as follow:.
**
**      dbuf is a 1 D array of floats
**      the size of registers will be the same for all keys: maxreg;
**      only (maxreg -1) entries will store values of registers.
**      the first entry in the row of registers will be the number of
**      registers that are used for that particular key.
**
**      example : maxreg = 6
**
**
**         key 1       key1+1                 Key1+3
**          |           |                       |
**      --------------------------------------------------------------
**         | | . . . . |N|1.2.3.-.-| | . . . . | |
**      ---------------------------------------------------------------
**                      |
**                      -- stores the number of registers used for (key1+1)
**                         N = 3 for this example.
**
**      SO COMPUTE ADDRESS OF EACH ENTRY BY USING POINTERS
**
**      for j reg in  key3 :    pt = dbuf + (key3 - 1) * maxreg + j;
**
**
*****************************************************************************
*/

#include "std.h"
#include "routines.h"

 /* external variables */
 extern char           datexc[4];         /* file extension  */

/***************************  unsdal    *******************************/

 int unsdal(char *docnam, int *unused, int ikey, float *plist,
             int nlist, float **buf, int *lastkeygot,
             int maxkeys, int maxreg)
 {
  register int i;
  char        outstr[109], docname[81], ptline[361];
  char      * reclin;
  FILE      * ptrdoc;
  float     * dbuf, *ptr, *lptr;
  int         nc, pkey, regsonline, 
              ilast, nkey, message, message1, message2, lerr;
  
  *lastkeygot = 0;
  message  = message1 = TRUE;   /* display warning only once     */
  message2 = TRUE;
  lerr     = 0;                 /* error in unsdal if lerr != 0  */

  /*  Add datexc (name extension ) to docnam if not already there  */
  strcpy(docname,docnam);
  if (strstr(docname,datexc) == 0)
      {
      if ((strlen(docname) + strlen(datexc) + 1) > (size_t) 80)
         { spout("*** Doc. file name too long:"); spout(docname); 
         return 3; }  
      strcat(strcat(docname,"."),datexc);
      }

  /* open the document file */
  if ((ptrdoc = fopen(docname,"r")) == NULL)
      { sprintf(outstr,"*** Unable to open docfile: %s",docname);
      spout(outstr); return 3; }
  
  /* print document file name */
  sprintf(outstr,"Reading docfile: %s",docname);
  spout(outstr);

  ptline[360] = '\0';
  reclin      = &ptline[0];

  /* run time allocation of memory space for buf */
  if ((dbuf= (float *) calloc(maxkeys * maxreg, sizeof(float)))
           == (float *) NULL)
     { spout("*** Memory allocation failed in unsdal"); return 1; }

  /* read next line (until end-of-line or 360 char) from doc file */
  while ((fgets(reclin,360,ptrdoc)) != (char *) NULL)
      {
      if (ferror(ptrdoc))
         {spout("*** Error reading docfile line:"); spout(reclin);
          fclose(ptrdoc); return 4;}

      if ((strstr(reclin,";")) != (char *) NULL)
         { /* skip this comment line */ ;  }

      else if (*(reclin + 1) == '-')
          { /* skip this continue line (aug 00 al) */ ;  }

      else    /******************* new line *************************/
          {
          /* normal keyed line */

          pkey = regsonline = 0;
          /* sscanf stops when it can not read but has no useful
          ** return warning. pkey & regsonline have to be read. */

          if (((sscanf(reclin,"%d %d %n", &pkey, &regsonline, &nc)) <= 0) 
               || pkey == 0 || regsonline == 0)
              {  /* empty line or end of previous line or bad line */
              if (reclin[0] != '\n' && nc > 1 && message1)
                  {
                  spout("*** Bad line in doc file"); spout(reclin);
                  lerr     = -47;  message1 = FALSE;
                  }
              }
          else if (pkey > maxkeys ) 
              {
              /* part of this line can not be stored in array */
              sprintf(outstr,
                "*** Doc file has key: %d > max keys: %d",pkey,maxkeys);
              spout(outstr); lerr = -4;       
              } 
           else                                   
              {                              
              if (regsonline > (maxreg - 1) )
                  { if (message2)
                     {
                     sprintf(outstr,
                        "*** Unused registers on one or more lines: %d",
                        regsonline-maxreg+1);
                     spout(outstr);  lerr = -5; message2 = FALSE;
                     }
                  }
    
              /* even though regsonline could be > maxreg, continue */
              ilast = MYMIN(regsonline, (maxreg - 1));

              /* lptr : pointer to 1st entry of "pkey" register list
              *lptr : number of registers read for key "pkey" */

              lptr = dbuf + (pkey - 1) * maxreg;
              ptr  = lptr;
              for (i = 1; i < ilast + 1; i ++)
                 {
                 /* read the register entries */
                 reclin += nc;
                 if ((sscanf(reclin,"%f %n", (++ptr), &nc)) <= 0) 
                    { 
                    spout("*** Error reading registers in doc file");
                    spout(reclin); fclose(ptrdoc); return 49;
                    }
                 }

              /* store number of registers for key "pkey" in dbuf[pkey][0] */
              *lptr = ilast;
               
              *lastkeygot = MYMAX(*lastkeygot, pkey);
              }
          }  /* end of new line */

          /* reset reclin pointer to the beginning of the (memory) line */
          reclin = &ptline[0];
      }  /* while (read next line of doc file) */


  /* close the doc file  and stored in dbuf  */
  fclose(ptrdoc);

  /* the doc file has been successfully read */
  *buf      = dbuf;
  if (ikey == 0) return lerr;

  /* the doc file has been read in dbuf, is desired key found?  */
  if (ikey > maxkeys)
      {
      sprintf(outstr,"*** Key: %d > maxkeys: %d",ikey, maxkeys);
      spout(outstr); return 2;
      }
    else if ( (nkey = (int) *(dbuf + (ikey-1) * maxreg)) <= 0) 
      {
      sprintf(outstr,"*** No registers found for key: %d",nkey);
      spout(outstr); return 7;
      }

  ilast = MYMIN(nkey, nlist);
  ptr   = dbuf + (ikey-1) * maxreg;
  for (i=0; i < ilast;  plist[i++] = *(++ptr));

  if ( ilast < nlist)  return -9;

  return lerr;
  }
@


1.12
log
@GPL
@
text
@d1 1
a1 1
/*$Header: /net/bali/usr1/web/src/RCS/unsdal.c,v 1.11 2004/02/03 15:20:20 leith Exp $*/
d8 1
d13 1
a13 1
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
d136 1
a136 1
  char        outstr[109], docname[81], ptline[181];
d167 1
a167 1
  ptline[180] = '\0';
d175 2
a176 2
  /* read next line (until end-of-line or 180 char) from doc file */
  while ((fgets(reclin,180,ptrdoc)) != (char *) NULL)
@


1.11
log
@new doc file format
@
text
@d1 1
a1 1
/*$Header: /net/bali/usr1/web/src/RCS/unsdal.c,v 1.10 2000/08/23 19:22:17 leith Exp leith $*/
d9 1
a9 1
** **************************************************************************
d11 24
a34 7
** *  COPYRIGHT (C)1981,1993, WADSWORTH CENTER FOR LABORATORIES AND         *
** *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
** *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
** *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
** *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
** *    THE CENTER FOR LABORATORIES AND RESEARCH 			    *
** **************************************************************************
@


1.10
log
@removed continue lines , increased to 9 registers
@
text
@d1 1
a1 1
/*$Header: /net/ithaca/usr1/web/src/RCS/unsdal.c,v 1.9 1996/04/23 17:54:40 leith Exp leith $*/
d4 4
a7 2
**    unsdal.c      by Mahieddine Ladjadj       7/93
**                  removed continuation & increased regs 8/00 al
a8 2
** UNSDAL2.FOR (VAX) converted to C.
**
d30 1
a30 1
**         PLIST         one row of dbuf pointed to by ikey   (RETURNED)
d118 1
a118 1
  char        outstr[109], docname[81], ptline[121];
d149 1
a149 1
  ptline[120] = '\0';
d157 2
a158 2
  /* read next line (until end-of-line or 120 char) from doc file */
  while ((fgets(reclin,120,ptrdoc)) != (char *) NULL)
d172 2
a173 1
          /* first line for this key; continuation line may be after it */
d210 1
a210 1
               *lptr : number of registers read for key "pkey" */
@


1.9
log
@removed doc_read option (never used yet)
@
text
@d1 1
a1 1
/*$Header: /net/ithaca/usr1/web/src/RCS/unsdal.c,v 1.8 1996/03/21 19:52:43 leith Exp leith $*/
d4 2
a5 2
**    unsdal.c
**                  by Mahieddine Ladjadj       7/93
a40 1
**                       -44  blank or bad continuation line
a44 1
**                       -6   > registers than maxreg for >= one continuation key
a56 2
**                       45   continuation of non-exiting line
**                       46   error reading continuation line
d118 1
a118 1
  char        outstr[109], docname[81], ptline[101];
d122 1
a122 1
  int         nc, pkey, regsonline, nd2, nd1, 
d149 2
a150 2
  ptline[100] = '\0';
  reclin     = &ptline[0];
d157 2
a158 2
  /* read next line (until end-of-line or 80 char) from doc file */
  while ((fgets(reclin,100,ptrdoc)) != (char *) NULL)
d168 1
a168 3
          {  /******************** continue previous line ************/
          /* avoid "-99" which is the continuation character */
          reclin += 2;
a169 60
          /* sscanf stops when it can not read but has no useful
          ** return warning. nd1 and nd2 have to be read. */

          nd1 = nd2 = 0;
          if ((sscanf(reclin,"%d %d %n", &nd1, &nd2, &nc) <= 0)
               || nd1 != 99 || nd2 == 0)
              {  /* empty line or end of previous line or bad line */
              if (nc > 1 && message1)
                 {
                 spout("*** Bad continuation line in doc file");
                 spout(reclin); lerr = -44; message1 = FALSE;
                 }
              }
          else
              { 
              /* Ensure this line is a continuation of existing line */

              /* lptr : pointer to 1st entry of "pkey" register list
                 *lptr : number of registers read for key "pkey" */

              lptr  = dbuf + (pkey - 1) * maxreg;
              ilast = (int) *lptr + nd2;
              if (ilast > (maxreg - 1) )
                 {
                 if (message) 
                   {
                   sprintf(outstr,
                      "*** For key = %d register number: %d > maxreg = %d\n",
                             pkey,ilast,maxreg);
                   spout(outstr);  message = FALSE;
                   }
                 lerr = -6;
                 }

              /* don't trust this line to be continuation of previous line.
              ** recompute the number of entries in registers for key "pkey".
              */   
 
              nkey  = (int) *lptr;
              ilast = MYMIN(ilast,(maxreg - 1));
              ptr   = lptr + nkey;
              for (i = nkey + 1; i < ilast + 1; i++)
                 {
                 reclin += nc;
                 if ((sscanf(reclin,"%f %n",++ptr,&nc)) <= 0) 
                   { 
                   spout("*** Error converting doc file continuation line ");
                   spout(reclin); fclose(ptrdoc); return 46;
                   }
                 }

              /* more registers for the same key, update count */
              *(lptr) = ilast;
                                                         
              /* update key max : total number of keys */
              *lastkeygot = MYMAX(*lastkeygot, pkey);
              }
          }                      /* end if (*(++reclin) == '-')  */


d175 1
a175 1
          ** return warning. pkey and nd2 have to be read. */
@


1.8
log
@removed unused var.
@
text
@d1 1
a1 1
/*$Header: /net/ithaca/usr1/web/src/RCS/unsdal.c,v 1.7 1994/05/05 15:53:12 leith Exp leith $*/
d27 2
a28 2
**         DOC_READ      FLAGS SHOWING DOC FILE IS IN DBUF()  (SENT&RET)
**         IKEY          KEY FOR LINE OF REGISTERS FOR PLIST (SENT)
a88 1
**
d117 1
a117 1
 int unsdal(char *docnam, int *read_doc, int ikey, float *plist,
a133 47

  /* if the file in docnam is already in buf, read_doc = FALSE    */
  if (*read_doc != TRUE) 
    {
    /* the file has been read into buf already */
    dbuf = *buf; 
    if (!dbuf)
       {spout("*** Empty doc file buffer (null ptr)"); return 13;}
      
    if(ikey <= 0)
       {
       sprintf(outstr,"*** Impossible docfile key requested: %d",ikey);
       spout(outstr);  return 12;
       }

    if (ikey > maxkeys)
       {
       sprintf(outstr,"*** Requested docfile key: %d must be <= : %d",
                   ikey, maxkeys);
       spout(outstr);  return 10;
       }

    if ((nkey = (int) *(dbuf + (ikey-1) * maxreg)) <= 0) 
       {
       sprintf(outstr,"*** Requested key: %d not in doc file", nkey);
       spout(outstr);  return 11;
       }
  
    /* find all registers for this key */  
    ilast = MYMIN(nkey,nlist);
    ptr   = dbuf + (ikey-1) * maxreg;
    for (i=1; i <= ilast; plist[i++] = *(++ptr)); 
      
    if (ilast < nlist) 
       {
       sprintf(outstr,
          "*** Requested key: %d has only: %d registers, asked for: %d",
          ikey,ilast,nlist);
       spout(outstr);  return -10;
       }
    return 0;
    }


  /*   Calling routine is asking unsdal to open a document,
  **   read its contents and close the document file .   */

d138 1
a138 1
      if ((strlen(docname) + strlen(datexc) + 1) > 80)
d302 1
a302 2
  /* close the doc file and set read_doc to FALSE to indicate that the doc
  ** file has been read and stored in dbuf  */
a306 1
  *read_doc = FALSE;
@


1.7
log
@ml's fixes
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/unsdal.c,v 1.6 94/03/18 10:42:44 leith Exp $*/
d127 1
a127 1
  int         nc, pkey, regsonline, nd2, nd1, err, n,
@


1.6
log
@improved
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/unsdal.c,v 1.5 94/03/17 11:30:09 leith Exp $*/
d24 1
d37 1
a37 1
**   RETURNS:
d123 1
a123 1
  char        outstr[109], docname[81], ptline[81];
d127 1
a127 1
  int         nc, pkey, regsonline, nd2, ierr, n,
d157 1
a157 1
    if ((nkey = *(dbuf + (ikey-1) * maxreg)) <= (float ) 0) 
d159 1
a159 1
       sprintf(outstr,"*** Requested key: %d not in doc file", ikey);
d201 1
a201 1
  ptline[80] = '\0';
d210 1
a210 1
  while ((fgets(reclin,80,ptrdoc)) != (char *) NULL)
d217 1
a217 1
         { /* skip this comment lineit */ ;  }
d221 1
d225 1
a225 1
          ** return warning. pkey and nd2 have to be read. */
d227 3
a229 3
          pkey = nd2 = 0;
          if ((sscanf(reclin,"%d %d %n", &pkey, &nd2, &nc) <= 0)
               || pkey == 0 || nd2 == 0)
d240 1
a240 5
 
              if (pkey > maxkeys ) 
                  { spout("*** Continuation of non-existing line!");
                  spout(reclin); fclose(ptrdoc); return 45; }                                      
                           
d245 1
a245 1
              ilast = *lptr + nd2;
d306 3
a308 3
              }                                    
          else
              {                                     
d365 1
a365 1
    else if ( (nkey = *(dbuf + (ikey-1) * maxreg)) <= (float ) 0) 
d367 1
a367 1
      sprintf(outstr,"*** No registers found for key: %d",ikey);
@


1.5
log
@fixed some bugs with fgets use
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/unsdal.c,v 1.4 94/02/14 12:45:22 leith Exp $*/
d110 1
a111 3
 /* external functions */
 extern void spout  (char *);

d135 1
a135 1
  /* if the file in docnam is alredy in buf, read_doc = FALSE    */
d158 1
a158 1
       sprintf(outstr,"*** Requested key: %d not present in doc file", ikey);
d178 2
a179 3
  /*   The calling routine is asking unsdal to open a document,
  **   read its contents and close the document file .
  **   add datexc (name extension ) to docnam if not already there  */
d181 1
d196 3
a198 3
  spout(docname);
  ptline[80]= '\0';
  reclin = &ptline[0];
d200 3
a210 1

d212 1
a212 1
         {spout("***Error reading docfile line:"); spout(reclin);
d228 1
a228 1
              {
d232 1
a232 3
                 spout(reclin);
                 lerr    = -44;
                 message1 = FALSE;
d241 1
a241 3
                  spout(reclin); fclose(ptrdoc);
                  return 45;       
                  }                                      
d255 1
a255 2
                   spout(outstr);
                   message = FALSE;
d295 2
a296 2
              {    
              if (nc > 1 && message1)
d304 1
a304 1
              /* this line can not be stored in array */
d306 2
a307 3
                "*** Found doc file key: %d > max keys: %d",pkey,maxkeys);
              spout(outstr);
             lerr = -4;       
d336 1
a336 2
                    spout(reclin); fclose(ptrdoc);
                    return 49;
d361 1
a361 1
  /* the doc file has been read in dbuf, is key wanted found?  */
d369 1
a369 1
      sprintf(outstr,"*** Empty register list for key: %d",ikey);
@


1.4
log
@replaced MIN,MAX with MYMIN,MYMAX
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/unsdal.c,v 1.3 93/11/26 12:29:27 leith Exp Locker: leith $*/
d35 5
a39 2
**         LERR          ERROR FLAG (  0 is normal)           (RETURNED)

d76 1
a76 1
**	NOTE:
d78 2
a79 2
**   we want to allocate memory at run time for arrays.
**   in this routine, the document file is read, and stored in a 1 D array.
d119 2
a120 2
 int unsdal(char *docnam, int *doc_read, int ikey, float *plist,
             int nlist, float **buf, int *key_tot,
d124 6
a129 6
  char        outstr[109], docname[81], ptline[80];
  char        * reclin;
  FILE        *ptrdoc;
  float       *dbuf, *ptr, *lptr;
  int         nc, pkey, ndum2, nd, nd2, nfirst,
              ilast, nkey, message, message1,lerr;
d131 4
a134 3
  *key_tot = 0;
  message  = message1 = TRUE;   /* display warning only once        */
  lerr     = 0;                 /* error in unsdal if lerr != 0     */
d137 2
a138 2
  /* if the file in docnam is alredy in buf, doc_read = FALSE        */
  if (*doc_read != TRUE) 
d143 1
a143 1
       {spout("Empty doc file buffer (null ptr)"); return 13;}
d169 1
a169 1
    if ( ilast < nlist) 
d172 1
a172 1
          "*** Requested key: %d has only: %d registers, asked for:",
a175 1

a181 1
  **
d196 1
a196 2
      spout(outstr);
      return 3; }
d199 1
d202 1
a202 1
  /* run time allocation of memory space for buf                    */
d210 1
d212 2
a213 1
         {spout("***Error reading docfile line:"); spout(reclin);return 4;}
d218 2
a219 2
      else if (*(reclin + 1) == '-')    /* continue previous line */
          {
d226 1
a226 1
          if ( ((sscanf(reclin,"%d %d %n", &pkey, &nd2, &nc))  <= 0)
d231 1
a231 1
                 spout(" *** Bad continuation line in doc file");
d243 1
a243 1
                  spout(reclin);
d256 2
a257 2
                   printf(outstr,
                      "For key = %d register number: %d > maxreg = %d\n",
d278 1
a278 1
                   spout(reclin); return 46;
d286 1
a286 1
              *key_tot = MYMAX(*key_tot, pkey);
d291 1
a291 1
      else                     /* new line */
d294 1
a294 1
          pkey = ndum2 = 0;
d298 2
a299 2
          if( ((sscanf(reclin,"%d %d %n", &pkey, &ndum2, &nc)) <= 0) 
               || pkey == 0 || ndum2 == 0)
d317 8
a324 5
              if (ndum2 > (maxreg - 1) )
                  {
                  printf(outstr,"*** Register: %d > maxreg = %d\n",
                         ilast,maxreg);
                  spout(outstr);  lerr = -5;
d327 2
a328 2
              /* event though ndum2 could be > maxreg, continue */
              ilast = MYMIN(ndum2, (maxreg - 1));
d342 1
a342 1
                    spout(reclin);
d350 1
a350 1
              *key_tot = MYMAX(*key_tot, pkey);
d352 1
a352 1
          }                      /* end of new line */
d356 1
a356 1
      }		               /* while (read next line of doc file) */
d359 1
a359 1
  /* close the doc file and set doc_read to FALSE to indicate that the doc
d365 1
a365 1
  *doc_read = TRUE;
@


1.3
log
@improved
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/unsdal.c,v 1.2 93/11/16 13:59:53 leith Exp Locker: leith $*/
d161 1
a161 1
    ilast = MIN(nkey,nlist);
d266 1
a266 1
              ilast = MIN(ilast,(maxreg - 1));
d282 1
a282 1
              *key_tot = MAX(*key_tot, pkey);
d321 1
a321 1
              ilast = MIN(ndum2, (maxreg - 1));
d343 1
a343 1
              *key_tot = MAX(*key_tot, pkey);
d373 1
a373 1
  ilast = MIN(nkey, nlist);
@


1.2
log
@improved error messages
@
text
@d1 1
a1 1
/*$Header: /alwyn/usr1/web//RCS/unsdal.c,v 1.1 93/11/12 08:57:52 leith Exp Locker: leith $*/
d25 3
a27 3
**         DOCNAM        DOC. FILE NAME
**         DOC_READ      FLAGS SHOWING A DOC FILE IS IN DBUF() NOW  (returned)
**         IKEY          KEY FOR LINE OF REGISTERS RETURNED IN PLIST (sent)
d29 7
a35 7
**         PLIST         one row of dbuf pointed to by ikey (SENT)
**         DBUF          BUFFER OF RETRIEVAL FROM DOC. FILE (returned)
**         DBUF[IKEY][0] NUMBER OF REGISTERS FOR KEY "IKEY"
**         KEY_TOT       NUMBER OF HIGHEST KEY FOUND IN FILE (RETURNED)
**         MAXKEY        NUMBER OF ROWS IN DBUF (SENT)
**         MAXREG        NUMBER OF COLUMNS IN DBUF (SENT)
**         LERR          ERROR FLAG (  0 is normal)
d129 1
a129 1
  message  = message1 = 0;	/* display warning only once        */
d186 1
a186 1
         { spout("*** Doc. file name too long: "); spout(docname); 
d225 1
a225 1
              if (message1 == 0)
d227 1
a227 1
                 spout(" *** Blank or bad continuation line in doc file");
d230 1
a230 1
                 message1 = 1;
d250 1
a250 1
                 if (message == 0) 
d252 1
a252 1
                    printf(outstr,
d255 2
a256 2
                    spout(outstr);
                    message = 1;
d265 1
a265 1
              nkey = (int) *lptr;
d267 1
a267 1
              ptr = lptr + nkey;
d274 1
a274 2
                   spout(reclin);
                   return 46;
d294 1
a294 1
          if( ((sscanf(reclin,"%d %d %n ", &pkey, &ndum2, &nc)) <= 0) 
d297 1
a297 1
              if (message1 == 0)
d299 2
a300 2
                  spout("*** Blank or bad line in doc file"); spout(reclin);
                  lerr     = -47;  message1 = 1;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*$Header$*/
d11 1
a11 1
** *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
d35 24
a58 8
**         LERR          ERROR FLAG
**                       = 0 no problem
**                       = 1 problem w/ memory allocation
**                       = 3     "      filename given
**                       = 4     "      reading doc file.
**                       = 6     "      maxreg < number of existing  registers
**                       = -1    "      the key ( no reg. list, nonexistant...
**                       = -2    "      nlist > number of existing  registers
d121 1
a121 1
  char        outstr[81], docname[81], ptline[80];
d132 3
a134 2
  /* if the file in docnam is read in entirely, doc_read = 1        */
  if (*doc_read != 0) 
d136 6
a141 1
    if(ikey > 0)
d143 3
a145 7
       /* the file has been read, find number of keys in dbuf array */
       dbuf = *buf; 
       if (ikey > maxkeys)
          {
          sprintf(outstr,"*** Key: %d must be <= : %d",ikey, maxkeys);
          spout(outstr);  return -1;
          }
d147 6
a152 2
       else if ((nkey = *(dbuf + (ikey-1) * maxreg)) <= (float ) 0) 
          { spout("*** Register list in doc file empty"); return 2; }
d154 4
a157 5
       ilast = MIN(nkey,nlist);
       ptr   = dbuf + (ikey-1) * maxreg;
       for (i=1; i <= ilast; plist[i++] = *(++ptr)); 
         
       if ( ilast < nlist) lerr = -2;
d159 13
a171 2
    else
       {lerr = -1;}
d173 2
a174 2
    return lerr;
  }
d180 2
a181 2
  **   add datexc (name extension ) to docnam if not already there 
  */
d186 1
a186 1
         { spout("*** Doc. file name too long: $"); spout(docname); 
a189 1
  spout(docname);
d193 1
a193 1
      { sprintf(outstr,"*** Unable to open: %s",docname);
d197 1
d200 1
a200 2
  /* run time allocation of heap memory space                     */
  dbuf = (float *) 0;
d203 1
a203 1
        { spout("*** Memory allocation failed in unsdal"); return 1; }
d209 1
a209 1
         {spout("*** Read error in unsdal.c "); return 4; }
d212 1
a212 1
         { /* skip it */ ;  }
d214 1
a214 1
      else if (*(reclin + 1) == '-')     /* continue previous line */
d227 4
a230 4
                 spout(" *** Blank line or character line in doc file");
                 spout(" *** Bad continuation line read by unsdal.c");
                 lerr    = 44;
                 message = 1;
d235 2
a236 3
              /* check that this continuation line is a continuation
              ** line of a line that we have already read. */

d238 2
a239 1
                  { spout("*** Continuation of a non-existing line!");
d253 1
a253 1
                      " for key = %d register number %d > maxreg = %d\n",
d258 1
a258 1
                 lerr = 6;
d261 1
a261 1
              /* do not trust this line to be continuation of previous line.
d263 2
a264 1
              */    
d269 9
a277 6
                  {
                  reclin += nc;
                  if ((sscanf(reclin,"%f %n",++ptr,&nc)) <= 0) 
                     { spout("*** Read error in unsdal.c ");
                     return 46;}
                  }
d300 2
a301 3
                  spout("*** Blank line or character line in doc file");
                  lerr     = 44;
                  message1 = 1;
d304 8
d313 1
a313 9
              {
              /* check that this line can be stored in array */
              if (pkey > maxkeys ) 
                 {
                 sprintf(outstr,"*** File key: %d > max keys: %d",
                           pkey,maxkeys);
                 spout(outstr);  return 48;       
                 }                                      
                                      
d318 1
a318 2
                  spout(outstr);
                  lerr = 6;
d334 5
a338 1
                    { spout("*** Read error in unsdal.c "); return 49;}
d353 1
a353 1
  /* close the doc file and set doc_read to 1 to indicate that the doc
d359 2
a360 2
  *doc_read = 1;
  if (ikey == 0) return 0;
d371 1
a371 1
      spout(outstr); return 2;
d378 1
a378 1
  if ( ilast < nlist)  return 5;
@
