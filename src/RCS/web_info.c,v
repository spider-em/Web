head	1.15;
access;
symbols
	pre-tilt-improve:1.14
	pre_surf_fromtop:1.14
	pre_neednewmap:1.14
	pre_apppluss_remove:1.14
	pre_tiltpair_chng:1.13
	pre_GPL:1.11;
locks;
comment	@ * @;


1.15
date	2018.12.07.17.03.35;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.07.18.14.29.16;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.05.12.05.27;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.18.16.59.39;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	96.01.22.20.51.46;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	95.08.15.13.50.57;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	95.05.05.20.13.02;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	94.08.03.16.10.24;	author odesanya;	state Exp;
branches;
next	1.7;

1.7
date	94.08.03.15.36.18;	author odesanya;	state Exp;
branches;
next	1.6;

1.6
date	94.07.23.17.23.20;	author odesanya;	state Exp;
branches;
next	1.5;

1.5
date	94.07.20.22.41.50;	author odesanya;	state Exp;
branches;
next	1.4;

1.4
date	94.07.20.21.15.32;	author odesanya;	state Exp;
branches;
next	1.3;

1.3
date	94.07.20.18.49.45;	author odesanya;	state Exp;
branches;
next	1.2;

1.2
date	94.03.18.10.42.27;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	93.11.10.10.11.47;	author leith;	state Exp;
branches;
next	;


desc
@@


1.15
log
@bollingers_email_and_cosmetic
@
text
@
/*$Header: /usr8/web/src/RCS/web_info.c,v 1.14 2011/07/18 14:29:16 leith Exp $*/
/*
 C++********************************************************************
 C
 C  web_info.c
 C *********************************************************************
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2018  Health Research Inc.                     *
 C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.     *
 C=* Email:  spider@@health.ny.gov                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
 C **********************************************************************
 C
 C  web_info
 C
 C  PURPOSE:  GIVES MISC. INFO ON X-WINDOWS SYSTEM USEFUL FOR DEBUGGING
 C
 C--********************************************************************
*/

#include "common.h"
#include "routines.h"

 /**********************  web_info  **************************/

 void  web_info(Widget iw_temp, void * data, void * call_data)
 { 

 Arg           args[1];
 int           idepth, iwide, ihigh, black, white;
 int           nummap, minmap, maxmap;
 Colormap      *maps, defmap, imap;
 char          *enviro, mandir[81];
 int           i;
 char          *oper;

 oper = data;
 if(*oper == '1')  // Inactivated the call jul 2011
  {
    if( (enviro = getenv("WEBMAN_DIR") ) == NULL )
     {
      spout("Could not get the WEBMAN_DIR environment");
      return;
     }
     strcpy(mandir,enviro);
     strcat(mandir,"web.man");
     web_man(NULL, mandir, NULL);
     return;
  }

 printf(" ------- X Window & Motif information --------------- \n");
 idepth = DefaultDepthOfScreen(iscreen);
 ihigh  = HeightOfScreen(iscreen);
 iwide  = WidthOfScreen(iscreen);

 printf(" Screen width & height:   %6d, %6d \n",iwide,ihigh);
 printf(" Screen depth:          %6d \n",idepth);

 white  = WhitePixelOfScreen(iscreen);
 black  = BlackPixelOfScreen(iscreen);
 printf(" Black & white pixels:      %#x , %#x \n",black,white);

 minmap = XMinCmapsOfScreen(iscreen);
 maxmap = XMaxCmapsOfScreen(iscreen);

 defmap = XDefaultColormapOfScreen(iscreen);
 printf(" Default colormap:          %p \n",(void *)defmap);
 printf(" Web colormap:              %p \n",(void *)map);

 XtSetArg(args[0], XmNcolormap, &imap); 
 XtGetValues(iw_top,args,1);
 printf(" iw_top colormap:           %p \n",(void *)imap);
 XtGetValues(iw_main,args,1);
 printf(" iw_main colormap:          %p \n",(void *)imap);
 XtGetValues(iw_win,args,1);
 printf(" iw_win colormap:           %p \n",(void *)imap);
 XtGetValues(iw_menub,args,1);
 printf(" iw_menub colormap:         %p \n",(void *)imap);

 maps = XListInstalledColormaps(idispl,iwtop,&nummap);
 printf(" # of Installed maps:  %6d \n",nummap);
 for (i=0; i<nummap; i++)
 printf(" Map %d:                     %p \n",i+1,(void *)maps[i]);

 printf(" Mapgo...mapend:         %6d , %6d\n",mapgo,mapend);
 printf(" Colorgo...colorend:     %6d , %6d\n",colorgo,colorend);

 /* list current visual information */
 int deptht,ncolorst;
 visual_info(idispl, visual, &deptht, &ncolorst);

  /* list available visuals on this workstation */
 printf(" ---------- Available visuals ----------\n");
 visuals(idispl,XDefaultScreen(idispl));

 /* list values in SPIDER colormap */
 printf(" ---------- Spider colormap -----%p -----\n",(void *)map);
 lut_info("Spider",map,  idepth, 0,256); 

 planeforcolor(129);
 planeforcolor(130);
 planeforcolor(135);

 }



#ifdef NEVER
       INTEGER         ILOC(10)
       INTEGER         MASK
       INTEGER         IPMASK
       LOGICAL         LPMASK
       EQUIVALENCE     (IPMASK,LPMASK)

       CALL WID_OUTPUT(0,' THE INFO IS PLACED IN FOR00?.DAT',0)

       WRITE(NDAT,*) ' '
       WRITE(NDAT,*) ' X-WINDOWS INFORMATION ----------'

C      GET VISUAL (CAN QUERY WITH DEBUGGER)
       CALL X$DEFAULT_VISUAL_OF_SCREEN(ISCREEN,VISUAL)

C      LIST DISPLAY AND SCREEN POINTERS
       WRITE(NDAT,*) ' IPARENT & IROOT:      ' ,IPARENT,IROOT
       WRITE(NDAT,*) ' IDISPL & ISCREEN:     ' ,IDISPL,ISCREEN
       WRITE(NDAT,*) ' IWIN & ICONTX         ' ,IWIN,ICONTX
       WRITE(NDAT,*) ' ISPIDER,IMAGSAV:      ' ,ISPIDER,IMAGSAV

       IWMAIN   = XT$WINDOW(IW_MAIN)
       IWMENUB  = XT$WINDOW(IW_MENUB)
       IWMENUP1 = XT$WINDOW(IW_MENUP1)

       WRITE(NDAT,*) ' IWCOM,IWMAIN:         ' ,IWCOM,IWMAIN
       WRITE(NDAT,*) ' IWMENUB,IWMENUP1      ' ,IWMENUB,IWMENUP1


       CALL X$QUERY_BEST_CURSOR(IDISPL,IWIN,16,16,IW2,IH2)
       WRITE(NDAT,*) ' CURSOR SIZE <= 16X16: ',IW2,IH2

       NORDR   = X$IMAGE_BYTE_ORDER(IDISPL)
       IF (NORDR .EQ. X$C_LSB_FIRST) THEN
          WRITE(NDAT,*) ' LEAST SIG. BIT FIRST'
       ELSEIF (NORDR .EQ. X$C_MSB_FIRST) THEN
          WRITE(NDAT,*) ' MOST SIG. BIT FIRST'
       ELSE
          WRITE(NDAT,*) ' UNKNOWN BYTE FIRST:', NORDR
       ENDIF
       ISIZE   = X$BITMAP_UNIT(IDISPL)
       IPAD    = X$BITMAP_PAD(IDISPL)
       WRITE(NDAT,*) ' BITMAP UNIT, PAD:     ', ISIZE,IPAD

       NSCREEN = X$SCREEN_COUNT(IDISPL)
       ISNUM   = X$DEFAULT_SCREEN(IDISPL)
       WRITE(NDAT,*) ' # SCREENS, SCREEN #:  ', NSCREEN,ISNUM

       IDEPTH  = X$DEFAULT_DEPTH_OF_SCREEN(ISCREEN)
       IPLAN   = X$PLANES_OF_SCREEN(ISCREEN)
       WRITE(NDAT,*) ' SCREEN DEPTH & PLANES:', IDEPTH,IPLAN

       IP1     = X$DISPLAY_PLANES(IDISPL,ISNUM)
       IC1     = X$DISPLAY_CELLS(IDISPL,ISNUM)
       WRITE(NDAT,*) ' DISPLAY PLANES,CELLS: ', IP1,IC1

       IPMASK = X$ALL_PLANES()
       WRITE(NDAT,*) ' ALL PLANES MASK:      ', IPMASK

C      FIND HOSTS
       CALL X$LIST_HOSTS(IDISPL,NUMHOSTS,STATE,,10,ILOC)
       WRITE(NDAT,*) ' # HOSTS:              ', NUMHOSTS,ILOC(1)

C      FIND OUT PRESENT FOCUS
       CALL X$GET_INPUT_FOCUS(IDISPL,IFOCUS)
       WRITE(NDAT,*) ' CURRENT INPUT FOCUS   ', IFOCUS


       CALL DWT$VMS_SET_ARG(%LOC(IX),ARG_LIST,0,DWT$C_NX)
       CALL DWT$VMS_SET_ARG(%LOC(IY),ARG_LIST,1,DWT$C_NY)
       CALL DWT$VMS_SET_ARG(%LOC(IW),ARG_LIST,2,DWT$C_NWIDTH)
       CALL DWT$VMS_SET_ARG(%LOC(IH),ARG_LIST,3,DWT$C_NHEIGHT)
       CALL XT$GET_VALUES(IW_OUTPUT,ARG_LIST,4)
       WRITE(NDAT,*) ' OUTPUT WINDOW POS     ', IX,IY
       WRITE(NDAT,*) ' OUTPUT WINDOW SIZE    ', IW,IH

       ITEMP = MESMAX
       WRITE(NDAT,*) ' SCROLLING MESSAGES    ', ITEMP
       CALL XT$GET_VALUES(IW_VERS,ARG_LIST,4)
       WRITE(NDAT,*) ' SCROLLING WINDOW POS  ', IX,IY
       WRITE(NDAT,*) ' SCROLLING WINDOW SIZE ', IW,IH


       MINMAP  = X$MIN_CMAPS_OF_SCREEN(ISCREEN)
       MAXMAP  = X$MAX_CMAPS_OF_SCREEN(ISCREEN)
       WRITE(NDAT,*) ' MIN & MAX # MAPS:     ', MINMAP,MAXMAP

       IBLACK1 = X$BLACK_PIXEL_OF_SCREEN(ISCREEN)
       IBLACK2 = X$BLACK_PIXEL(IDISPL,ISNUM)
       WRITE(NDAT,*) ' BLACK INDICES:        ', IBLACK1,IBLACK2
       IWHITE1 = X$WHITE_PIXEL_OF_SCREEN(ISCREEN)
       IWHITE2 = X$WHITE_PIXEL(IDISPL,ISNUM)
       WRITE(NDAT,*) ' WHITE  INDICES:       ', IWHITE1,IWHITE2
       WRITE(NDAT,*) ' MAPGO..MAPEND:        ', MAPGO,MAPEND

C      LIST MAP POINTER
       WRITE(NDAT,*) ' SHARED MAP POINTER    ', MAPSHAR
       WRITE(NDAT,*) ' PRIVATE MAP POINTER   ', MAPPRIV
       WRITE(NDAT,*) ' CURRENT MAP POINTER   ', MAP
       IER = X$LIST_INSTALLED_COLORMAPS(IDISPL,IWIN,NUMMAP,,10,ILOC)
       WRITE(NDAT,*) ' NO. OF INSTALLED MAPS:', NUMMAP,ILOC(1)
       WRITE(NDAT,*) ' '
       WRITE(NDAT,*) ' IPIXELS ARRAY:'
       WRITE(NDAT,900) (IPIXELS(I),I=1,256)
900    FORMAT(10(10I4,/))
c      LIST COLOR-MAP CONTENTS
       IF (MAPSHAR .GT. 0) THEN
           WRITE(NDAT,*) ' SHARED COLORMAP --------------------'
           CALL WID_LUTINFO(MAPSHAR,IRTFLG)
       ENDIF
       IF (MAPPRIV .GT. 0) THEN
           WRITE(NDAT,*) ' PRIVATE COLORMAP -------------------'
           CALL WID_LUTINFO(MAPPRIV,IRTFLG)
       ENDIF
C*************   
C      GET WINDOW TREE FOR THE ROOT WINDOW
C         DO NOT ACTIVATE IN SEANDAWAY UNTIL RDPRIS IS REMOVED!!!!!!
C**       CALL WID_TREE(IDISPL,IROOT)
C********************
#endif

@


1.14
log
@comment on manual call
@
text
@d2 1
a2 1
/*$Header: /usr8/web/src/RCS/web_info.c,v 1.13 2011/05/05 12:05:27 leith Exp leith $*/
d4 4
a7 4
C++*********************************************************************
C
C  web_info.c
C **********************************************************************
d9 3
a11 6
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
d28 7
a34 7
C **********************************************************************
C
C  web_info
C
C  PURPOSE:  GIVES MISC. INFO ON X-WINDOWS SYSTEM USEFUL FOR DEBUGGING
C
C--********************************************************************
d42 1
a42 1
 void  web_info(Widget iw_temp, caddr_t data, caddr_t call_data)
d83 2
a84 2
 printf(" Default colormap:          %#x \n",defmap);
 printf(" Web colormap:              %#x \n",map);
d88 1
a88 1
 printf(" iw_top colormap:           %#x \n",imap);
d90 1
a90 1
 printf(" iw_main colormap:          %#x \n",imap);
d92 1
a92 1
 printf(" iw_win colormap:           %#x \n",imap);
d94 1
a94 1
 printf(" iw_menub colormap:         %#x \n",imap);
d99 1
a99 1
 printf(" Map %d:                     %#x \n",i+1,maps[i]);
d113 1
a113 1
 printf(" ---------- Spider colormap -----%#x -----\n",map);
@


1.13
log
@-cmap_changes_etc
@
text
@d2 1
a2 1
/*$Header: /net/bali/usr1/web/src/RCS/web_info.c,v 1.12 2005/10/18 16:59:39 leith Exp $*/
d57 1
a57 1
 if(*oper == '1')
@


1.12
log
@GPL
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/web_info.c,v 1.11 1996/01/22 20:51:46 leith Exp $*/
d4 1
a4 1
C++*************************************************************************
a5 1
C  WID_INFO.FOR                         
d37 1
a37 1
C--*******************************************************************
d70 1
a70 1
 printf("------- X Window & Motif information --------------- \n");
d75 2
a76 2
 printf("Screen width & height:   %6d , %6d \n",iwide,ihigh);
 printf("Screen depth:            %6d \n",idepth);
d80 1
a80 1
 printf("Black & white pixels:    %6d , %6d \n",black,white);
d86 2
a87 9
 printf("Default colormap:        %6d \n",defmap);
 printf("Current colormap:        %6d \n",map);
 maps = XListInstalledColormaps(idispl,iwtop,&nummap);
 printf("Number of Installed maps:%6d \n",nummap);
 for (i=0; i<nummap; i++)
      printf("Map:                   %6d , %6d \n",i+1,maps[i]);
 printf("Mapgo...mapend:          %6d , %6d\n",mapgo,mapend);
 printf("Colorgo...colorend:      %6d , %6d\n",colorgo,colorend);
 printf("Imagego...imageend:      %6d , %6d\n",imagego,imageend);
d91 1
a91 1
 printf("iw_top colormap:        %6d \n",imap);
d93 1
a93 1
 printf("iw_main colormap:       %6d \n",imap);
d95 1
a95 1
 printf("iw_win colormap:        %6d \n",imap);
d97 9
a105 1
 printf("iw_menub colormap:      %6d \n",imap);
d108 2
a109 1
 visual_info(idispl, visual);
d111 2
a112 1
 /* list available visuals on this workstation */
d116 2
a117 2
 printf("---------- Spider colormap -----%6d -----\n",map);
 wid_lutinfo(map, 256);
d119 3
a121 3
 /* list values in default colormap */
 printf("---------- Default colormap -----%6d -----\n",defmap);
 wid_lutinfo(defmap, 256);
@


1.11
log
@used imagego..imagenend instead of mapgo..
added imagego output
./
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/web_info.c,v 1.10 1995/08/15 13:50:57 leith Exp leith $*/
d8 25
a32 8
C **************************************************************************
C *  COPYRIGHT (C)1992, WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
@


1.10
log
@fixed manual display
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/web_info.c,v 1.9 1995/05/05 20:13:02 leith Exp leith $*/
a26 4
#define MAX_ARGS  1

 extern int   colorgo, colorend;

d32 1
a32 1
 Arg           args[MAX_ARGS];
d75 1
a75 1
      printf("Map:                     %6d , %6d \n",i+1,maps[i]);
d78 1
@


1.9
log
@incompatible pointer on alpha
@
text
@d2 1
a2 1
/*$Header: /net/ithaca/usr1/web/src/RCS/web_info.c,v 1.8 1994/08/03 16:10:24 odesanya Exp leith $*/
d42 1
d44 2
a45 1
 if(*((int*)data) == '1')
@


1.8
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web/src/RCS/web_info.c,v 1.6 94/07/23 17:23:20 odesanya Exp $*/
d43 1
a43 1
 if(*data == '1')
@


1.7
log
@*** empty log message ***
@
text
@d40 1
a40 1
 char          *mandir;
d45 1
a45 1
    if( (mandir = getenv("WEBMAN_DIR") ) == NULL )
d50 1
@


1.6
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/web_info.c,v 1.5 1994/07/20 22:41:50 odesanya Exp $*/
d40 1
a40 1
 char          mandir[81];
d45 5
a49 1
     strcpy(mandir,getenv("WEBMAN_DIR") );
@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*$Header: /net/alwyn/usr1/web/src/RCS/web_info.c,v 1.3 1994/07/20 18:49:45 odesanya Exp $*/
d47 1
a47 1
     web_man(mandir);
@


1.4
log
@*** empty log message ***
@
text
@a44 3
#ifdef VMS
     strcpy(mandir,"WEBMAN_DIR");
#else
a45 1
#endif
@


1.3
log
@including the web manual viewer
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web//RCS/web_info.c,v 1.2 94/03/18 10:42:27 leith Exp $*/
a23 8
#include <Xm/Text.h>
#include <Xm/Form.h>
#ifdef VMS
#include <stat.h>
#else
#include <sys/stat.h>
#endif

d27 1
a27 2
#define MAX_ARGS  6
#define MAX_CHARS 81
a30 3
/* internal function prototype */
 void web_man( void );

d40 1
d45 8
a52 2
    web_man();
    return;
a228 79
Widget   iw_manual = 0;

void  web_man()
{
 FILE        *fp = NULL;
 struct stat file_info;
 char        *buffer, mandir[MAX_CHARS];
 Arg         args[MAX_ARGS];
 Widget      iw_dums, iw_pusha, iw_pushc;
 Widget      iw_manview, iw_form, iw_rowcolv;

 if ((int)iw_manual <= 0)
    {   /* create scrolled text viewer widget */

      iw_manual  = wid_dialog(iw_win, 0, "Web Manual", -1, -1);
        XtSetArg( args[0], XmNautoUnmanage, False ); 
       XtSetArg( args[1], XmNnoResize, True );  
       XtSetValues(iw_manual, args, 2);

      iw_rowcolv  = wid_rowcol(iw_manual, 'v', -1, -1);

    /* create box for Exiting ----------------------------------- Finished */
      iw_dums = wid_stdbut(iw_rowcolv, iw_manual, 
                        &iw_dums, &iw_pushc, &iw_pusha,  "F",
                        fin_cb, fin_cb, fin_cb, NULL);

/* create the scrolled widget */
      XtSetArg( args[0], XmNrows,               34 );
      XtSetArg( args[1], XmNcolumns,            82 );
      XtSetArg( args[2], XmNeditable,           FALSE );
      XtSetArg( args[3], XmNeditMode,           XmMULTI_LINE_EDIT );
      XtSetArg( args[4], XmNscrollHorizontal,   FALSE );
   
      iw_manview = XmCreateScrolledText(iw_rowcolv, "Web Manual Scroller",
                                       args, 5);
      XtManageChild( iw_manview );

#ifdef VMS
      strcpy(mandir,"WEBMAN_DIR");
#else
      strcpy(mandir,getenv("WEBMAN_DIR") );
#endif
      strcat(mandir,"web.man");
/* try opening the file  */
      fp = fopen(mandir,"r");

      if(fp != NULL)
       { 
         /* get file size  */
          if( stat(mandir, &file_info) != 0)
            fclose( fp );
          else
           {
            if( (buffer = (char *) XtMalloc( file_info.st_size + 5)) ==
                  (char *) NULL)
             fclose( fp );
            else
             {
              if( fread(buffer, 1, file_info.st_size, fp) < file_info.st_size)
                {
                 XtFree( buffer );
                 fclose( fp );
                }
               else
                {
                  buffer[file_info.st_size - 1 ] = '\0';  /* truncate */
                  XmTextSetString( iw_manview, buffer );
                  XtFree ( buffer );
                }
             }
           }

       if(fp) fclose( fp );
       }
    }

 XtManageChild(iw_manual);

}
@


1.2
log
@added more info
@
text
@d2 1
a2 1
/*$Header: /alwyn/usr1/web/RCS/web_info.c,v 1.1 93/11/10 10:11:47 leith Exp $*/
d23 9
d35 2
a36 1
#define MAX_ARGS 1
d40 3
d45 1
a45 1
 void  web_info()
d54 6
d234 79
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*$Header$*/
d24 2
d28 1
a28 4
 /* external subroutine prototypes */
 extern void  visual_info  (Display *, Visual *);
 extern int   wid_lutinfo  (Colormap, int);
 extern void  visuals      (Display *, int);
a29 1

d38 1
a38 2
 Colormap      *maps, defmap;
 Visual        *visualt;
d60 1
a60 1
 printf("Installed maps:          %6d \n",nummap);
d62 3
a64 1
   printf("Map:                     %6d , %6d \n",i+1,maps[i]);
d66 5
a70 1
 XtSetArg(args[0], XmNvisual, &visualt);
d72 3
d79 3
d83 1
d86 4
a89 2
 /* list available visuals on this workstation */
 visuals(idispl,XDefaultScreen(idispl));
@
