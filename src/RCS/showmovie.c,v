head	1.8;
access;
symbols
	pre-tilt-improve:1.7
	pre_surf_fromtop:1.7
	pre_neednewmap:1.7
	pre_apppluss_remove:1.7
	pre_tiltpair_chng:1.7
	pre_GPL:1.6;
locks;
comment	@ * @;


1.8
date	2018.12.07.17.03.34;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.18.16.59.24;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.16.20.21.51;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.10.18.50.23;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.12.14.43.20;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.04.19.33.06;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.04.16.21.24;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.04.15.08.27;	author leith;	state Exp;
branches;
next	;


desc
@@


1.8
log
@bollingers_email_and_cosmetic
@
text
@/*
C
C++*********************************************************************
C
C showmovie.c
C
C **********************************************************************
C * WEB.    AUTHOR: ARDEAN LEITH                                       *
 C=* FROM: WEB - VISUALIZER FOR SPIDER MODULAR IMAGE PROCESSING SYSTEM *
 C=* Copyright (C) 1992-2005  Health Research Inc.                     *
 C=*                                                                   *
 C=* HEALTH RESEARCH INCORPORATED (HRI),                               *   
 C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                  *
 C=*                                                                   *
 C=* Email:  spider@@wadsworth.org                                      *
 C=*                                                                   *
 C=* This program is free software; you can redistribute it and/or     *
 C=* modify it under the terms of the GNU General Public License as    *
 C=* published by the Free Software Foundation; either version 2 of    *
 C=* the License, or (at your option) any later version.               *
 C=*                                                                   *
 C=* This program is distributed in the hope that it will be useful,   *
 C=* but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *
 C=* General Public License for more details.                          *
 C=*                                                                   *
 C=* You should have received a copy of the GNU General Public License *
 C=* along with this program; if not, write to the                     *
 C=* Free Software Foundation, Inc.,                                   *
 C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.     *
 C=*                                                                   *
C **********************************************************************
C
C***********************************************************************
*/

#include "common.h"
#include "routines.h"
#include "mont.h"
#include "movie.h"

/* internal function prototypes */
static void  movie_popb       (Widget, XEvent *, String *, Cardinal *);
static void  movie_showframe  (int, int);
static void  movie_wait       (Widget, XtIntervalId *);
static int   movie_setframe   (int , int , int * , int );

/* external function prototypes */

/* external variables used/or set elsewhere */

/* variables also used/set elsewhere */
XImage *    ximagelist[1000];

/* internal variables used in this file */
static int           ixulm, iyulm;
static XtIntervalId  intval; 

/********************* showmovie  ************************************/

void showmovie(void)
  {
  showbutx("Step backwards in movie.",
           "Menu (Start/Stop movie).",
           "Step forwards in movie.",FALSE);

  actions(iw_win,"movie_popb",movie_popb,"123");

  XFlush(idispl);

  /* set movie location in center of window */
  ixulm = (iwidex - nsami) / 2;
  iyulm = (ihighx - nrowi) / 2;

  /* start movie running (using defaults set by showmoviemen)  */
  movie_showframe(movie_frame, TRUE);
  }

/********************************  movie_showframe  ************************/

void movie_showframe(int iframe, int keepgo)
   {
                    /*123456789 123*/
   char   outstr[12]="Frame:     $";
      
   /* display image at desired location */
   XPutImage(idispl,iwin,icontx, ximagelist[iframe] ,0,0,ixulm,iyulm,
              (unsigned int) nsami, (unsigned int) nrowi);
   XFlush(idispl);

   sprintf(&outstr[7],"%4d", movie_frame); 
   spouto(outstr);

   if (keepgo != 0)
     {  /* need to start up movie_popb after movie delay wait */
     intval = XtAppAddTimeOut(XtWidgetToApplicationContext(iw_win),
                       (unsigned long) movie_delay, 
                       (XtTimerCallbackProc) movie_wait,
		       (XtPointer) NULL);
     }

   }


/* ******************* movie_wait ************************************/

void movie_wait(Widget w, XtIntervalId *id)
     {
     String params[3];
     /* Strangely enough some extra timeout seem to occur. Execute
        this routine only if it is caused by showmoviemen timeout */


     if (*id == intval)
        { 
        params[0] = "W";
        movie_popb((Widget) NULL, (XEvent*) NULL, 
                   params, (Cardinal *) NULL);
        }
     }

/* ******************* movie_popb *************************************/

void movie_popb(Widget iw_t, XEvent *event, String *params,
                   Cardinal *num_params)
  { 
  int nextframe;
                       
  if (!(strcmp(*params,"1")))   /* button 1 pushed - step backwards*/
     {                         
     /* ndone: total number of images */
     nextframe   = movie_frame - 1;
     movie_inc   = 0;
     movie_frame = movie_setframe(nextframe, movie_twoways, 
                                  &movie_inc, ndone);
     }

  else if (!(strcmp(*params,"2")))          /* button 2 pushed - menu*/
     {  
     movie_inc = 0;                      
     showmoviemen(FALSE);
     return;
     }

  else if (!(strcmp(*params,"3"))) /*  button 3 pushed - step forward */
     {                         
     nextframe   = movie_frame + 1;
     movie_inc   = 0;
     movie_frame = movie_setframe(nextframe, movie_twoways, 
                                   &movie_inc, ndone);
     }

  else
     {
     /* keep going with movie */
     nextframe   = movie_frame + movie_inc;
     movie_frame = movie_setframe(nextframe, movie_twoways, 
                                  &movie_inc, ndone);
     }

  /* display next frame */
  movie_showframe(movie_frame, movie_inc);

  } 

/* ******************* movie_setframe *************************************/

int movie_setframe(int next, int twoways, int * increment, int ntot)
   {     /* finds next frame (1...ntot)   */

   int  iframe;
                       
   if (next < 1)
      { 
      if (twoways)
         {
         iframe = 2;
         if ((*increment) != 0) *increment = 1;
         }
      else
         {iframe = ntot;}
      }

   else if (next > ntot)
      { 
      if (twoways)
         {
         iframe = ntot - 1;
         if ((*increment) != 0) *increment = -1;
         }
      else
         {iframe = 1;}
      }
   else
      {
      iframe = next;
      }

   return iframe;
   }
@


1.7
log
@GPL
@
text
@d39 2
d43 4
a46 4
void         movie_popb       (Widget, XEvent *, String *, Cardinal *);
void         movie_showframe  (int, int);
void         movie_wait       (Widget, XtIntervalId *);
int          movie_setframe   (int , int , int * , int );
a48 1
extern void  showmoviemen     (int);
a50 2
extern int  movie_delay, movie_frame, movie_inc, movie_twoways, ndone;
extern int  nsami,nrowi,nslicei;   /* from mont3.c */
@


1.6
log
@*** empty log message ***
@
text
@d9 23
a31 5
C * COPYRIGHT (C)1993, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.5
log
@for stack movies
@
text
@d33 1
d55 2
a56 2
  ixulm = (iwidex - nsam) / 2;
  iyulm = (ihighx - nrow) / 2;
d71 1
a71 1
              (unsigned int) nsam, (unsigned int) nrow);
@


1.4
log
@added volume movie
@
text
@d77 1
a77 1
     {  /* need to start up movie_popb after moviedelab wait */
@


1.3
log
@*** empty log message ***
@
text
@d22 1
d27 2
a66 1
   String params[3];
@


1.2
log
@faster
@
text
@d119 2
a120 1
     {                        
@


1.1
log
@Initial revision
@
text
@d64 1
d66 1
a66 1
   /* copy image to desired location */
d81 1
@
